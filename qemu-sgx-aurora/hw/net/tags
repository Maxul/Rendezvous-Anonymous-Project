!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACC_RO	fsl_etsec/registers.h	/^    ACC_RO      = 2,            \/* Read Only *\/$/;"	e	enum:eTSEC_Register_Access_Type
ACC_RW	fsl_etsec/registers.h	/^    ACC_RW      = 1,            \/* Read\/Write *\/$/;"	e	enum:eTSEC_Register_Access_Type
ACC_UNKNOWN	fsl_etsec/registers.h	/^    ACC_UNKNOWN = 5             \/* Unknown register*\/$/;"	e	enum:eTSEC_Register_Access_Type
ACC_W1C	fsl_etsec/registers.h	/^    ACC_W1C     = 4,            \/* Write 1 to clear *\/$/;"	e	enum:eTSEC_Register_Access_Type
ACC_WO	fsl_etsec/registers.h	/^    ACC_WO      = 3,            \/* Write Only *\/$/;"	e	enum:eTSEC_Register_Access_Type
ADDR	etraxfs_eth.c	/^        ADDR,$/;"	e	enum:qemu_mdio::__anon118	file:
ADDR	xilinx_axienet.c	/^        ADDR,$/;"	e	enum:MDIOBus::__anon126	file:
ADVERTISE_100FULL	etraxfs_eth.c	37;"	d	file:
ADVERTISE_100FULL	xilinx_axienet.c	55;"	d	file:
ADVERTISE_100HALF	etraxfs_eth.c	36;"	d	file:
ADVERTISE_100HALF	xilinx_axienet.c	54;"	d	file:
ADVERTISE_10FULL	etraxfs_eth.c	35;"	d	file:
ADVERTISE_10FULL	xilinx_axienet.c	53;"	d	file:
ADVERTISE_10HALF	etraxfs_eth.c	34;"	d	file:
ADVERTISE_10HALF	xilinx_axienet.c	52;"	d	file:
ATTR	fsl_etsec/registers.h	276;"	d
ATTRELI	fsl_etsec/registers.h	277;"	d
AcceptAllPhys	rtl8139.c	/^    AcceptAllPhys = 0x01,$/;"	e	enum:rx_mode_bits	file:
AcceptBroadcast	rtl8139.c	/^    AcceptBroadcast = 0x08,$/;"	e	enum:rx_mode_bits	file:
AcceptErr	rtl8139.c	/^    AcceptErr = 0x20,$/;"	e	enum:rx_mode_bits	file:
AcceptMulticast	rtl8139.c	/^    AcceptMulticast = 0x04,$/;"	e	enum:rx_mode_bits	file:
AcceptMyPhys	rtl8139.c	/^    AcceptMyPhys = 0x02,$/;"	e	enum:rx_mode_bits	file:
AcceptRunt	rtl8139.c	/^    AcceptRunt = 0x10,$/;"	e	enum:rx_mode_bits	file:
BADF	lan9118.c	28;"	d	file:
BADF	lan9118.c	32;"	d	file:
BADF	stellaris_enet.c	19;"	d	file:
BADF	stellaris_enet.c	23;"	d	file:
BCR_APROMWE	pcnet.h	27;"	d
BCR_BSBC	pcnet.h	21;"	d
BCR_DWIO	pcnet.h	28;"	d
BCR_EECAS	pcnet.h	22;"	d
BCR_FDC	pcnet.h	20;"	d
BCR_LED1	pcnet.h	17;"	d
BCR_LED2	pcnet.h	18;"	d
BCR_LED3	pcnet.h	19;"	d
BCR_LNKST	pcnet.h	16;"	d
BCR_MC	pcnet.h	15;"	d
BCR_MSRDA	pcnet.h	13;"	d
BCR_MSWRA	pcnet.h	14;"	d
BCR_PLAT	pcnet.h	24;"	d
BCR_SSIZE32	pcnet.h	29;"	d
BCR_SWS	pcnet.h	23;"	d
BCR_SWSTYLE	pcnet.h	30;"	d
BCR_TMAULOOP	pcnet.h	26;"	d
BD_INTERRUPT	fsl_etsec/etsec.h	42;"	d
BD_LAST	fsl_etsec/etsec.h	43;"	d
BD_RX_BROADCAST	fsl_etsec/etsec.h	60;"	d
BD_RX_CR	fsl_etsec/etsec.h	65;"	d
BD_RX_EMPTY	fsl_etsec/etsec.h	56;"	d
BD_RX_FIRST	fsl_etsec/etsec.h	58;"	d
BD_RX_LG	fsl_etsec/etsec.h	62;"	d
BD_RX_MISS	fsl_etsec/etsec.h	59;"	d
BD_RX_MULTICAST	fsl_etsec/etsec.h	61;"	d
BD_RX_NO	fsl_etsec/etsec.h	63;"	d
BD_RX_OV	fsl_etsec/etsec.h	66;"	d
BD_RX_RO1	fsl_etsec/etsec.h	57;"	d
BD_RX_SH	fsl_etsec/etsec.h	64;"	d
BD_RX_TR	fsl_etsec/etsec.h	67;"	d
BD_TX_CFRL	fsl_etsec/etsec.h	50;"	d
BD_TX_HFELC	fsl_etsec/etsec.h	49;"	d
BD_TX_PADCRC	fsl_etsec/etsec.h	46;"	d
BD_TX_PREDEF	fsl_etsec/etsec.h	48;"	d
BD_TX_RC_MASK	fsl_etsec/etsec.h	51;"	d
BD_TX_RC_OFFSET	fsl_etsec/etsec.h	52;"	d
BD_TX_READY	fsl_etsec/etsec.h	45;"	d
BD_TX_TC	fsl_etsec/etsec.h	47;"	d
BD_TX_TOEUN	fsl_etsec/etsec.h	53;"	d
BD_TX_TR	fsl_etsec/etsec.h	54;"	d
BD_WRAP	fsl_etsec/etsec.h	41;"	d
BITS	eepro100.c	109;"	d	file:
BOARD_PHY_ADDRESS	cadence_gem.c	235;"	d	file:
BasicModeCtrl	rtl8139.c	/^    BasicModeCtrl = 0x62,$/;"	e	enum:RTL8139_registers	file:
BasicModeCtrl	rtl8139.c	/^    uint16_t BasicModeCtrl;$/;"	m	struct:RTL8139State	file:
BasicModeStatus	rtl8139.c	/^    BasicModeStatus = 0x64,$/;"	e	enum:RTL8139_registers	file:
BasicModeStatus	rtl8139.c	/^    uint16_t BasicModeStatus;$/;"	m	struct:RTL8139State	file:
CAM1	fsl_etsec/registers.h	257;"	d
CAM2	fsl_etsec/registers.h	258;"	d
CAR1	fsl_etsec/registers.h	255;"	d
CAR2	fsl_etsec/registers.h	256;"	d
CHECK_RMD	pcnet.c	582;"	d	file:
CHECK_RMD	pcnet.c	597;"	d	file:
CHECK_TMD	pcnet.c	589;"	d	file:
CHECK_TMD	pcnet.c	630;"	d	file:
CH_8100	rtl8139.c	/^    CH_8100,$/;"	e	enum:__anon153	file:
CH_8100B_8139D	rtl8139.c	/^    CH_8100B_8139D,$/;"	e	enum:__anon153	file:
CH_8101	rtl8139.c	/^    CH_8101,$/;"	e	enum:__anon153	file:
CH_8130	rtl8139.c	/^    CH_8130,$/;"	e	enum:__anon153	file:
CH_8139	rtl8139.c	/^    CH_8139 = 0,$/;"	e	enum:__anon153	file:
CH_8139A	rtl8139.c	/^    CH_8139A,$/;"	e	enum:__anon153	file:
CH_8139A_G	rtl8139.c	/^    CH_8139A_G,$/;"	e	enum:__anon153	file:
CH_8139B	rtl8139.c	/^    CH_8139B,$/;"	e	enum:__anon153	file:
CH_8139C	rtl8139.c	/^    CH_8139C,$/;"	e	enum:__anon153	file:
CH_8139_K	rtl8139.c	/^    CH_8139_K,$/;"	e	enum:__anon153	file:
COLLCONF	opencores_eth.c	/^    COLLCONF,$/;"	e	enum:__anon137	file:
COMMAND_CMD	eepro100.c	/^    COMMAND_CMD = BITS(2, 0),$/;"	e	enum:__anon79	file:
COMMAND_EL	eepro100.c	/^    COMMAND_EL = BIT(15),$/;"	e	enum:__anon79	file:
COMMAND_I	eepro100.c	/^    COMMAND_I = BIT(13),$/;"	e	enum:__anon79	file:
COMMAND_NC	eepro100.c	/^    COMMAND_NC = BIT(4),$/;"	e	enum:__anon79	file:
COMMAND_S	eepro100.c	/^    COMMAND_S = BIT(14),$/;"	e	enum:__anon79	file:
COMMAND_SF	eepro100.c	/^    COMMAND_SF = BIT(3),$/;"	e	enum:__anon79	file:
CONFIG_PAD_RECEIVED_FRAMES	eepro100.c	59;"	d	file:
CONTROL_PAYLOAD_SIZE	xilinx_axienet.c	58;"	d	file:
CONTROL_PAYLOAD_WORDS	xilinx_axienet.c	57;"	d	file:
CP_RX_BUFFER_SIZE_MASK	rtl8139.c	965;"	d	file:
CP_RX_EOR	rtl8139.c	963;"	d	file:
CP_RX_OWN	rtl8139.c	961;"	d	file:
CP_RX_STATUS_BAR	rtl8139.c	1084;"	d	file:
CP_RX_STATUS_CRC	rtl8139.c	1088;"	d	file:
CP_RX_STATUS_FS	rtl8139.c	1076;"	d	file:
CP_RX_STATUS_IPF	rtl8139.c	1090;"	d	file:
CP_RX_STATUS_LS	rtl8139.c	1078;"	d	file:
CP_RX_STATUS_MAR	rtl8139.c	1080;"	d	file:
CP_RX_STATUS_PAM	rtl8139.c	1082;"	d	file:
CP_RX_STATUS_RUNT	rtl8139.c	1086;"	d	file:
CP_RX_STATUS_TCPF	rtl8139.c	1094;"	d	file:
CP_RX_STATUS_UDPF	rtl8139.c	1092;"	d	file:
CP_RX_TAVA	rtl8139.c	967;"	d	file:
CP_RX_VLAN_TAG_MASK	rtl8139.c	969;"	d	file:
CP_TC_LGSEN_MSS_MASK	rtl8139.c	2003;"	d	file:
CP_TX_BUFFER_SIZE	rtl8139.c	2013;"	d	file:
CP_TX_BUFFER_SIZE_MASK	rtl8139.c	2014;"	d	file:
CP_TX_EOR	rtl8139.c	1995;"	d	file:
CP_TX_FS	rtl8139.c	1997;"	d	file:
CP_TX_IPCS	rtl8139.c	2006;"	d	file:
CP_TX_LGSEN	rtl8139.c	2001;"	d	file:
CP_TX_LS	rtl8139.c	1999;"	d	file:
CP_TX_OWN	rtl8139.c	1993;"	d	file:
CP_TX_STATUS_EXC	rtl8139.c	2032;"	d	file:
CP_TX_STATUS_LNKF	rtl8139.c	2030;"	d	file:
CP_TX_STATUS_OWC	rtl8139.c	2028;"	d	file:
CP_TX_STATUS_TES	rtl8139.c	2026;"	d	file:
CP_TX_STATUS_UNF	rtl8139.c	2024;"	d	file:
CP_TX_TAGC	rtl8139.c	2016;"	d	file:
CP_TX_TCPCS	rtl8139.c	2010;"	d	file:
CP_TX_UDPCS	rtl8139.c	2008;"	d	file:
CP_TX_VLAN_TAG_MASK	rtl8139.c	2018;"	d	file:
CPlusRxChkSum	rtl8139.c	/^    CPlusRxChkSum = 0x0020, \/* enable receive checksum offloading *\/$/;"	e	enum:CplusCmdBits	file:
CPlusRxEnb	rtl8139.c	/^    CPlusRxEnb    = 0x0002,$/;"	e	enum:CplusCmdBits	file:
CPlusRxVLAN	rtl8139.c	/^    CPlusRxVLAN   = 0x0040, \/* enable receive VLAN detagging *\/$/;"	e	enum:CplusCmdBits	file:
CPlusTxEnb	rtl8139.c	/^    CPlusTxEnb    = 0x0001,$/;"	e	enum:CplusCmdBits	file:
CRC	pcnet.c	686;"	d	file:
CSCR	rtl8139.c	/^    CSCR = 0x74,        \/* Chip Status and Configuration Register. *\/$/;"	e	enum:RTL8139_registers	file:
CSCR	rtl8139.c	/^    uint16_t CSCR;$/;"	m	struct:RTL8139State	file:
CSCRBits	rtl8139.c	/^enum CSCRBits {$/;"	g	file:
CSCR_Con_status	rtl8139.c	/^    CSCR_Con_status = 1<<3, \/* This bit indicates the status of the connection. 1 = valid connected link detected; 0 = disconnected link detected. RO def 0*\/$/;"	e	enum:CSCRBits	file:
CSCR_Con_status_En	rtl8139.c	/^    CSCR_Con_status_En = 1<<2, \/* Assertion of this bit configures LED1 pin to indicate connection status. def 0*\/$/;"	e	enum:CSCRBits	file:
CSCR_F_Connect	rtl8139.c	/^    CSCR_F_Connect  = 1<<5,  \/* Assertion of this bit forces the disconnect function to be bypassed. def 0*\/$/;"	e	enum:CSCRBits	file:
CSCR_F_LINK_100	rtl8139.c	/^    CSCR_F_LINK_100 = 1<<6, \/* Used to login force good link in 100Mbps for diagnostic purposes. 1 = DISABLE, 0 = ENABLE. def 1*\/$/;"	e	enum:CSCRBits	file:
CSCR_HEART_BIT	rtl8139.c	/^    CSCR_HEART_BIT = 1<<8,  \/* 1 = HEART BEAT enable, 0 = HEART BEAT disable. HEART BEAT function is only valid in 10Mbps mode. def 1*\/$/;"	e	enum:CSCRBits	file:
CSCR_JBEN	rtl8139.c	/^    CSCR_JBEN = 1<<7,  \/* 1 = enable jabber function. 0 = disable jabber function, def 1*\/$/;"	e	enum:CSCRBits	file:
CSCR_LD	rtl8139.c	/^    CSCR_LD  = 1<<9,  \/* Active low TPI link disable signal. When low, TPI still transmits link pulses and TPI stays in good link state. def 1*\/$/;"	e	enum:CSCRBits	file:
CSCR_PASS_SCR	rtl8139.c	/^    CSCR_PASS_SCR = 1<<0, \/* Bypass Scramble, def 0*\/$/;"	e	enum:CSCRBits	file:
CSCR_Testfun	rtl8139.c	/^    CSCR_Testfun = 1<<15, \/* 1 = Auto-neg speeds up internal timer, WO, def 0 *\/$/;"	e	enum:CSCRBits	file:
CSR_AFC_CFG	lan9118.c	57;"	d	file:
CSR_ASTRP_RCV	pcnet.c	215;"	d	file:
CSR_BADR	pcnet.c	247;"	d	file:
CSR_BADX	pcnet.c	250;"	d	file:
CSR_BSWP	pcnet.c	212;"	d	file:
CSR_BYTE_TEST	lan9118.c	40;"	d	file:
CSR_CRBA	pcnet.c	244;"	d	file:
CSR_CRBC	pcnet.c	229;"	d	file:
CSR_CRDA	pcnet.c	249;"	d	file:
CSR_CRST	pcnet.c	230;"	d	file:
CSR_CXBA	pcnet.c	245;"	d	file:
CSR_CXBC	pcnet.c	231;"	d	file:
CSR_CXDA	pcnet.c	252;"	d	file:
CSR_CXST	pcnet.c	232;"	d	file:
CSR_DPOLL	pcnet.c	216;"	d	file:
CSR_DRCVBC	pcnet.c	226;"	d	file:
CSR_DRCVPA	pcnet.c	225;"	d	file:
CSR_DRX	pcnet.c	220;"	d	file:
CSR_DTX	pcnet.c	221;"	d	file:
CSR_DXMTFCS	pcnet.c	223;"	d	file:
CSR_DXSUFLO	pcnet.c	214;"	d	file:
CSR_E2P_CMD	lan9118.c	58;"	d	file:
CSR_E2P_DATA	lan9118.c	59;"	d	file:
CSR_FIFO_INT	lan9118.c	41;"	d	file:
CSR_FREE_RUN	lan9118.c	53;"	d	file:
CSR_GPIO_CFG	lan9118.c	49;"	d	file:
CSR_GPT_CFG	lan9118.c	50;"	d	file:
CSR_GPT_CNT	lan9118.c	51;"	d	file:
CSR_HW_CFG	lan9118.c	44;"	d	file:
CSR_IADR	pcnet.c	243;"	d	file:
CSR_ID_REV	lan9118.c	36;"	d	file:
CSR_INEA	pcnet.c	211;"	d	file:
CSR_INIT	pcnet.c	205;"	d	file:
CSR_INTL	pcnet.c	224;"	d	file:
CSR_INT_EN	lan9118.c	39;"	d	file:
CSR_INT_STS	lan9118.c	38;"	d	file:
CSR_IRQ_CFG	lan9118.c	37;"	d	file:
CSR_LAPPEN	pcnet.c	213;"	d	file:
CSR_LOOP	pcnet.c	222;"	d	file:
CSR_LTINTEN	pcnet.c	218;"	d	file:
CSR_MAC_CSR_CMD	lan9118.c	55;"	d	file:
CSR_MAC_CSR_DATA	lan9118.c	56;"	d	file:
CSR_MISSC	pcnet.c	241;"	d	file:
CSR_NNRD	pcnet.c	253;"	d	file:
CSR_NNXD	pcnet.c	254;"	d	file:
CSR_NRBA	pcnet.c	246;"	d	file:
CSR_NRBC	pcnet.c	233;"	d	file:
CSR_NRDA	pcnet.c	248;"	d	file:
CSR_NRST	pcnet.c	234;"	d	file:
CSR_NXBA	pcnet.c	256;"	d	file:
CSR_NXDA	pcnet.c	251;"	d	file:
CSR_PINT	pcnet.c	236;"	d	file:
CSR_PMT_CTRL	lan9118.c	48;"	d	file:
CSR_POLL	pcnet.c	235;"	d	file:
CSR_PROM	pcnet.c	227;"	d	file:
CSR_PXDA	pcnet.c	255;"	d	file:
CSR_RCVRC	pcnet.c	237;"	d	file:
CSR_RCVRL	pcnet.c	239;"	d	file:
CSR_RXON	pcnet.c	210;"	d	file:
CSR_RX_CFG	lan9118.c	42;"	d	file:
CSR_RX_DP_CTRL	lan9118.c	45;"	d	file:
CSR_RX_DROP	lan9118.c	54;"	d	file:
CSR_RX_FIFO_INF	lan9118.c	46;"	d	file:
CSR_SPND	pcnet.c	217;"	d	file:
CSR_STOP	pcnet.c	207;"	d	file:
CSR_STRT	pcnet.c	206;"	d	file:
CSR_TDMD	pcnet.c	208;"	d	file:
CSR_TOKINTD	pcnet.c	219;"	d	file:
CSR_TXON	pcnet.c	209;"	d	file:
CSR_TX_CFG	lan9118.c	43;"	d	file:
CSR_TX_FIFO_INF	lan9118.c	47;"	d	file:
CSR_WORD_SWAP	lan9118.c	52;"	d	file:
CSR_XMTRC	pcnet.c	238;"	d	file:
CSR_XMTRL	pcnet.c	240;"	d	file:
CTRLMODER	opencores_eth.c	/^    CTRLMODER,$/;"	e	enum:__anon137	file:
CTRL_I	xilinx_ethlite.c	49;"	d	file:
CTRL_P	xilinx_ethlite.c	50;"	d	file:
CTRL_S	xilinx_ethlite.c	51;"	d	file:
CTR_AUTO_RELEASE	smc91c111.c	103;"	d	file:
CTR_RELOAD	smc91c111.c	104;"	d	file:
CTR_STORE	smc91c111.c	105;"	d	file:
CU_CMD_BASE	eepro100.c	117;"	d	file:
CU_DUMPSTATS	eepro100.c	118;"	d	file:
CU_NOP	eepro100.c	112;"	d	file:
CU_RESUME	eepro100.c	114;"	d	file:
CU_SHOWSTATS	eepro100.c	116;"	d	file:
CU_SRESUME	eepro100.c	119;"	d	file:
CU_START	eepro100.c	113;"	d	file:
CU_STATSADDR	eepro100.c	115;"	d	file:
Cfg1_Driver_Load	rtl8139.c	/^    Cfg1_Driver_Load = 0x20,$/;"	e	enum:Config1Bits	file:
Cfg1_LED0	rtl8139.c	/^    Cfg1_LED0 = 0x40,$/;"	e	enum:Config1Bits	file:
Cfg1_LED1	rtl8139.c	/^    Cfg1_LED1 = 0x80,$/;"	e	enum:Config1Bits	file:
Cfg1_MMIO	rtl8139.c	/^    Cfg1_MMIO = 0x08,$/;"	e	enum:Config1Bits	file:
Cfg1_PIO	rtl8139.c	/^    Cfg1_PIO = 0x04,$/;"	e	enum:Config1Bits	file:
Cfg1_PM_Enable	rtl8139.c	/^    Cfg1_PM_Enable = 0x01,$/;"	e	enum:Config1Bits	file:
Cfg1_VPD_Enable	rtl8139.c	/^    Cfg1_VPD_Enable = 0x02,$/;"	e	enum:Config1Bits	file:
Cfg3_CLKRUN_En	rtl8139.c	/^    Cfg3_CLKRUN_En = (1 << 2), \/* 1 = enable CLKRUN *\/$/;"	e	enum:Config3Bits	file:
Cfg3_CardB_En	rtl8139.c	/^    Cfg3_CardB_En  = (1 << 3), \/* 1 = enable CardBus registers *\/$/;"	e	enum:Config3Bits	file:
Cfg3_FBtBEn	rtl8139.c	/^    Cfg3_FBtBEn    = (1 << 0), \/* 1 = Fast Back to Back *\/$/;"	e	enum:Config3Bits	file:
Cfg3_FuncRegEn	rtl8139.c	/^    Cfg3_FuncRegEn = (1 << 1), \/* 1 = enable CardBus Function registers *\/$/;"	e	enum:Config3Bits	file:
Cfg3_GNTSel	rtl8139.c	/^    Cfg3_GNTSel    = (1 << 7), \/* 1 = delay 1 clock from PCI GNT signal *\/$/;"	e	enum:Config3Bits	file:
Cfg3_LinkUp	rtl8139.c	/^    Cfg3_LinkUp    = (1 << 4), \/* 1 = wake up on link up *\/$/;"	e	enum:Config3Bits	file:
Cfg3_Magic	rtl8139.c	/^    Cfg3_Magic     = (1 << 5), \/* 1 = wake up on Magic Packet (tm) *\/$/;"	e	enum:Config3Bits	file:
Cfg3_PARM_En	rtl8139.c	/^    Cfg3_PARM_En   = (1 << 6), \/* 0 = software can set twister parameters *\/$/;"	e	enum:Config3Bits	file:
Cfg5_BWF	rtl8139.c	/^    Cfg5_BWF         = (1 << 6), \/* 1 = accept broadcast wakeup frame *\/$/;"	e	enum:Config5Bits	file:
Cfg5_FIFOAddrPtr	rtl8139.c	/^    Cfg5_FIFOAddrPtr = (1 << 3), \/* Realtek internal SRAM testing *\/$/;"	e	enum:Config5Bits	file:
Cfg5_LANWake	rtl8139.c	/^    Cfg5_LANWake     = (1 << 1), \/* 1 = enable LANWake signal *\/$/;"	e	enum:Config5Bits	file:
Cfg5_LDPS	rtl8139.c	/^    Cfg5_LDPS        = (1 << 2), \/* 0 = save power when link is down *\/$/;"	e	enum:Config5Bits	file:
Cfg5_MWF	rtl8139.c	/^    Cfg5_MWF         = (1 << 5), \/* 1 = accept multicast wakeup frame *\/$/;"	e	enum:Config5Bits	file:
Cfg5_PME_STS	rtl8139.c	/^    Cfg5_PME_STS     = (1 << 0), \/* 1 = PCI reset resets PME_Status *\/$/;"	e	enum:Config5Bits	file:
Cfg5_UWF	rtl8139.c	/^    Cfg5_UWF         = (1 << 4), \/* 1 = accept unicast wakeup frame *\/$/;"	e	enum:Config5Bits	file:
Cfg9346	rtl8139.c	/^    Cfg9346 = 0x50,$/;"	e	enum:RTL8139_registers	file:
Cfg9346	rtl8139.c	/^    uint8_t  Cfg9346;$/;"	m	struct:RTL8139State	file:
Cfg9346Bits	rtl8139.c	/^enum Cfg9346Bits {$/;"	g	file:
Cfg9346_Autoload	rtl8139.c	/^    Cfg9346_Autoload = 0x40,$/;"	e	enum:Cfg9346Bits	file:
Cfg9346_ConfigWrite	rtl8139.c	/^    Cfg9346_ConfigWrite = 0xC0,$/;"	e	enum:Cfg9346Bits	file:
Cfg9346_Normal	rtl8139.c	/^    Cfg9346_Normal = 0x00,$/;"	e	enum:Cfg9346Bits	file:
Cfg9346_Programming	rtl8139.c	/^    Cfg9346_Programming = 0x80,$/;"	e	enum:Cfg9346Bits	file:
Chip9346Mode	rtl8139.c	/^enum Chip9346Mode$/;"	g	file:
Chip9346Operation	rtl8139.c	/^enum Chip9346Operation$/;"	g	file:
Chip9346_data_read	rtl8139.c	/^    Chip9346_data_read,      \/* from output register *\/$/;"	e	enum:Chip9346Mode	file:
Chip9346_data_write	rtl8139.c	/^    Chip9346_data_write,     \/* to input register, then to contents at specified address *\/$/;"	e	enum:Chip9346Mode	file:
Chip9346_data_write_all	rtl8139.c	/^    Chip9346_data_write_all, \/* to input register, then filling contents *\/$/;"	e	enum:Chip9346Mode	file:
Chip9346_enter_command_mode	rtl8139.c	/^    Chip9346_enter_command_mode,$/;"	e	enum:Chip9346Mode	file:
Chip9346_none	rtl8139.c	/^    Chip9346_none = 0,$/;"	e	enum:Chip9346Mode	file:
Chip9346_op_ext_mask	rtl8139.c	/^    Chip9346_op_ext_mask = 0xf0,      \/* 11 zzzzzz *\/$/;"	e	enum:Chip9346Operation	file:
Chip9346_op_mask	rtl8139.c	/^    Chip9346_op_mask = 0xc0,          \/* 10 zzzzzz *\/$/;"	e	enum:Chip9346Operation	file:
Chip9346_op_read	rtl8139.c	/^    Chip9346_op_read = 0x80,          \/* 10 AAAAAA *\/$/;"	e	enum:Chip9346Operation	file:
Chip9346_op_write	rtl8139.c	/^    Chip9346_op_write = 0x40,         \/* 01 AAAAAA D(15)..D(0) *\/$/;"	e	enum:Chip9346Operation	file:
Chip9346_op_write_all	rtl8139.c	/^    Chip9346_op_write_all = 0x10,     \/* 00 01zzzz *\/$/;"	e	enum:Chip9346Operation	file:
Chip9346_op_write_disable	rtl8139.c	/^    Chip9346_op_write_disable = 0x00, \/* 00 00zzzz *\/$/;"	e	enum:Chip9346Operation	file:
Chip9346_op_write_enable	rtl8139.c	/^    Chip9346_op_write_enable = 0x30,  \/* 00 11zzzz *\/$/;"	e	enum:Chip9346Operation	file:
Chip9346_read_command	rtl8139.c	/^    Chip9346_read_command,$/;"	e	enum:Chip9346Mode	file:
ChipCmd	rtl8139.c	/^    ChipCmd = 0x37,$/;"	e	enum:RTL8139_registers	file:
ChipCmdBits	rtl8139.c	/^enum ChipCmdBits {$/;"	g	file:
ChipCmdClear	rtl8139.c	/^    ChipCmdClear = 0xE2,$/;"	e	enum:ClearBitMasks	file:
ClearBitMasks	rtl8139.c	/^enum ClearBitMasks {$/;"	g	file:
CmdConfigure	eepro100.c	/^    CmdConfigure = 2,$/;"	e	enum:commands	file:
CmdDiagnose	eepro100.c	/^    CmdDiagnose = 7,$/;"	e	enum:commands	file:
CmdDump	eepro100.c	/^    CmdDump = 6,$/;"	e	enum:commands	file:
CmdIASetup	eepro100.c	/^    CmdIASetup = 1,$/;"	e	enum:commands	file:
CmdIntr	eepro100.c	/^    CmdIntr = 0x2000,           \/* Interrupt after completion. *\/$/;"	e	enum:commands	file:
CmdMulticastList	eepro100.c	/^    CmdMulticastList = 3,$/;"	e	enum:commands	file:
CmdNOp	eepro100.c	/^    CmdNOp = 0,$/;"	e	enum:commands	file:
CmdReset	rtl8139.c	/^    CmdReset = 0x10,$/;"	e	enum:ChipCmdBits	file:
CmdRxEnb	rtl8139.c	/^    CmdRxEnb = 0x08,$/;"	e	enum:ChipCmdBits	file:
CmdSuspend	eepro100.c	/^    CmdSuspend = 0x4000,        \/* Suspend after completion. *\/$/;"	e	enum:commands	file:
CmdTDR	eepro100.c	/^    CmdTDR = 5,                 \/* load microcode *\/$/;"	e	enum:commands	file:
CmdTx	eepro100.c	/^    CmdTx = 4,$/;"	e	enum:commands	file:
CmdTxEnb	rtl8139.c	/^    CmdTxEnb = 0x04,$/;"	e	enum:ChipCmdBits	file:
CmdTxFlex	eepro100.c	/^    CmdTxFlex = 0x0008,         \/* Use "Flexible mode" for CmdTx command. *\/$/;"	e	enum:commands	file:
Config0	rtl8139.c	/^    Config0 = 0x51,$/;"	e	enum:RTL8139_registers	file:
Config0	rtl8139.c	/^    uint8_t  Config0;$/;"	m	struct:RTL8139State	file:
Config1	rtl8139.c	/^    Config1 = 0x52,$/;"	e	enum:RTL8139_registers	file:
Config1	rtl8139.c	/^    uint8_t  Config1;$/;"	m	struct:RTL8139State	file:
Config1Bits	rtl8139.c	/^enum Config1Bits {$/;"	g	file:
Config1Clear	rtl8139.c	/^    Config1Clear = (1<<7)|(1<<6)|(1<<3)|(1<<2)|(1<<1),$/;"	e	enum:ClearBitMasks	file:
Config3	rtl8139.c	/^    Config3 = 0x59,$/;"	e	enum:RTL8139_registers	file:
Config3	rtl8139.c	/^    uint8_t  Config3;$/;"	m	struct:RTL8139State	file:
Config3Bits	rtl8139.c	/^enum Config3Bits {$/;"	g	file:
Config4	rtl8139.c	/^    Config4 = 0x5A,        \/* absent on RTL-8139A *\/$/;"	e	enum:RTL8139_registers	file:
Config4	rtl8139.c	/^    uint8_t  Config4;$/;"	m	struct:RTL8139State	file:
Config4Bits	rtl8139.c	/^enum Config4Bits {$/;"	g	file:
Config5	rtl8139.c	/^    Config5 = 0xD8,        \/* absent on RTL-8139A *\/$/;"	e	enum:RTL8139_registers	file:
Config5	rtl8139.c	/^    uint8_t  Config5;$/;"	m	struct:RTL8139State	file:
Config5Bits	rtl8139.c	/^enum Config5Bits {$/;"	g	file:
CpCmd	rtl8139.c	/^    CpCmd        = 0xE0, \/* C+ Command register (C+ mode only) *\/$/;"	e	enum:RTL8139_registers	file:
CpCmd	rtl8139.c	/^    uint16_t CpCmd;$/;"	m	struct:RTL8139State	file:
CplusCmdBits	rtl8139.c	/^enum CplusCmdBits {$/;"	g	file:
D	etraxfs_eth.c	31;"	d	file:
D	xilinx_ethlite.c	32;"	d	file:
DATA	etraxfs_eth.c	/^        DATA$/;"	e	enum:qemu_mdio::__anon118	file:
DATA	xilinx_axienet.c	/^        DATA$/;"	e	enum:MDIOBus::__anon126	file:
DBGBIT	e1000.c	52;"	d	file:
DBGOUT	e1000.c	55;"	d	file:
DBGOUT	e1000.c	60;"	d	file:
DB_PRINT	cadence_gem.c	34;"	d	file:
DB_PRINT	cadence_gem.c	39;"	d	file:
DEBUGF_BRK	xgmac.c	35;"	d	file:
DEBUGF_BRK	xgmac.c	39;"	d	file:
DEBUG_EEPROM	e1000.c	/^    DEBUG_RX,           DEBUG_TX,       DEBUG_MDIC,     DEBUG_EEPROM,$/;"	e	enum:__anon88	file:
DEBUG_GENERAL	e1000.c	/^    DEBUG_GENERAL,      DEBUG_IO,       DEBUG_MMIO,     DEBUG_INTERRUPT,$/;"	e	enum:__anon88	file:
DEBUG_IMX_FEC	imx_fec.c	35;"	d	file:
DEBUG_IMX_PHY	imx_fec.c	47;"	d	file:
DEBUG_INTERRUPT	e1000.c	/^    DEBUG_GENERAL,      DEBUG_IO,       DEBUG_MMIO,     DEBUG_INTERRUPT,$/;"	e	enum:__anon88	file:
DEBUG_IO	e1000.c	/^    DEBUG_GENERAL,      DEBUG_IO,       DEBUG_MMIO,     DEBUG_INTERRUPT,$/;"	e	enum:__anon88	file:
DEBUG_MDIC	e1000.c	/^    DEBUG_RX,           DEBUG_TX,       DEBUG_MDIC,     DEBUG_EEPROM,$/;"	e	enum:__anon88	file:
DEBUG_MMIO	e1000.c	/^    DEBUG_GENERAL,      DEBUG_IO,       DEBUG_MMIO,     DEBUG_INTERRUPT,$/;"	e	enum:__anon88	file:
DEBUG_NOTYET	e1000.c	/^    DEBUG_RXFILTER,     DEBUG_PHY,      DEBUG_NOTYET,$/;"	e	enum:__anon88	file:
DEBUG_PHY	e1000.c	/^    DEBUG_RXFILTER,     DEBUG_PHY,      DEBUG_NOTYET,$/;"	e	enum:__anon88	file:
DEBUG_RX	e1000.c	/^    DEBUG_RX,           DEBUG_TX,       DEBUG_MDIC,     DEBUG_EEPROM,$/;"	e	enum:__anon88	file:
DEBUG_RXERR	e1000.c	/^    DEBUG_UNKNOWN,      DEBUG_TXSUM,    DEBUG_TXERR,    DEBUG_RXERR,$/;"	e	enum:__anon88	file:
DEBUG_RXFILTER	e1000.c	/^    DEBUG_RXFILTER,     DEBUG_PHY,      DEBUG_NOTYET,$/;"	e	enum:__anon88	file:
DEBUG_TX	e1000.c	/^    DEBUG_RX,           DEBUG_TX,       DEBUG_MDIC,     DEBUG_EEPROM,$/;"	e	enum:__anon88	file:
DEBUG_TXERR	e1000.c	/^    DEBUG_UNKNOWN,      DEBUG_TXSUM,    DEBUG_TXERR,    DEBUG_RXERR,$/;"	e	enum:__anon88	file:
DEBUG_TXSUM	e1000.c	/^    DEBUG_UNKNOWN,      DEBUG_TXSUM,    DEBUG_TXERR,    DEBUG_RXERR,$/;"	e	enum:__anon88	file:
DEBUG_UNKNOWN	e1000.c	/^    DEBUG_UNKNOWN,      DEBUG_TXSUM,    DEBUG_TXERR,    DEBUG_RXERR,$/;"	e	enum:__anon88	file:
DEFAULT_PHY	opencores_eth.c	269;"	d	file:
DENET	xilinx_axienet.c	234;"	d	file:
DESC_0_RX_OWNERSHIP	cadence_gem.c	291;"	d	file:
DESC_0_RX_WRAP	cadence_gem.c	290;"	d	file:
DESC_1_LENGTH	cadence_gem.c	285;"	d	file:
DESC_1_RX_EOF	cadence_gem.c	301;"	d	file:
DESC_1_RX_SOF	cadence_gem.c	300;"	d	file:
DESC_1_TX_LAST	cadence_gem.c	288;"	d	file:
DESC_1_TX_WRAP	cadence_gem.c	287;"	d	file:
DESC_1_USED	cadence_gem.c	284;"	d	file:
DFVLAN	fsl_etsec/registers.h	110;"	d
DMACTRL	fsl_etsec/registers.h	106;"	d
DMACTRL_GRS	fsl_etsec/registers.h	47;"	d
DMACTRL_GTS	fsl_etsec/registers.h	48;"	d
DMACTRL_LE	fsl_etsec/registers.h	46;"	d
DMACTRL_WOP	fsl_etsec/registers.h	49;"	d
DMA_AXI_BUS	xgmac.c	79;"	d	file:
DMA_AXI_STATUS	xgmac.c	80;"	d	file:
DMA_BUS_MODE	xgmac.c	68;"	d	file:
DMA_CONTROL	xgmac.c	74;"	d	file:
DMA_CONTROL_DFF	xgmac.c	116;"	d	file:
DMA_CONTROL_SR	xgmac.c	115;"	d	file:
DMA_CONTROL_ST	xgmac.c	114;"	d	file:
DMA_CUR_RX_BUF_ADDR	xgmac.c	84;"	d	file:
DMA_CUR_RX_DESC_ADDR	xgmac.c	82;"	d	file:
DMA_CUR_TX_BUF_ADDR	xgmac.c	83;"	d	file:
DMA_CUR_TX_DESC_ADDR	xgmac.c	81;"	d	file:
DMA_HW_FEATURE	xgmac.c	85;"	d	file:
DMA_INTR_ENA	xgmac.c	75;"	d	file:
DMA_MISSED_FRAME_CTR	xgmac.c	76;"	d	file:
DMA_RCV_BASE_ADDR	xgmac.c	71;"	d	file:
DMA_RCV_POLL_DEMAND	xgmac.c	70;"	d	file:
DMA_RI_WATCHDOG_TIMER	xgmac.c	78;"	d	file:
DMA_STATUS	xgmac.c	73;"	d	file:
DMA_STATUS_AIS	xgmac.c	98;"	d	file:
DMA_STATUS_EB_MASK	xgmac.c	90;"	d	file:
DMA_STATUS_EB_RX_ABORT	xgmac.c	92;"	d	file:
DMA_STATUS_EB_TX_ABORT	xgmac.c	91;"	d	file:
DMA_STATUS_ERI	xgmac.c	99;"	d	file:
DMA_STATUS_ETI	xgmac.c	101;"	d	file:
DMA_STATUS_FBI	xgmac.c	100;"	d	file:
DMA_STATUS_GLI	xgmac.c	89;"	d	file:
DMA_STATUS_GMI	xgmac.c	88;"	d	file:
DMA_STATUS_NIS	xgmac.c	97;"	d	file:
DMA_STATUS_OVF	xgmac.c	107;"	d	file:
DMA_STATUS_RI	xgmac.c	105;"	d	file:
DMA_STATUS_RPS	xgmac.c	103;"	d	file:
DMA_STATUS_RS_MASK	xgmac.c	95;"	d	file:
DMA_STATUS_RS_SHIFT	xgmac.c	96;"	d	file:
DMA_STATUS_RU	xgmac.c	104;"	d	file:
DMA_STATUS_RWT	xgmac.c	102;"	d	file:
DMA_STATUS_TI	xgmac.c	111;"	d	file:
DMA_STATUS_TJT	xgmac.c	108;"	d	file:
DMA_STATUS_TPS	xgmac.c	110;"	d	file:
DMA_STATUS_TS_MASK	xgmac.c	93;"	d	file:
DMA_STATUS_TS_SHIFT	xgmac.c	94;"	d	file:
DMA_STATUS_TU	xgmac.c	109;"	d	file:
DMA_STATUS_UNF	xgmac.c	106;"	d	file:
DMA_TX_BASE_ADDR	xgmac.c	72;"	d	file:
DMA_XMT_POLL_DEMAND	xgmac.c	69;"	d	file:
DP8393X	dp8393x.c	146;"	d	file:
DPHY	xilinx_axienet.c	34;"	d	file:
DPRINTF	dp8393x.c	33;"	d	file:
DPRINTF	dp8393x.c	45;"	d	file:
DPRINTF	fsl_etsec/etsec.c	47;"	d	file:
DPRINTF	lan9118.c	26;"	d	file:
DPRINTF	lan9118.c	31;"	d	file:
DPRINTF	mcf_fec.c	20;"	d	file:
DPRINTF	mcf_fec.c	23;"	d	file:
DPRINTF	rocker/rocker.h	/^static inline GCC_FMT_ATTR(1, 2) int DPRINTF(const char *fmt, ...)$/;"	f
DPRINTF	rocker/rocker.h	25;"	d
DPRINTF	rtl8139.c	/^static inline GCC_FMT_ATTR(1, 2) int DPRINTF(const char *fmt, ...)$/;"	f
DPRINTF	rtl8139.c	84;"	d	file:
DPRINTF	stellaris_enet.c	17;"	d	file:
DPRINTF	stellaris_enet.c	22;"	d	file:
DRVR_INT	eepro100.c	128;"	d	file:
DUPLEX_FULL	rocker/rocker_fp.c	/^    DUPLEX_FULL$/;"	e	enum:duplex	file:
DUPLEX_HALF	rocker/rocker_fp.c	/^    DUPLEX_HALF = 0,$/;"	e	enum:duplex	file:
DescInfo	rocker/rocker.h	/^typedef struct desc_info DescInfo;$/;"	t	typeref:struct:desc_info
DescRing	rocker/rocker.h	/^typedef struct desc_ring DescRing;$/;"	t	typeref:struct:desc_ring
E1000	e1000.c	139;"	d	file:
E1000BaseClass	e1000.c	/^typedef struct E1000BaseClass {$/;"	s	file:
E1000BaseClass	e1000.c	/^} E1000BaseClass;$/;"	t	typeref:struct:E1000BaseClass	file:
E1000Core	e1000e_core.h	/^struct E1000Core {$/;"	s
E1000E	e1000e.c	52;"	d	file:
E1000ECore	e1000e_core.h	/^typedef struct E1000Core E1000ECore;$/;"	t	typeref:struct:E1000Core
E1000EState	e1000e.c	/^typedef struct E1000EState {$/;"	s	file:
E1000EState	e1000e.c	/^} E1000EState;$/;"	t	typeref:struct:E1000EState	file:
E1000E_EEPROM_SIZE	e1000e_core.h	39;"	d
E1000E_FLASH_IDX	e1000e.c	79;"	d	file:
E1000E_FLASH_SIZE	e1000e.c	84;"	d	file:
E1000E_IO_IDX	e1000e.c	80;"	d	file:
E1000E_IO_SIZE	e1000e.c	85;"	d	file:
E1000E_LOW_BITS_READ	e1000e_core.c	2560;"	d	file:
E1000E_LOW_BITS_READ_FUNC	e1000e_core.c	2553;"	d	file:
E1000E_MAC_SIZE	e1000e_core.h	38;"	d
E1000E_MAX_TX_FRAGS	e1000e_core.c	53;"	d	file:
E1000E_MIN_XITR	e1000e_core.c	51;"	d	file:
E1000E_MMIO_IDX	e1000e.c	78;"	d	file:
E1000E_MMIO_SIZE	e1000e.c	83;"	d	file:
E1000E_MSIX_IDX	e1000e.c	81;"	d	file:
E1000E_MSIX_PBA	e1000e.c	89;"	d	file:
E1000E_MSIX_SIZE	e1000e.c	86;"	d	file:
E1000E_MSIX_TABLE	e1000e.c	88;"	d	file:
E1000E_MSIX_VEC_NUM	e1000e_core.h	40;"	d
E1000E_NREADOPS	e1000e_core.c	/^enum { E1000E_NREADOPS = ARRAY_SIZE(e1000e_macreg_readops) };$/;"	e	enum:__anon150	file:
E1000E_NUM_QUEUES	e1000e_core.h	41;"	d
E1000E_NWRITEOPS	e1000e_core.c	/^enum { E1000E_NWRITEOPS = ARRAY_SIZE(e1000e_macreg_writeops) };$/;"	e	enum:__anon151	file:
E1000E_PHY_PAGES	e1000e_core.h	37;"	d
E1000E_PHY_PAGE_SIZE	e1000e_core.h	36;"	d
E1000E_RSSInfo	e1000e_core.c	/^} E1000E_RSSInfo;$/;"	t	typeref:struct:E1000E_RSSInfo_st	file:
E1000E_RSSInfo_st	e1000e_core.c	/^typedef struct E1000E_RSSInfo_st {$/;"	s	file:
E1000E_RingInfo	e1000e_core.c	/^} E1000E_RingInfo;$/;"	t	typeref:struct:E1000E_RingInfo_st	file:
E1000E_RingInfo_st	e1000e_core.c	/^typedef struct E1000E_RingInfo_st {$/;"	s	file:
E1000E_RxRing	e1000e_core.c	/^} E1000E_RxRing;$/;"	t	typeref:struct:E1000E_RxRing_st	file:
E1000E_RxRing_st	e1000e_core.c	/^typedef struct E1000E_RxRing_st {$/;"	s	file:
E1000E_TxRing	e1000e_core.c	/^} E1000E_TxRing;$/;"	t	typeref:struct:E1000E_TxRing_st	file:
E1000E_TxRing_st	e1000e_core.c	/^typedef struct E1000E_TxRing_st {$/;"	s	file:
E1000Info	e1000.c	/^typedef struct E1000Info {$/;"	s	file:
E1000Info	e1000.c	/^} E1000Info;$/;"	t	typeref:struct:E1000Info	file:
E1000IntrDelayTimer	e1000e_core.h	/^} E1000IntrDelayTimer;$/;"	t	typeref:struct:E1000IntrDelayTimer_st
E1000IntrDelayTimer_st	e1000e_core.h	/^typedef struct E1000IntrDelayTimer_st {$/;"	s
E1000State	e1000.c	/^} E1000State;$/;"	t	typeref:struct:E1000State_st	file:
E1000State_st	e1000.c	/^typedef struct E1000State_st {$/;"	s	file:
E1000_AIT	e1000_regs.h	159;"	d
E1000_ALGNERRC	e1000_regs.h	252;"	d
E1000_BPRC	e1000_regs.h	278;"	d
E1000_BPTC	e1000_regs.h	306;"	d
E1000_CEXTERR	e1000_regs.h	264;"	d
E1000_COLC	e1000_regs.h	260;"	d
E1000_CPUVEC	e1000_regs.h	390;"	d
E1000_CRCERRS	e1000_regs.h	251;"	d
E1000_CTRL	e1000_regs.h	121;"	d
E1000_CTRL_ADVD3WUC	e1000_regs.h	810;"	d
E1000_CTRL_ASDE	e1000_regs.h	778;"	d
E1000_CTRL_BEM	e1000_regs.h	772;"	d
E1000_CTRL_BEM32	e1000_regs.h	785;"	d
E1000_CTRL_DUP	e1000_regs.h	122;"	d
E1000_CTRL_D_UD_EN	e1000_regs.h	788;"	d
E1000_CTRL_D_UD_POLARITY	e1000_regs.h	789;"	d
E1000_CTRL_EXT	e1000_regs.h	126;"	d
E1000_CTRL_EXT_ASDCHK	e1000_regs.h	793;"	d
E1000_CTRL_EXT_EE_RST	e1000_regs.h	794;"	d
E1000_CTRL_EXT_EIAME	e1000_regs.h	796;"	d
E1000_CTRL_EXT_IAME	e1000_regs.h	797;"	d
E1000_CTRL_EXT_INT_TIMERS_CLEAR_ENA	e1000_regs.h	799;"	d
E1000_CTRL_EXT_LINK_EN	e1000_regs.h	795;"	d
E1000_CTRL_EXT_PBA_CLR	e1000_regs.h	798;"	d
E1000_CTRL_EXT_SPD_BYPS	e1000_regs.h	800;"	d
E1000_CTRL_FD	e1000_regs.h	771;"	d
E1000_CTRL_FORCE_PHY_RESET	e1000_regs.h	790;"	d
E1000_CTRL_FRCDPX	e1000_regs.h	787;"	d
E1000_CTRL_FRCSPD	e1000_regs.h	786;"	d
E1000_CTRL_GIO_MASTER_DISABLE	e1000_regs.h	774;"	d
E1000_CTRL_ILOS	e1000_regs.h	780;"	d
E1000_CTRL_LRST	e1000_regs.h	775;"	d
E1000_CTRL_PHY_RST	e1000_regs.h	816;"	d
E1000_CTRL_PRIOR	e1000_regs.h	773;"	d
E1000_CTRL_RFCE	e1000_regs.h	812;"	d
E1000_CTRL_RST	e1000_regs.h	811;"	d
E1000_CTRL_RTE	e1000_regs.h	814;"	d
E1000_CTRL_SLE	e1000_regs.h	777;"	d
E1000_CTRL_SLU	e1000_regs.h	779;"	d
E1000_CTRL_SPD_10	e1000_regs.h	782;"	d
E1000_CTRL_SPD_100	e1000_regs.h	783;"	d
E1000_CTRL_SPD_1000	e1000_regs.h	784;"	d
E1000_CTRL_SPD_SEL	e1000_regs.h	781;"	d
E1000_CTRL_SPD_SHIFT	e1000_regs.h	791;"	d
E1000_CTRL_SW2FW_INT	e1000_regs.h	817;"	d
E1000_CTRL_SWDPIN0	e1000_regs.h	802;"	d
E1000_CTRL_SWDPIN1	e1000_regs.h	803;"	d
E1000_CTRL_SWDPIN2	e1000_regs.h	804;"	d
E1000_CTRL_SWDPIN3	e1000_regs.h	805;"	d
E1000_CTRL_SWDPIO0	e1000_regs.h	806;"	d
E1000_CTRL_SWDPIO1	e1000_regs.h	807;"	d
E1000_CTRL_SWDPIO2	e1000_regs.h	808;"	d
E1000_CTRL_SWDPIO3	e1000_regs.h	809;"	d
E1000_CTRL_TFCE	e1000_regs.h	813;"	d
E1000_CTRL_TME	e1000_regs.h	776;"	d
E1000_CTRL_VME	e1000_regs.h	815;"	d
E1000_DC	e1000_regs.h	261;"	d
E1000_DEBUG	e1000.c	43;"	d	file:
E1000_DEVICE_CLASS	e1000.c	142;"	d	file:
E1000_DEVICE_GET_CLASS	e1000.c	144;"	d	file:
E1000_DEV_ID_80003ES2LAN_COPPER_DPT	e1000_regs.h	89;"	d
E1000_DEV_ID_80003ES2LAN_COPPER_SPT	e1000_regs.h	91;"	d
E1000_DEV_ID_80003ES2LAN_SERDES_DPT	e1000_regs.h	90;"	d
E1000_DEV_ID_80003ES2LAN_SERDES_SPT	e1000_regs.h	92;"	d
E1000_DEV_ID_82540EM	e1000_regs.h	43;"	d
E1000_DEV_ID_82540EM_LOM	e1000_regs.h	44;"	d
E1000_DEV_ID_82540EP	e1000_regs.h	46;"	d
E1000_DEV_ID_82540EP_LOM	e1000_regs.h	45;"	d
E1000_DEV_ID_82540EP_LP	e1000_regs.h	47;"	d
E1000_DEV_ID_82541EI	e1000_regs.h	56;"	d
E1000_DEV_ID_82541EI_MOBILE	e1000_regs.h	57;"	d
E1000_DEV_ID_82541ER	e1000_regs.h	59;"	d
E1000_DEV_ID_82541ER_LOM	e1000_regs.h	58;"	d
E1000_DEV_ID_82541GI	e1000_regs.h	61;"	d
E1000_DEV_ID_82541GI_LF	e1000_regs.h	63;"	d
E1000_DEV_ID_82541GI_MOBILE	e1000_regs.h	62;"	d
E1000_DEV_ID_82542	e1000_regs.h	36;"	d
E1000_DEV_ID_82543GC_COPPER	e1000_regs.h	38;"	d
E1000_DEV_ID_82543GC_FIBER	e1000_regs.h	37;"	d
E1000_DEV_ID_82544EI_COPPER	e1000_regs.h	39;"	d
E1000_DEV_ID_82544EI_FIBER	e1000_regs.h	40;"	d
E1000_DEV_ID_82544GC_COPPER	e1000_regs.h	41;"	d
E1000_DEV_ID_82544GC_LOM	e1000_regs.h	42;"	d
E1000_DEV_ID_82545EM_COPPER	e1000_regs.h	48;"	d
E1000_DEV_ID_82545EM_FIBER	e1000_regs.h	49;"	d
E1000_DEV_ID_82545GM_COPPER	e1000_regs.h	50;"	d
E1000_DEV_ID_82545GM_FIBER	e1000_regs.h	51;"	d
E1000_DEV_ID_82545GM_SERDES	e1000_regs.h	52;"	d
E1000_DEV_ID_82546EB_COPPER	e1000_regs.h	53;"	d
E1000_DEV_ID_82546EB_FIBER	e1000_regs.h	54;"	d
E1000_DEV_ID_82546EB_QUAD_COPPER	e1000_regs.h	55;"	d
E1000_DEV_ID_82546GB_COPPER	e1000_regs.h	64;"	d
E1000_DEV_ID_82546GB_FIBER	e1000_regs.h	65;"	d
E1000_DEV_ID_82546GB_PCIE	e1000_regs.h	67;"	d
E1000_DEV_ID_82546GB_QUAD_COPPER	e1000_regs.h	68;"	d
E1000_DEV_ID_82546GB_QUAD_COPPER_KSP3	e1000_regs.h	88;"	d
E1000_DEV_ID_82546GB_SERDES	e1000_regs.h	66;"	d
E1000_DEV_ID_82547EI	e1000_regs.h	69;"	d
E1000_DEV_ID_82547EI_MOBILE	e1000_regs.h	70;"	d
E1000_DEV_ID_82547GI	e1000_regs.h	60;"	d
E1000_DEV_ID_82571EB_COPPER	e1000_regs.h	71;"	d
E1000_DEV_ID_82571EB_FIBER	e1000_regs.h	72;"	d
E1000_DEV_ID_82571EB_QUAD_COPPER	e1000_regs.h	74;"	d
E1000_DEV_ID_82571EB_QUAD_COPPER_LOWPROFILE	e1000_regs.h	77;"	d
E1000_DEV_ID_82571EB_QUAD_FIBER	e1000_regs.h	76;"	d
E1000_DEV_ID_82571EB_SERDES	e1000_regs.h	73;"	d
E1000_DEV_ID_82571EB_SERDES_DUAL	e1000_regs.h	78;"	d
E1000_DEV_ID_82571EB_SERDES_QUAD	e1000_regs.h	79;"	d
E1000_DEV_ID_82571PT_QUAD_COPPER	e1000_regs.h	75;"	d
E1000_DEV_ID_82572EI	e1000_regs.h	83;"	d
E1000_DEV_ID_82572EI_COPPER	e1000_regs.h	80;"	d
E1000_DEV_ID_82572EI_FIBER	e1000_regs.h	81;"	d
E1000_DEV_ID_82572EI_SERDES	e1000_regs.h	82;"	d
E1000_DEV_ID_82573E	e1000_regs.h	84;"	d
E1000_DEV_ID_82573E_IAMT	e1000_regs.h	85;"	d
E1000_DEV_ID_82573L	e1000_regs.h	86;"	d
E1000_DEV_ID_82574L	e1000_regs.h	87;"	d
E1000_DEV_ID_ICH8_IFE	e1000_regs.h	97;"	d
E1000_DEV_ID_ICH8_IFE_G	e1000_regs.h	99;"	d
E1000_DEV_ID_ICH8_IFE_GT	e1000_regs.h	98;"	d
E1000_DEV_ID_ICH8_IGP_AMT	e1000_regs.h	95;"	d
E1000_DEV_ID_ICH8_IGP_C	e1000_regs.h	96;"	d
E1000_DEV_ID_ICH8_IGP_M	e1000_regs.h	100;"	d
E1000_DEV_ID_ICH8_IGP_M_AMT	e1000_regs.h	94;"	d
E1000_ECOL	e1000_regs.h	257;"	d
E1000_EEARBC	e1000_regs.h	174;"	d
E1000_EECD	e1000_regs.h	124;"	d
E1000_EECD_ADDR_BITS	e1000_regs.h	872;"	d
E1000_EECD_AUPDEN	e1000_regs.h	885;"	d
E1000_EECD_AUTO_RD	e1000_regs.h	878;"	d
E1000_EECD_CS	e1000_regs.h	861;"	d
E1000_EECD_DI	e1000_regs.h	862;"	d
E1000_EECD_DO	e1000_regs.h	863;"	d
E1000_EECD_FLUPD	e1000_regs.h	884;"	d
E1000_EECD_FWE_DIS	e1000_regs.h	865;"	d
E1000_EECD_FWE_EN	e1000_regs.h	866;"	d
E1000_EECD_FWE_MASK	e1000_regs.h	864;"	d
E1000_EECD_FWE_SHIFT	e1000_regs.h	867;"	d
E1000_EECD_GNT	e1000_regs.h	869;"	d
E1000_EECD_INITSRAM	e1000_regs.h	883;"	d
E1000_EECD_NVADDS	e1000_regs.h	881;"	d
E1000_EECD_PRES	e1000_regs.h	870;"	d
E1000_EECD_REQ	e1000_regs.h	868;"	d
E1000_EECD_SEC1VAL	e1000_regs.h	887;"	d
E1000_EECD_SECVAL_SHIFT	e1000_regs.h	890;"	d
E1000_EECD_SELSHAD	e1000_regs.h	882;"	d
E1000_EECD_SHADV	e1000_regs.h	886;"	d
E1000_EECD_SIZE	e1000_regs.h	871;"	d
E1000_EECD_SIZE_EX_MASK	e1000_regs.h	879;"	d
E1000_EECD_SIZE_EX_SHIFT	e1000_regs.h	880;"	d
E1000_EECD_SK	e1000_regs.h	860;"	d
E1000_EECD_TYPE	e1000_regs.h	874;"	d
E1000_EEMNGCTL	e1000_regs.h	168;"	d
E1000_EEMNGDATA	e1000_regs.h	169;"	d
E1000_EEPROM_CFG_DONE	e1000_regs.h	946;"	d
E1000_EEPROM_CFG_DONE_PORT_1	e1000_regs.h	947;"	d
E1000_EEPROM_GRANT_ATTEMPTS	e1000_regs.h	876;"	d
E1000_EEPROM_LED_LOGIC	e1000_regs.h	753;"	d
E1000_EEPROM_POLL_READ	e1000_regs.h	759;"	d
E1000_EEPROM_POLL_WRITE	e1000_regs.h	758;"	d
E1000_EEPROM_RW_ADDR_SHIFT	e1000_regs.h	757;"	d
E1000_EEPROM_RW_REG_DATA	e1000_regs.h	754;"	d
E1000_EEPROM_RW_REG_DONE	e1000_regs.h	755;"	d
E1000_EEPROM_RW_REG_START	e1000_regs.h	756;"	d
E1000_EEPROM_SWDPIN0	e1000_regs.h	752;"	d
E1000_EERD	e1000_regs.h	125;"	d
E1000_EERW_ADDR_MASK	e1000_regs.h	765;"	d
E1000_EERW_ADDR_SHIFT	e1000_regs.h	764;"	d
E1000_EERW_DATA_MASK	e1000_regs.h	767;"	d
E1000_EERW_DATA_SHIFT	e1000_regs.h	766;"	d
E1000_EERW_DONE	e1000_regs.h	763;"	d
E1000_EERW_START	e1000_regs.h	762;"	d
E1000_EEWR	e1000_regs.h	176;"	d
E1000_EIAC	e1000_regs.h	139;"	d
E1000_EIAC_MASK	e1000_regs.h	417;"	d
E1000_EITR	e1000_regs.h	143;"	d
E1000_ERT	e1000_regs.h	182;"	d
E1000_EXTCNF_CTRL	e1000_regs.h	161;"	d
E1000_EXTCNF_SIZE	e1000_regs.h	162;"	d
E1000_FACTPS	e1000_regs.h	363;"	d
E1000_FACTPS_LAN0_ON	e1000_regs.h	1241;"	d
E1000_FCAH	e1000_regs.h	132;"	d
E1000_FCAL	e1000_regs.h	131;"	d
E1000_FCRTH	e1000_regs.h	185;"	d
E1000_FCRTH_A	e1000_regs.h	186;"	d
E1000_FCRTL	e1000_regs.h	183;"	d
E1000_FCRTL_A	e1000_regs.h	184;"	d
E1000_FCRTV	e1000_regs.h	152;"	d
E1000_FCRUC	e1000_regs.h	270;"	d
E1000_FCT	e1000_regs.h	133;"	d
E1000_FCTTV	e1000_regs.h	151;"	d
E1000_FEXTNVM	e1000_regs.h	130;"	d
E1000_FFLT	e1000_regs.h	342;"	d
E1000_FFLT_DBG	e1000_regs.h	368;"	d
E1000_FFMT	e1000_regs.h	344;"	d
E1000_FFVT	e1000_regs.h	346;"	d
E1000_FLA	e1000_regs.h	127;"	d
E1000_FLAG_AUTONEG	e1000.c	124;"	d	file:
E1000_FLAG_AUTONEG_BIT	e1000.c	121;"	d	file:
E1000_FLAG_MAC	e1000.c	126;"	d	file:
E1000_FLAG_MAC_BIT	e1000.c	123;"	d	file:
E1000_FLAG_MIT	e1000.c	125;"	d	file:
E1000_FLAG_MIT_BIT	e1000.c	122;"	d	file:
E1000_FLASHT	e1000_regs.h	175;"	d
E1000_FLASH_UPDATES	e1000_regs.h	173;"	d
E1000_FLMNGCNT	e1000_regs.h	172;"	d
E1000_FLMNGCTL	e1000_regs.h	170;"	d
E1000_FLMNGDATA	e1000_regs.h	171;"	d
E1000_FLOL	e1000_regs.h	181;"	d
E1000_FLOP	e1000_regs.h	180;"	d
E1000_FLSWCNT	e1000_regs.h	179;"	d
E1000_FLSWCTL	e1000_regs.h	177;"	d
E1000_FLSWDATA	e1000_regs.h	178;"	d
E1000_FTFT	e1000_regs.h	345;"	d
E1000_FUNCTAG	e1000_regs.h	354;"	d
E1000_FWSM	e1000_regs.h	366;"	d
E1000_GCR	e1000_regs.h	353;"	d
E1000_GCR2	e1000_regs.h	365;"	d
E1000_GCR_RO_BITS	e1000_regs.h	959;"	d
E1000_GORCH	e1000_regs.h	282;"	d
E1000_GORCL	e1000_regs.h	281;"	d
E1000_GOTCH	e1000_regs.h	284;"	d
E1000_GOTCL	e1000_regs.h	283;"	d
E1000_GPRC	e1000_regs.h	277;"	d
E1000_GPTC	e1000_regs.h	280;"	d
E1000_GSCL_1	e1000_regs.h	355;"	d
E1000_GSCL_2	e1000_regs.h	356;"	d
E1000_GSCL_3	e1000_regs.h	357;"	d
E1000_GSCL_4	e1000_regs.h	358;"	d
E1000_GSCN_0	e1000_regs.h	359;"	d
E1000_GSCN_1	e1000_regs.h	360;"	d
E1000_GSCN_2	e1000_regs.h	361;"	d
E1000_GSCN_3	e1000_regs.h	362;"	d
E1000_HICR	e1000_regs.h	369;"	d
E1000_HICR_FW_RESET	e1000_regs.h	892;"	d
E1000_HOST_IF	e1000_regs.h	343;"	d
E1000_IAC	e1000_regs.h	309;"	d
E1000_IAM	e1000_regs.h	141;"	d
E1000_ICH_NVM_SIG_MASK	e1000_regs.h	896;"	d
E1000_ICH_NVM_SIG_WORD	e1000_regs.h	895;"	d
E1000_ICR	e1000_regs.h	135;"	d
E1000_ICRXATC	e1000_regs.h	311;"	d
E1000_ICRXDMTC	e1000_regs.h	316;"	d
E1000_ICRXOC	e1000_regs.h	317;"	d
E1000_ICRXPTC	e1000_regs.h	310;"	d
E1000_ICR_ACK	e1000_regs.h	590;"	d
E1000_ICR_ALL_PARITY	e1000_regs.h	600;"	d
E1000_ICR_ASSERTED	e1000_regs.h	416;"	d
E1000_ICR_DOCK	e1000_regs.h	592;"	d
E1000_ICR_DSW	e1000_regs.h	601;"	d
E1000_ICR_EPRST	e1000_regs.h	603;"	d
E1000_ICR_GPI_EN0	e1000_regs.h	584;"	d
E1000_ICR_GPI_EN1	e1000_regs.h	585;"	d
E1000_ICR_GPI_EN2	e1000_regs.h	586;"	d
E1000_ICR_GPI_EN3	e1000_regs.h	587;"	d
E1000_ICR_HOST_ARB_PAR	e1000_regs.h	596;"	d
E1000_ICR_INT_ASSERTED	e1000_regs.h	593;"	d
E1000_ICR_LSC	e1000_regs.h	577;"	d
E1000_ICR_MDAC	e1000_regs.h	582;"	d
E1000_ICR_MNG	e1000_regs.h	591;"	d
E1000_ICR_OTHER	e1000_regs.h	608;"	d
E1000_ICR_OTHER_CAUSES	e1000_regs.h	610;"	d
E1000_ICR_PB_PAR	e1000_regs.h	597;"	d
E1000_ICR_PHYINT	e1000_regs.h	602;"	d
E1000_ICR_RXCFG	e1000_regs.h	583;"	d
E1000_ICR_RXDMT0	e1000_regs.h	579;"	d
E1000_ICR_RXD_FIFO_PAR0	e1000_regs.h	594;"	d
E1000_ICR_RXD_FIFO_PAR1	e1000_regs.h	598;"	d
E1000_ICR_RXO	e1000_regs.h	580;"	d
E1000_ICR_RXQ0	e1000_regs.h	604;"	d
E1000_ICR_RXQ1	e1000_regs.h	605;"	d
E1000_ICR_RXSEQ	e1000_regs.h	578;"	d
E1000_ICR_RXT0	e1000_regs.h	581;"	d
E1000_ICR_SRPD	e1000_regs.h	589;"	d
E1000_ICR_TXDW	e1000_regs.h	575;"	d
E1000_ICR_TXD_FIFO_PAR0	e1000_regs.h	595;"	d
E1000_ICR_TXD_FIFO_PAR1	e1000_regs.h	599;"	d
E1000_ICR_TXD_LOW	e1000_regs.h	588;"	d
E1000_ICR_TXQ0	e1000_regs.h	606;"	d
E1000_ICR_TXQ1	e1000_regs.h	607;"	d
E1000_ICR_TXQE	e1000_regs.h	576;"	d
E1000_ICS	e1000_regs.h	137;"	d
E1000_ICS_ACK	e1000_regs.h	633;"	d
E1000_ICS_DOCK	e1000_regs.h	635;"	d
E1000_ICS_DSW	e1000_regs.h	642;"	d
E1000_ICS_EPRST	e1000_regs.h	644;"	d
E1000_ICS_GPI_EN0	e1000_regs.h	627;"	d
E1000_ICS_GPI_EN1	e1000_regs.h	628;"	d
E1000_ICS_GPI_EN2	e1000_regs.h	629;"	d
E1000_ICS_GPI_EN3	e1000_regs.h	630;"	d
E1000_ICS_HOST_ARB_PAR	e1000_regs.h	638;"	d
E1000_ICS_LSC	e1000_regs.h	620;"	d
E1000_ICS_MDAC	e1000_regs.h	625;"	d
E1000_ICS_MNG	e1000_regs.h	634;"	d
E1000_ICS_PB_PAR	e1000_regs.h	639;"	d
E1000_ICS_PHYINT	e1000_regs.h	643;"	d
E1000_ICS_RXCFG	e1000_regs.h	626;"	d
E1000_ICS_RXDMT0	e1000_regs.h	622;"	d
E1000_ICS_RXD_FIFO_PAR0	e1000_regs.h	636;"	d
E1000_ICS_RXD_FIFO_PAR1	e1000_regs.h	640;"	d
E1000_ICS_RXO	e1000_regs.h	623;"	d
E1000_ICS_RXSEQ	e1000_regs.h	621;"	d
E1000_ICS_RXT0	e1000_regs.h	624;"	d
E1000_ICS_SRPD	e1000_regs.h	632;"	d
E1000_ICS_TXDW	e1000_regs.h	618;"	d
E1000_ICS_TXD_FIFO_PAR0	e1000_regs.h	637;"	d
E1000_ICS_TXD_FIFO_PAR1	e1000_regs.h	641;"	d
E1000_ICS_TXD_LOW	e1000_regs.h	631;"	d
E1000_ICS_TXQE	e1000_regs.h	619;"	d
E1000_ICTXATC	e1000_regs.h	313;"	d
E1000_ICTXPTC	e1000_regs.h	312;"	d
E1000_ICTXQEC	e1000_regs.h	314;"	d
E1000_ICTXQMTC	e1000_regs.h	315;"	d
E1000_IMC	e1000_regs.h	140;"	d
E1000_IMC_ACK	e1000_regs.h	696;"	d
E1000_IMC_DOCK	e1000_regs.h	698;"	d
E1000_IMC_DSW	e1000_regs.h	705;"	d
E1000_IMC_EPRST	e1000_regs.h	707;"	d
E1000_IMC_GPI_EN0	e1000_regs.h	690;"	d
E1000_IMC_GPI_EN1	e1000_regs.h	691;"	d
E1000_IMC_GPI_EN2	e1000_regs.h	692;"	d
E1000_IMC_GPI_EN3	e1000_regs.h	693;"	d
E1000_IMC_HOST_ARB_PAR	e1000_regs.h	701;"	d
E1000_IMC_LSC	e1000_regs.h	683;"	d
E1000_IMC_MDAC	e1000_regs.h	688;"	d
E1000_IMC_MNG	e1000_regs.h	697;"	d
E1000_IMC_PB_PAR	e1000_regs.h	702;"	d
E1000_IMC_PHYINT	e1000_regs.h	706;"	d
E1000_IMC_RXCFG	e1000_regs.h	689;"	d
E1000_IMC_RXDMT0	e1000_regs.h	685;"	d
E1000_IMC_RXD_FIFO_PAR0	e1000_regs.h	699;"	d
E1000_IMC_RXD_FIFO_PAR1	e1000_regs.h	703;"	d
E1000_IMC_RXO	e1000_regs.h	686;"	d
E1000_IMC_RXSEQ	e1000_regs.h	684;"	d
E1000_IMC_RXT0	e1000_regs.h	687;"	d
E1000_IMC_SRPD	e1000_regs.h	695;"	d
E1000_IMC_TXDW	e1000_regs.h	681;"	d
E1000_IMC_TXD_FIFO_PAR0	e1000_regs.h	700;"	d
E1000_IMC_TXD_FIFO_PAR1	e1000_regs.h	704;"	d
E1000_IMC_TXD_LOW	e1000_regs.h	694;"	d
E1000_IMC_TXQE	e1000_regs.h	682;"	d
E1000_IMS	e1000_regs.h	138;"	d
E1000_IMS_ACK	e1000_regs.h	662;"	d
E1000_IMS_DOCK	e1000_regs.h	669;"	d
E1000_IMS_DSW	e1000_regs.h	676;"	d
E1000_IMS_EPRST	e1000_regs.h	678;"	d
E1000_IMS_GPI_EN0	e1000_regs.h	656;"	d
E1000_IMS_GPI_EN1	e1000_regs.h	657;"	d
E1000_IMS_GPI_EN2	e1000_regs.h	658;"	d
E1000_IMS_GPI_EN3	e1000_regs.h	659;"	d
E1000_IMS_HOST_ARB_PAR	e1000_regs.h	672;"	d
E1000_IMS_LSC	e1000_regs.h	649;"	d
E1000_IMS_MDAC	e1000_regs.h	654;"	d
E1000_IMS_MNG	e1000_regs.h	663;"	d
E1000_IMS_OTHER	e1000_regs.h	668;"	d
E1000_IMS_PB_PAR	e1000_regs.h	673;"	d
E1000_IMS_PHYINT	e1000_regs.h	677;"	d
E1000_IMS_RXCFG	e1000_regs.h	655;"	d
E1000_IMS_RXDMT0	e1000_regs.h	651;"	d
E1000_IMS_RXD_FIFO_PAR0	e1000_regs.h	670;"	d
E1000_IMS_RXD_FIFO_PAR1	e1000_regs.h	674;"	d
E1000_IMS_RXO	e1000_regs.h	652;"	d
E1000_IMS_RXQ0	e1000_regs.h	664;"	d
E1000_IMS_RXQ1	e1000_regs.h	665;"	d
E1000_IMS_RXSEQ	e1000_regs.h	650;"	d
E1000_IMS_RXT0	e1000_regs.h	653;"	d
E1000_IMS_SRPD	e1000_regs.h	661;"	d
E1000_IMS_TXDW	e1000_regs.h	647;"	d
E1000_IMS_TXD_FIFO_PAR0	e1000_regs.h	671;"	d
E1000_IMS_TXD_FIFO_PAR1	e1000_regs.h	675;"	d
E1000_IMS_TXD_LOW	e1000_regs.h	660;"	d
E1000_IMS_TXQ0	e1000_regs.h	666;"	d
E1000_IMS_TXQ1	e1000_regs.h	667;"	d
E1000_IMS_TXQE	e1000_regs.h	648;"	d
E1000_INTR_DELAY_NS_RES	e1000_regs.h	917;"	d
E1000_INTR_THROTTLING_NS_RES	e1000_regs.h	920;"	d
E1000_IOADDR	e1000_regs.h	1247;"	d
E1000_IODATA	e1000_regs.h	1248;"	d
E1000_IP4AT	e1000_regs.h	334;"	d
E1000_IP6AT	e1000_regs.h	335;"	d
E1000_IPAV	e1000_regs.h	333;"	d
E1000_ITR	e1000_regs.h	136;"	d
E1000_IVAR	e1000_regs.h	142;"	d
E1000_IVAR_ENTRY_MASK	e1000_regs.h	432;"	d
E1000_IVAR_ENTRY_VALID	e1000_regs.h	442;"	d
E1000_IVAR_ENTRY_VALID_MASK	e1000_regs.h	433;"	d
E1000_IVAR_ENTRY_VEC	e1000_regs.h	443;"	d
E1000_IVAR_ENTRY_VEC_MASK	e1000_regs.h	434;"	d
E1000_IVAR_INT_ALLOC_VALID	e1000_regs.h	424;"	d
E1000_IVAR_OTHER	e1000_regs.h	440;"	d
E1000_IVAR_OTHER_SHIFT	e1000_regs.h	430;"	d
E1000_IVAR_RXQ0	e1000_regs.h	436;"	d
E1000_IVAR_RXQ0_SHIFT	e1000_regs.h	426;"	d
E1000_IVAR_RXQ1	e1000_regs.h	437;"	d
E1000_IVAR_RXQ1_SHIFT	e1000_regs.h	427;"	d
E1000_IVAR_TXQ0	e1000_regs.h	438;"	d
E1000_IVAR_TXQ0_SHIFT	e1000_regs.h	428;"	d
E1000_IVAR_TXQ1	e1000_regs.h	439;"	d
E1000_IVAR_TXQ1_SHIFT	e1000_regs.h	429;"	d
E1000_IVAR_TX_INT_EVERY_WB	e1000_regs.h	445;"	d
E1000_KABGTXD	e1000_regs.h	212;"	d
E1000_KUMCTRLSTA	e1000_regs.h	348;"	d
E1000_L0S_ADJUST	e1000_regs.h	951;"	d
E1000_L0S_ADJUST	e1000_regs.h	955;"	d
E1000_L1_ENTRY_LATENCY_LSB	e1000_regs.h	953;"	d
E1000_L1_ENTRY_LATENCY_LSB	e1000_regs.h	957;"	d
E1000_L1_ENTRY_LATENCY_MSB	e1000_regs.h	952;"	d
E1000_L1_ENTRY_LATENCY_MSB	e1000_regs.h	956;"	d
E1000_LATECOL	e1000_regs.h	259;"	d
E1000_LEDCTL	e1000_regs.h	160;"	d
E1000_MANC	e1000_regs.h	332;"	d
E1000_MANC2H	e1000_regs.h	350;"	d
E1000_MANC_0298_EN	e1000_regs.h	1207;"	d
E1000_MANC_ARP_EN	e1000_regs.h	1211;"	d
E1000_MANC_ARP_RES_EN	e1000_regs.h	1214;"	d
E1000_MANC_ASF_EN	e1000_regs.h	1204;"	d
E1000_MANC_BLK_PHY_RST_ON_IDE	e1000_regs.h	1221;"	d
E1000_MANC_BR_EN	e1000_regs.h	1229;"	d
E1000_MANC_DIS_IP_CHK_ARP	e1000_regs.h	1215;"	d
E1000_MANC_EN_IP_ADDR_FILTER	e1000_regs.h	1226;"	d
E1000_MANC_EN_MAC_ADDR_FILTER	e1000_regs.h	1222;"	d
E1000_MANC_EN_MNG2HOST	e1000_regs.h	1224;"	d
E1000_MANC_EN_XSUM_FILTER	e1000_regs.h	1228;"	d
E1000_MANC_IPV4_EN	e1000_regs.h	1208;"	d
E1000_MANC_IPV6_EN	e1000_regs.h	1209;"	d
E1000_MANC_NEIGHBOR_EN	e1000_regs.h	1212;"	d
E1000_MANC_RCV_ALL	e1000_regs.h	1220;"	d
E1000_MANC_RCV_TCO_EN	e1000_regs.h	1218;"	d
E1000_MANC_REPORT_STATUS	e1000_regs.h	1219;"	d
E1000_MANC_RMCP_EN	e1000_regs.h	1206;"	d
E1000_MANC_R_ON_FORCE	e1000_regs.h	1205;"	d
E1000_MANC_SMBUS_EN	e1000_regs.h	1203;"	d
E1000_MANC_SMB_CLK_IN	e1000_regs.h	1232;"	d
E1000_MANC_SMB_CLK_OUT	e1000_regs.h	1235;"	d
E1000_MANC_SMB_CLK_OUT_SHIFT	e1000_regs.h	1238;"	d
E1000_MANC_SMB_DATA_IN	e1000_regs.h	1233;"	d
E1000_MANC_SMB_DATA_OUT	e1000_regs.h	1234;"	d
E1000_MANC_SMB_DATA_OUT_SHIFT	e1000_regs.h	1237;"	d
E1000_MANC_SMB_GNT	e1000_regs.h	1231;"	d
E1000_MANC_SMB_REQ	e1000_regs.h	1230;"	d
E1000_MANC_SNAP_EN	e1000_regs.h	1210;"	d
E1000_MANC_TCO_RESET	e1000_regs.h	1217;"	d
E1000_MAVTV0	e1000_regs.h	320;"	d
E1000_MAVTV1	e1000_regs.h	321;"	d
E1000_MAVTV2	e1000_regs.h	322;"	d
E1000_MAVTV3	e1000_regs.h	323;"	d
E1000_MAX_RX_DESC_LEN	e1000_regs.h	1102;"	d
E1000_MCC	e1000_regs.h	258;"	d
E1000_MDEF	e1000_regs.h	341;"	d
E1000_MDIC	e1000_regs.h	128;"	d
E1000_MDIC_DATA_MASK	e1000_regs.h	899;"	d
E1000_MDIC_ERROR	e1000_regs.h	908;"	d
E1000_MDIC_INT_EN	e1000_regs.h	907;"	d
E1000_MDIC_OP_READ	e1000_regs.h	905;"	d
E1000_MDIC_OP_WRITE	e1000_regs.h	904;"	d
E1000_MDIC_PHY_MASK	e1000_regs.h	902;"	d
E1000_MDIC_PHY_SHIFT	e1000_regs.h	903;"	d
E1000_MDIC_READY	e1000_regs.h	906;"	d
E1000_MDIC_REG_MASK	e1000_regs.h	900;"	d
E1000_MDIC_REG_SHIFT	e1000_regs.h	901;"	d
E1000_MDPHYA	e1000_regs.h	349;"	d
E1000_MFUTP01	e1000_regs.h	338;"	d
E1000_MFUTP23	e1000_regs.h	339;"	d
E1000_MFVAL	e1000_regs.h	340;"	d
E1000_MGTPDC	e1000_regs.h	291;"	d
E1000_MGTPRC	e1000_regs.h	290;"	d
E1000_MGTPTC	e1000_regs.h	292;"	d
E1000_MIN_RX_DESC_LEN	e1000_regs.h	1101;"	d
E1000_MPC	e1000_regs.h	255;"	d
E1000_MPRC	e1000_regs.h	279;"	d
E1000_MPTC	e1000_regs.h	305;"	d
E1000_MRQC	e1000_regs.h	391;"	d
E1000_MRQC_ENABLED	e1000_regs.h	397;"	d
E1000_MRQC_EN_IPV4	e1000_regs.h	404;"	d
E1000_MRQC_EN_IPV6	e1000_regs.h	407;"	d
E1000_MRQC_EN_IPV6EX	e1000_regs.h	406;"	d
E1000_MRQC_EN_TCPIPV4	e1000_regs.h	403;"	d
E1000_MRQC_EN_TCPIPV6	e1000_regs.h	405;"	d
E1000_MRQ_RSS_TYPE_IPV4	e1000_regs.h	411;"	d
E1000_MRQ_RSS_TYPE_IPV4TCP	e1000_regs.h	410;"	d
E1000_MRQ_RSS_TYPE_IPV6	e1000_regs.h	414;"	d
E1000_MRQ_RSS_TYPE_IPV6EX	e1000_regs.h	413;"	d
E1000_MRQ_RSS_TYPE_IPV6TCP	e1000_regs.h	412;"	d
E1000_MRQ_RSS_TYPE_NONE	e1000_regs.h	409;"	d
E1000_MTA	e1000_regs.h	324;"	d
E1000_PBA	e1000_regs.h	165;"	d
E1000_PBACLR	e1000_regs.h	367;"	d
E1000_PBACLR_VALID_MASK	e1000_regs.h	962;"	d
E1000_PBM	e1000_regs.h	166;"	d
E1000_PBS	e1000_regs.h	167;"	d
E1000_PHY_CTRL	e1000_regs.h	163;"	d
E1000_PHY_ID2_82541x	e1000_regs.h	103;"	d
E1000_PHY_ID2_82544x	e1000_regs.h	104;"	d
E1000_PHY_ID2_8254xx_DEFAULT	e1000_regs.h	105;"	d
E1000_PHY_ID2_82573x	e1000_regs.h	106;"	d
E1000_PHY_ID2_82574x	e1000_regs.h	107;"	d
E1000_POEMB	e1000_regs.h	213;"	d
E1000_PRC1023	e1000_regs.h	275;"	d
E1000_PRC127	e1000_regs.h	272;"	d
E1000_PRC1522	e1000_regs.h	276;"	d
E1000_PRC255	e1000_regs.h	273;"	d
E1000_PRC511	e1000_regs.h	274;"	d
E1000_PRC64	e1000_regs.h	271;"	d
E1000_PSRCTL	e1000_regs.h	187;"	d
E1000_PSRCTL_BSIZE0_MASK	e1000_regs.h	461;"	d
E1000_PSRCTL_BSIZE0_SHIFT	e1000_regs.h	466;"	d
E1000_PSRCTL_BSIZE1_MASK	e1000_regs.h	462;"	d
E1000_PSRCTL_BSIZE1_SHIFT	e1000_regs.h	467;"	d
E1000_PSRCTL_BSIZE2_MASK	e1000_regs.h	463;"	d
E1000_PSRCTL_BSIZE2_SHIFT	e1000_regs.h	468;"	d
E1000_PSRCTL_BSIZE3_MASK	e1000_regs.h	464;"	d
E1000_PSRCTL_BSIZE3_SHIFT	e1000_regs.h	469;"	d
E1000_PSRCTL_BUFFS_PER_DESC	e1000_regs.h	471;"	d
E1000_PTC1023	e1000_regs.h	303;"	d
E1000_PTC127	e1000_regs.h	300;"	d
E1000_PTC1522	e1000_regs.h	304;"	d
E1000_PTC255	e1000_regs.h	301;"	d
E1000_PTC511	e1000_regs.h	302;"	d
E1000_PTC64	e1000_regs.h	299;"	d
E1000_RA	e1000_regs.h	325;"	d
E1000_RADV	e1000_regs.h	208;"	d
E1000_RAH_AV	e1000_regs.h	1150;"	d
E1000_RAID	e1000_regs.h	210;"	d
E1000_RA_A	e1000_regs.h	326;"	d
E1000_RCTL	e1000_regs.h	144;"	d
E1000_RCTL_BAM	e1000_regs.h	731;"	d
E1000_RCTL_BSEX	e1000_regs.h	746;"	d
E1000_RCTL_CFI	e1000_regs.h	743;"	d
E1000_RCTL_CFIEN	e1000_regs.h	742;"	d
E1000_RCTL_DPF	e1000_regs.h	744;"	d
E1000_RCTL_DTYP_MASK	e1000_regs.h	720;"	d
E1000_RCTL_DTYP_PS	e1000_regs.h	721;"	d
E1000_RCTL_EN	e1000_regs.h	711;"	d
E1000_RCTL_FLXBUF_MASK	e1000_regs.h	748;"	d
E1000_RCTL_FLXBUF_SHIFT	e1000_regs.h	749;"	d
E1000_RCTL_LBM_MAC	e1000_regs.h	717;"	d
E1000_RCTL_LBM_NO	e1000_regs.h	716;"	d
E1000_RCTL_LBM_SLP	e1000_regs.h	718;"	d
E1000_RCTL_LBM_TCVR	e1000_regs.h	719;"	d
E1000_RCTL_LPE	e1000_regs.h	715;"	d
E1000_RCTL_MDR	e1000_regs.h	730;"	d
E1000_RCTL_MO_0	e1000_regs.h	726;"	d
E1000_RCTL_MO_1	e1000_regs.h	727;"	d
E1000_RCTL_MO_2	e1000_regs.h	728;"	d
E1000_RCTL_MO_3	e1000_regs.h	729;"	d
E1000_RCTL_MO_SHIFT	e1000_regs.h	725;"	d
E1000_RCTL_MPE	e1000_regs.h	714;"	d
E1000_RCTL_PMCF	e1000_regs.h	745;"	d
E1000_RCTL_RDMTS_EIGTH	e1000_regs.h	724;"	d
E1000_RCTL_RDMTS_HALF	e1000_regs.h	722;"	d
E1000_RCTL_RDMTS_QUAT	e1000_regs.h	723;"	d
E1000_RCTL_RST	e1000_regs.h	710;"	d
E1000_RCTL_SBP	e1000_regs.h	712;"	d
E1000_RCTL_SECRC	e1000_regs.h	747;"	d
E1000_RCTL_SZ_1024	e1000_regs.h	734;"	d
E1000_RCTL_SZ_16384	e1000_regs.h	738;"	d
E1000_RCTL_SZ_2048	e1000_regs.h	733;"	d
E1000_RCTL_SZ_256	e1000_regs.h	736;"	d
E1000_RCTL_SZ_4096	e1000_regs.h	740;"	d
E1000_RCTL_SZ_512	e1000_regs.h	735;"	d
E1000_RCTL_SZ_8192	e1000_regs.h	739;"	d
E1000_RCTL_UPE	e1000_regs.h	713;"	d
E1000_RCTL_VFE	e1000_regs.h	741;"	d
E1000_RDBAH	e1000_regs.h	189;"	d
E1000_RDBAH0	e1000_regs.h	197;"	d
E1000_RDBAH0_A	e1000_regs.h	198;"	d
E1000_RDBAH1	e1000_regs.h	147;"	d
E1000_RDBAL	e1000_regs.h	188;"	d
E1000_RDBAL0	e1000_regs.h	195;"	d
E1000_RDBAL0_A	e1000_regs.h	196;"	d
E1000_RDBAL1	e1000_regs.h	146;"	d
E1000_RDFH	e1000_regs.h	214;"	d
E1000_RDFHS	e1000_regs.h	218;"	d
E1000_RDFH_A	e1000_regs.h	215;"	d
E1000_RDFPC	e1000_regs.h	220;"	d
E1000_RDFT	e1000_regs.h	216;"	d
E1000_RDFTS	e1000_regs.h	219;"	d
E1000_RDFT_A	e1000_regs.h	217;"	d
E1000_RDH	e1000_regs.h	191;"	d
E1000_RDH0	e1000_regs.h	201;"	d
E1000_RDH0_A	e1000_regs.h	202;"	d
E1000_RDH1	e1000_regs.h	149;"	d
E1000_RDLEN	e1000_regs.h	190;"	d
E1000_RDLEN0	e1000_regs.h	199;"	d
E1000_RDLEN0_A	e1000_regs.h	200;"	d
E1000_RDLEN1	e1000_regs.h	148;"	d
E1000_RDT	e1000_regs.h	192;"	d
E1000_RDT0	e1000_regs.h	203;"	d
E1000_RDT0_A	e1000_regs.h	204;"	d
E1000_RDT1	e1000_regs.h	150;"	d
E1000_RDTR	e1000_regs.h	193;"	d
E1000_RDTR0	e1000_regs.h	205;"	d
E1000_RDTR1	e1000_regs.h	145;"	d
E1000_RDTR_A	e1000_regs.h	194;"	d
E1000_RDTR_FPD	e1000_regs.h	911;"	d
E1000_RETA	e1000_regs.h	392;"	d
E1000_RETA_IDX	e1000_regs.h	399;"	d
E1000_RETA_VAL	e1000_regs.h	400;"	d
E1000_RFC	e1000_regs.h	287;"	d
E1000_RFCTL	e1000_regs.h	319;"	d
E1000_RFCTL_ACK_DATA_DIS	e1000_regs.h	454;"	d
E1000_RFCTL_ACK_DIS	e1000_regs.h	453;"	d
E1000_RFCTL_EXTEN	e1000_regs.h	456;"	d
E1000_RFCTL_IPFRSP_DIS	e1000_regs.h	455;"	d
E1000_RFCTL_IPV6_DIS	e1000_regs.h	451;"	d
E1000_RFCTL_IPV6_EX_DIS	e1000_regs.h	457;"	d
E1000_RFCTL_IPV6_XSUM_DIS	e1000_regs.h	452;"	d
E1000_RFCTL_ISCSI_DIS	e1000_regs.h	448;"	d
E1000_RFCTL_NEW_IPV6_EXT_DIS	e1000_regs.h	458;"	d
E1000_RFCTL_NFSR_DIS	e1000_regs.h	450;"	d
E1000_RFCTL_NFSW_DIS	e1000_regs.h	449;"	d
E1000_RING_DESC_LEN	e1000_regs.h	1098;"	d
E1000_RING_DESC_LEN_SHIFT	e1000_regs.h	1099;"	d
E1000_RJC	e1000_regs.h	289;"	d
E1000_RLEC	e1000_regs.h	265;"	d
E1000_RNBC	e1000_regs.h	285;"	d
E1000_ROC	e1000_regs.h	288;"	d
E1000_RSRPD	e1000_regs.h	209;"	d
E1000_RSSIM	e1000_regs.h	394;"	d
E1000_RSSIR	e1000_regs.h	395;"	d
E1000_RSSRK	e1000_regs.h	393;"	d
E1000_RSS_QUEUE	e1000_regs.h	401;"	d
E1000_RUC	e1000_regs.h	286;"	d
E1000_RXCFGL	e1000_regs.h	387;"	d
E1000_RXCSUM	e1000_regs.h	318;"	d
E1000_RXCSUM_IPOFLD	e1000_regs.h	1094;"	d
E1000_RXCSUM_PCSD	e1000_regs.h	1096;"	d
E1000_RXCSUM_TUOFLD	e1000_regs.h	1095;"	d
E1000_RXCW	e1000_regs.h	154;"	d
E1000_RXDCTL	e1000_regs.h	206;"	d
E1000_RXDCTL1	e1000_regs.h	207;"	d
E1000_RXDEXT_STATERR_CE	e1000_regs.h	1138;"	d
E1000_RXDEXT_STATERR_CXE	e1000_regs.h	1141;"	d
E1000_RXDEXT_STATERR_IPE	e1000_regs.h	1143;"	d
E1000_RXDEXT_STATERR_RXE	e1000_regs.h	1144;"	d
E1000_RXDEXT_STATERR_SE	e1000_regs.h	1139;"	d
E1000_RXDEXT_STATERR_SEQ	e1000_regs.h	1140;"	d
E1000_RXDEXT_STATERR_TCPE	e1000_regs.h	1142;"	d
E1000_RXDPS_HDRSTAT_HDRLEN_MASK	e1000_regs.h	1147;"	d
E1000_RXDPS_HDRSTAT_HDRSP	e1000_regs.h	1146;"	d
E1000_RXD_ERR_CE	e1000_regs.h	1116;"	d
E1000_RXD_ERR_CXE	e1000_regs.h	1119;"	d
E1000_RXD_ERR_IPE	e1000_regs.h	1121;"	d
E1000_RXD_ERR_RXE	e1000_regs.h	1122;"	d
E1000_RXD_ERR_SE	e1000_regs.h	1117;"	d
E1000_RXD_ERR_SEQ	e1000_regs.h	1118;"	d
E1000_RXD_ERR_TCPE	e1000_regs.h	1120;"	d
E1000_RXD_PKT_IP4	e1000_regs.h	1131;"	d
E1000_RXD_PKT_IP4_XDP	e1000_regs.h	1132;"	d
E1000_RXD_PKT_IP6	e1000_regs.h	1133;"	d
E1000_RXD_PKT_IP6_XDP	e1000_regs.h	1134;"	d
E1000_RXD_PKT_MAC	e1000_regs.h	1130;"	d
E1000_RXD_PKT_TYPE	e1000_regs.h	1136;"	d
E1000_RXD_SPC_CFI_MASK	e1000_regs.h	1126;"	d
E1000_RXD_SPC_CFI_SHIFT	e1000_regs.h	1127;"	d
E1000_RXD_SPC_PRI_MASK	e1000_regs.h	1124;"	d
E1000_RXD_SPC_PRI_SHIFT	e1000_regs.h	1125;"	d
E1000_RXD_SPC_VLAN_MASK	e1000_regs.h	1123;"	d
E1000_RXD_STAT_ACK	e1000_regs.h	1115;"	d
E1000_RXD_STAT_DD	e1000_regs.h	1105;"	d
E1000_RXD_STAT_EOP	e1000_regs.h	1106;"	d
E1000_RXD_STAT_IPCS	e1000_regs.h	1111;"	d
E1000_RXD_STAT_IPIDV	e1000_regs.h	1113;"	d
E1000_RXD_STAT_IXSM	e1000_regs.h	1107;"	d
E1000_RXD_STAT_PIF	e1000_regs.h	1112;"	d
E1000_RXD_STAT_TCPCS	e1000_regs.h	1110;"	d
E1000_RXD_STAT_UDPCS	e1000_regs.h	1109;"	d
E1000_RXD_STAT_UDPV	e1000_regs.h	1114;"	d
E1000_RXD_STAT_VP	e1000_regs.h	1108;"	d
E1000_RXERRC	e1000_regs.h	254;"	d
E1000_RXMTRL	e1000_regs.h	381;"	d
E1000_RXSATRH	e1000_regs.h	384;"	d
E1000_RXSATRL	e1000_regs.h	383;"	d
E1000_RXSTMPH	e1000_regs.h	375;"	d
E1000_RXSTMPL	e1000_regs.h	374;"	d
E1000_RXUDP	e1000_regs.h	382;"	d
E1000_SCC	e1000_regs.h	256;"	d
E1000_SCTL	e1000_regs.h	129;"	d
E1000_SEC	e1000_regs.h	263;"	d
E1000_SHADOW_RAM_WORDS	e1000_regs.h	894;"	d
E1000_STATUS	e1000_regs.h	123;"	d
E1000_STATUS_ASDV	e1000_regs.h	834;"	d
E1000_STATUS_ASDV_10	e1000_regs.h	835;"	d
E1000_STATUS_ASDV_100	e1000_regs.h	836;"	d
E1000_STATUS_ASDV_1000	e1000_regs.h	837;"	d
E1000_STATUS_ASDV_SHIFT	e1000_regs.h	857;"	d
E1000_STATUS_BMC_CRYPTO	e1000_regs.h	849;"	d
E1000_STATUS_BMC_LITE	e1000_regs.h	850;"	d
E1000_STATUS_BMC_SKU_0	e1000_regs.h	846;"	d
E1000_STATUS_BMC_SKU_1	e1000_regs.h	847;"	d
E1000_STATUS_BMC_SKU_2	e1000_regs.h	848;"	d
E1000_STATUS_BUS64	e1000_regs.h	843;"	d
E1000_STATUS_DOCK_CI	e1000_regs.h	838;"	d
E1000_STATUS_FD	e1000_regs.h	820;"	d
E1000_STATUS_FUNC_0	e1000_regs.h	824;"	d
E1000_STATUS_FUNC_1	e1000_regs.h	825;"	d
E1000_STATUS_FUNC_MASK	e1000_regs.h	822;"	d
E1000_STATUS_FUNC_SHIFT	e1000_regs.h	823;"	d
E1000_STATUS_FUSE_8	e1000_regs.h	852;"	d
E1000_STATUS_FUSE_9	e1000_regs.h	853;"	d
E1000_STATUS_GIO_MASTER_ENABLE	e1000_regs.h	839;"	d
E1000_STATUS_LAN_INIT_DONE	e1000_regs.h	832;"	d
E1000_STATUS_LU	e1000_regs.h	821;"	d
E1000_STATUS_MTXCKOK	e1000_regs.h	840;"	d
E1000_STATUS_PCI66	e1000_regs.h	842;"	d
E1000_STATUS_PCIX_MODE	e1000_regs.h	844;"	d
E1000_STATUS_PCIX_SPEED	e1000_regs.h	845;"	d
E1000_STATUS_PHYRA	e1000_regs.h	841;"	d
E1000_STATUS_RGMII_ENABLE	e1000_regs.h	851;"	d
E1000_STATUS_SERDES0_DIS	e1000_regs.h	854;"	d
E1000_STATUS_SERDES1_DIS	e1000_regs.h	855;"	d
E1000_STATUS_SPEED_10	e1000_regs.h	829;"	d
E1000_STATUS_SPEED_100	e1000_regs.h	830;"	d
E1000_STATUS_SPEED_1000	e1000_regs.h	831;"	d
E1000_STATUS_SPEED_MASK	e1000_regs.h	828;"	d
E1000_STATUS_SPEED_SHIFT	e1000_regs.h	856;"	d
E1000_STATUS_TBIMODE	e1000_regs.h	827;"	d
E1000_STATUS_TXOFF	e1000_regs.h	826;"	d
E1000_STM_OPCODE	e1000_regs.h	891;"	d
E1000_SWSM	e1000_regs.h	364;"	d
E1000_SW_FW_SYNC	e1000_regs.h	351;"	d
E1000_SYMERRS	e1000_regs.h	253;"	d
E1000_SYSTIMH	e1000_regs.h	379;"	d
E1000_SYSTIML	e1000_regs.h	378;"	d
E1000_TADV	e1000_regs.h	241;"	d
E1000_TARC0	e1000_regs.h	243;"	d
E1000_TARC1	e1000_regs.h	250;"	d
E1000_TARC_ENABLE	e1000_regs.h	474;"	d
E1000_TBT	e1000_regs.h	158;"	d
E1000_TCTL	e1000_regs.h	155;"	d
E1000_TCTL_BCE	e1000_regs.h	1012;"	d
E1000_TCTL_COLD	e1000_regs.h	1015;"	d
E1000_TCTL_CT	e1000_regs.h	1014;"	d
E1000_TCTL_EN	e1000_regs.h	1011;"	d
E1000_TCTL_EXT	e1000_regs.h	156;"	d
E1000_TCTL_MULR	e1000_regs.h	1020;"	d
E1000_TCTL_NRTU	e1000_regs.h	1019;"	d
E1000_TCTL_PBE	e1000_regs.h	1017;"	d
E1000_TCTL_PSP	e1000_regs.h	1013;"	d
E1000_TCTL_RST	e1000_regs.h	1010;"	d
E1000_TCTL_RTLC	e1000_regs.h	1018;"	d
E1000_TCTL_SWXOFF	e1000_regs.h	1016;"	d
E1000_TDBAH	e1000_regs.h	230;"	d
E1000_TDBAH1	e1000_regs.h	245;"	d
E1000_TDBAH_A	e1000_regs.h	231;"	d
E1000_TDBAL	e1000_regs.h	228;"	d
E1000_TDBAL1	e1000_regs.h	244;"	d
E1000_TDBAL_A	e1000_regs.h	229;"	d
E1000_TDFH	e1000_regs.h	221;"	d
E1000_TDFHS	e1000_regs.h	225;"	d
E1000_TDFH_A	e1000_regs.h	222;"	d
E1000_TDFPC	e1000_regs.h	227;"	d
E1000_TDFT	e1000_regs.h	223;"	d
E1000_TDFTS	e1000_regs.h	226;"	d
E1000_TDFT_A	e1000_regs.h	224;"	d
E1000_TDH	e1000_regs.h	234;"	d
E1000_TDH1	e1000_regs.h	247;"	d
E1000_TDH_A	e1000_regs.h	235;"	d
E1000_TDLEN	e1000_regs.h	232;"	d
E1000_TDLEN1	e1000_regs.h	246;"	d
E1000_TDLEN_A	e1000_regs.h	233;"	d
E1000_TDT	e1000_regs.h	236;"	d
E1000_TDT1	e1000_regs.h	248;"	d
E1000_TDT_A	e1000_regs.h	237;"	d
E1000_TIDV	e1000_regs.h	238;"	d
E1000_TIDV_A	e1000_regs.h	239;"	d
E1000_TIDV_FPD	e1000_regs.h	914;"	d
E1000_TIMADJH	e1000_regs.h	386;"	d
E1000_TIMADJL	e1000_regs.h	385;"	d
E1000_TIMINCA	e1000_regs.h	373;"	d
E1000_TIMINCA	e1000_regs.h	380;"	d
E1000_TIPG	e1000_regs.h	157;"	d
E1000_TNCRS	e1000_regs.h	262;"	d
E1000_TORH	e1000_regs.h	294;"	d
E1000_TORL	e1000_regs.h	293;"	d
E1000_TOTH	e1000_regs.h	296;"	d
E1000_TOTL	e1000_regs.h	295;"	d
E1000_TPR	e1000_regs.h	297;"	d
E1000_TPT	e1000_regs.h	298;"	d
E1000_TSCTC	e1000_regs.h	307;"	d
E1000_TSCTFC	e1000_regs.h	308;"	d
E1000_TSPMT	e1000_regs.h	242;"	d
E1000_TSYNCRXCTL	e1000_regs.h	371;"	d
E1000_TSYNCTXCTL	e1000_regs.h	372;"	d
E1000_TXCW	e1000_regs.h	153;"	d
E1000_TXDCTL	e1000_regs.h	240;"	d
E1000_TXDCTL1	e1000_regs.h	249;"	d
E1000_TXDMAC	e1000_regs.h	211;"	d
E1000_TXD_CMD_DEXT	e1000_regs.h	995;"	d
E1000_TXD_CMD_EOP	e1000_regs.h	990;"	d
E1000_TXD_CMD_IC	e1000_regs.h	992;"	d
E1000_TXD_CMD_IDE	e1000_regs.h	997;"	d
E1000_TXD_CMD_IFCS	e1000_regs.h	991;"	d
E1000_TXD_CMD_IP	e1000_regs.h	1003;"	d
E1000_TXD_CMD_RPS	e1000_regs.h	994;"	d
E1000_TXD_CMD_RS	e1000_regs.h	993;"	d
E1000_TXD_CMD_SNAP	e1000_regs.h	1005;"	d
E1000_TXD_CMD_TCP	e1000_regs.h	1002;"	d
E1000_TXD_CMD_TSE	e1000_regs.h	1004;"	d
E1000_TXD_CMD_VLE	e1000_regs.h	996;"	d
E1000_TXD_DTYP_C	e1000_regs.h	987;"	d
E1000_TXD_DTYP_D	e1000_regs.h	986;"	d
E1000_TXD_EXTCMD_TSTAMP	e1000_regs.h	1007;"	d
E1000_TXD_POPTS_IXSM	e1000_regs.h	988;"	d
E1000_TXD_POPTS_TXSM	e1000_regs.h	989;"	d
E1000_TXD_STAT_DD	e1000_regs.h	998;"	d
E1000_TXD_STAT_EC	e1000_regs.h	999;"	d
E1000_TXD_STAT_LC	e1000_regs.h	1000;"	d
E1000_TXD_STAT_TC	e1000_regs.h	1006;"	d
E1000_TXD_STAT_TU	e1000_regs.h	1001;"	d
E1000_TXSTMPH	e1000_regs.h	377;"	d
E1000_TXSTMPL	e1000_regs.h	376;"	d
E1000_VET	e1000_regs.h	134;"	d
E1000_VFTA	e1000_regs.h	327;"	d
E1000_VFTA_A	e1000_regs.h	328;"	d
E1000_WUC	e1000_regs.h	329;"	d
E1000_WUFC	e1000_regs.h	330;"	d
E1000_WUPL	e1000_regs.h	336;"	d
E1000_WUPM	e1000_regs.h	337;"	d
E1000_WUS	e1000_regs.h	331;"	d
E1000_XDBAL_MASK	e1000_regs.h	420;"	d
E1000_XDLEN_MASK	e1000_regs.h	421;"	d
E1000_XOFFRXC	e1000_regs.h	268;"	d
E1000_XOFFTXC	e1000_regs.h	269;"	d
E1000_XONRXC	e1000_regs.h	266;"	d
E1000_XONTXC	e1000_regs.h	267;"	d
E100PCIDeviceInfo	eepro100.c	/^} E100PCIDeviceInfo;$/;"	t	typeref:struct:__anon75	file:
E100RegisterOffset	eepro100.c	/^} E100RegisterOffset;$/;"	t	typeref:enum:__anon76	file:
E2P_CMD_MAC_ADDR_LOADED	lan9118.c	61;"	d	file:
E8390_CMD	ne2000.c	37;"	d	file:
E8390_NODMA	ne2000.c	86;"	d	file:
E8390_PAGE0	ne2000.c	87;"	d	file:
E8390_PAGE1	ne2000.c	88;"	d	file:
E8390_PAGE2	ne2000.c	89;"	d	file:
E8390_RREAD	ne2000.c	84;"	d	file:
E8390_RWRITE	ne2000.c	85;"	d	file:
E8390_START	ne2000.c	82;"	d	file:
E8390_STOP	ne2000.c	81;"	d	file:
E8390_TRANS	ne2000.c	83;"	d	file:
ECNTRL	fsl_etsec/registers.h	104;"	d
EDIS	fsl_etsec/registers.h	103;"	d
EEPRO100State	eepro100.c	/^} EEPRO100State;$/;"	t	typeref:struct:__anon84	file:
EEPROM	eepro100.c	79;"	d	file:
EEPROMOffset	eepro100.c	/^} EEPROMOffset;$/;"	t	typeref:enum:__anon85	file:
EEPROM_9346_ADDR_BITS	rtl8139.c	372;"	d	file:
EEPROM_9346_ADDR_MASK	rtl8139.c	374;"	d	file:
EEPROM_9346_SIZE	rtl8139.c	373;"	d	file:
EEPROM_CFG	e1000_regs.h	942;"	d
EEPROM_CHECKSUM_REG	e1000_regs.h	944;"	d
EEPROM_CNFG_MDIX	eepro100.c	/^    EEPROM_CNFG_MDIX  = 0x03,$/;"	e	enum:__anon85	file:
EEPROM_COMPAT	e1000_regs.h	930;"	d
EEPROM_CONFIG_ASF	eepro100.c	/^    EEPROM_CONFIG_ASF = 0x0d,$/;"	e	enum:__anon85	file:
EEPROM_CS	eepro100.c	1104;"	d	file:
EEPROM_DEVICE_ID	eepro100.c	/^    EEPROM_DEVICE_ID  = 0x23,$/;"	e	enum:__anon85	file:
EEPROM_DI	eepro100.c	1106;"	d	file:
EEPROM_DO	eepro100.c	1107;"	d	file:
EEPROM_ERASE_OPCODE_MICROWIRE	e1000_regs.h	925;"	d
EEPROM_EWDS_OPCODE_MICROWIRE	e1000_regs.h	927;"	d
EEPROM_EWEN_OPCODE_MICROWIRE	e1000_regs.h	926;"	d
EEPROM_FLASH_VERSION	e1000_regs.h	943;"	d
EEPROM_ID	eepro100.c	/^    EEPROM_ID         = 0x05,$/;"	e	enum:__anon85	file:
EEPROM_ID_ALT	eepro100.c	/^    EEPROM_ID_ALT = BIT(7),     \/* *\/$/;"	e	enum:__anon86	file:
EEPROM_ID_BD	eepro100.c	/^    EEPROM_ID_BD = BIT(11),     \/* boot disable *\/$/;"	e	enum:__anon86	file:
EEPROM_ID_DPD	eepro100.c	/^    EEPROM_ID_DPD = BIT(6),     \/* Deep Power Down *\/$/;"	e	enum:__anon86	file:
EEPROM_ID_ID	eepro100.c	/^    EEPROM_ID_ID = BIT(13),     \/* id bit *\/$/;"	e	enum:__anon86	file:
EEPROM_ID_LED_SETTINGS	e1000_regs.h	931;"	d
EEPROM_ID_MDM	eepro100.c	/^    EEPROM_ID_MDM = BIT(0),     \/* Modem *\/$/;"	e	enum:__anon86	file:
EEPROM_ID_STB	eepro100.c	/^    EEPROM_ID_STB = BIT(1),     \/* Standby Enable *\/$/;"	e	enum:__anon86	file:
EEPROM_ID_VALID	eepro100.c	/^    EEPROM_ID_VALID = BIT(14),  \/* signature for valid eeprom *\/$/;"	e	enum:__anon86	file:
EEPROM_ID_WMR	eepro100.c	/^    EEPROM_ID_WMR = BIT(2),     \/* ??? *\/$/;"	e	enum:__anon86	file:
EEPROM_ID_WOL	eepro100.c	/^    EEPROM_ID_WOL = BIT(5),     \/* Wake on LAN *\/$/;"	e	enum:__anon86	file:
EEPROM_INIT_3GIO_3	e1000_regs.h	939;"	d
EEPROM_INIT_CONTROL1_REG	e1000_regs.h	935;"	d
EEPROM_INIT_CONTROL2_REG	e1000_regs.h	936;"	d
EEPROM_INIT_CONTROL3_PORT_A	e1000_regs.h	941;"	d
EEPROM_INIT_CONTROL3_PORT_B	e1000_regs.h	938;"	d
EEPROM_PHY_CLASS_WORD	e1000_regs.h	934;"	d
EEPROM_PHY_ID	eepro100.c	/^    EEPROM_PHY_ID     = 0x06,$/;"	e	enum:__anon85	file:
EEPROM_READ_OPCODE_MICROWIRE	e1000_regs.h	923;"	d
EEPROM_SERDES_AMPLITUDE	e1000_regs.h	933;"	d
EEPROM_SIZE	eepro100.c	103;"	d	file:
EEPROM_SK	eepro100.c	1105;"	d	file:
EEPROM_SMBUS_ADDR	eepro100.c	/^    EEPROM_SMBUS_ADDR = 0x90,$/;"	e	enum:__anon85	file:
EEPROM_SUM	e1000_regs.h	1244;"	d
EEPROM_SWDEF_PINS_CTRL_PORT_0	e1000_regs.h	940;"	d
EEPROM_SWDEF_PINS_CTRL_PORT_1	e1000_regs.h	937;"	d
EEPROM_VENDOR_ID	eepro100.c	/^    EEPROM_VENDOR_ID  = 0x0c,$/;"	e	enum:__anon85	file:
EEPROM_VERSION	e1000_regs.h	932;"	d
EEPROM_WRITE_OPCODE_MICROWIRE	e1000_regs.h	924;"	d
EEprom9346	rtl8139.c	/^typedef struct EEprom9346$/;"	s	file:
EEprom9346	rtl8139.c	/^} EEprom9346;$/;"	t	typeref:struct:EEprom9346	file:
EMMC_LINKSPEED_1000MB	xilinx_axienet.c	/^    EMMC_LINKSPEED_1000MB = (2 << 30),$/;"	e	enum:__anon132	file:
EMMC_LINKSPEED_100MB	xilinx_axienet.c	/^    EMMC_LINKSPEED_100MB = (1 << 30),$/;"	e	enum:__anon132	file:
EMMC_LINKSPEED_10MB	xilinx_axienet.c	/^    EMMC_LINKSPEED_10MB = (0 << 30),$/;"	e	enum:__anon132	file:
EN0_BOUNDARY	ne2000.c	43;"	d	file:
EN0_CLDAHI	ne2000.c	41;"	d	file:
EN0_CLDALO	ne2000.c	39;"	d	file:
EN0_COUNTER0	ne2000.c	62;"	d	file:
EN0_COUNTER1	ne2000.c	64;"	d	file:
EN0_COUNTER2	ne2000.c	66;"	d	file:
EN0_CRDAHI	ne2000.c	53;"	d	file:
EN0_CRDALO	ne2000.c	51;"	d	file:
EN0_DCFG	ne2000.c	63;"	d	file:
EN0_FIFO	ne2000.c	48;"	d	file:
EN0_IMR	ne2000.c	65;"	d	file:
EN0_ISR	ne2000.c	50;"	d	file:
EN0_NCR	ne2000.c	46;"	d	file:
EN0_RCNTHI	ne2000.c	57;"	d	file:
EN0_RCNTLO	ne2000.c	55;"	d	file:
EN0_RSARHI	ne2000.c	54;"	d	file:
EN0_RSARLO	ne2000.c	52;"	d	file:
EN0_RSR	ne2000.c	59;"	d	file:
EN0_RTL8029ID0	ne2000.c	56;"	d	file:
EN0_RTL8029ID1	ne2000.c	58;"	d	file:
EN0_RXCR	ne2000.c	60;"	d	file:
EN0_STARTPG	ne2000.c	40;"	d	file:
EN0_STOPPG	ne2000.c	42;"	d	file:
EN0_TCNTHI	ne2000.c	49;"	d	file:
EN0_TCNTLO	ne2000.c	47;"	d	file:
EN0_TPSR	ne2000.c	45;"	d	file:
EN0_TSR	ne2000.c	44;"	d	file:
EN0_TXCR	ne2000.c	61;"	d	file:
EN1_CURPAG	ne2000.c	69;"	d	file:
EN1_MULT	ne2000.c	70;"	d	file:
EN1_PHYS	ne2000.c	68;"	d	file:
EN2_STARTPG	ne2000.c	72;"	d	file:
EN2_STOPPG	ne2000.c	73;"	d	file:
EN3_CONFIG0	ne2000.c	75;"	d	file:
EN3_CONFIG1	ne2000.c	76;"	d	file:
EN3_CONFIG2	ne2000.c	77;"	d	file:
EN3_CONFIG3	ne2000.c	78;"	d	file:
ENISR_ALL	ne2000.c	100;"	d	file:
ENISR_COUNTERS	ne2000.c	97;"	d	file:
ENISR_OVER	ne2000.c	96;"	d	file:
ENISR_RDC	ne2000.c	98;"	d	file:
ENISR_RESET	ne2000.c	99;"	d	file:
ENISR_RX	ne2000.c	92;"	d	file:
ENISR_RX_ERR	ne2000.c	94;"	d	file:
ENISR_TX	ne2000.c	93;"	d	file:
ENISR_TX_ERR	ne2000.c	95;"	d	file:
ENRSR_CRC	ne2000.c	104;"	d	file:
ENRSR_DEF	ne2000.c	110;"	d	file:
ENRSR_DIS	ne2000.c	109;"	d	file:
ENRSR_FAE	ne2000.c	105;"	d	file:
ENRSR_FO	ne2000.c	106;"	d	file:
ENRSR_MPA	ne2000.c	107;"	d	file:
ENRSR_PHY	ne2000.c	108;"	d	file:
ENRSR_RXOK	ne2000.c	103;"	d	file:
ENTSR_ABT	ne2000.c	116;"	d	file:
ENTSR_CDH	ne2000.c	119;"	d	file:
ENTSR_COL	ne2000.c	115;"	d	file:
ENTSR_CRS	ne2000.c	117;"	d	file:
ENTSR_FU	ne2000.c	118;"	d	file:
ENTSR_ND	ne2000.c	114;"	d	file:
ENTSR_OWC	ne2000.c	120;"	d	file:
ENTSR_PTX	ne2000.c	113;"	d	file:
ETHERTYPE_IP	e1000.c	527;"	d	file:
ETHERTYPE_IP	ne2000.c	135;"	d	file:
ETHERTYPE_IP	pcnet.c	56;"	d	file:
ETHERTYPE_IP	rtl8139.c	1203;"	d	file:
ETHER_ADDR_LEN	e1000.c	526;"	d	file:
ETHER_ADDR_LEN	ne2000.c	134;"	d	file:
ETHER_ADDR_LEN	pcnet.c	55;"	d	file:
ETHER_ADDR_LEN	rtl8139.c	1202;"	d	file:
ETHER_TYPE_LEN	rtl8139.c	77;"	d	file:
ETH_ALEN	spapr_llan.c	41;"	d	file:
ETH_MTU	rtl8139.c	78;"	d	file:
ETRAXFSEthState	etraxfs_eth.c	/^typedef struct ETRAXFSEthState$/;"	s	file:
ETRAXFSEthState	etraxfs_eth.c	/^} ETRAXFSEthState;$/;"	t	typeref:struct:ETRAXFSEthState	file:
ETRAX_FS_ETH	etraxfs_eth.c	327;"	d	file:
ETSEC_COMMON	fsl_etsec/etsec.h	153;"	d
ETSEC_H	fsl_etsec/etsec.h	26;"	d
ETSEC_REGISTERS_H	fsl_etsec/registers.h	26;"	d
ETSEC_REG_NUMBER	fsl_etsec/etsec.h	99;"	d
FAE	rtl8139.c	/^    uint16_t   FAE;$/;"	m	struct:RTL8139TallyCounters	file:
FCB_TX_CIP	fsl_etsec/etsec.h	75;"	d
FCB_TX_CTU	fsl_etsec/etsec.h	76;"	d
FCB_TX_IP	fsl_etsec/etsec.h	71;"	d
FCB_TX_IP6	fsl_etsec/etsec.h	72;"	d
FCB_TX_NPH	fsl_etsec/etsec.h	77;"	d
FCB_TX_TUP	fsl_etsec/etsec.h	73;"	d
FCB_TX_UDP	fsl_etsec/etsec.h	74;"	d
FCB_TX_VLN	fsl_etsec/etsec.h	70;"	d
FEC_BD_ABC	mcf_fec.c	102;"	d	file:
FEC_BD_BC	mcf_fec.c	104;"	d	file:
FEC_BD_CR	mcf_fec.c	108;"	d	file:
FEC_BD_E	mcf_fec.c	96;"	d	file:
FEC_BD_L	mcf_fec.c	100;"	d	file:
FEC_BD_LG	mcf_fec.c	106;"	d	file:
FEC_BD_M	mcf_fec.c	103;"	d	file:
FEC_BD_MC	mcf_fec.c	105;"	d	file:
FEC_BD_NO	mcf_fec.c	107;"	d	file:
FEC_BD_O1	mcf_fec.c	97;"	d	file:
FEC_BD_O2	mcf_fec.c	99;"	d	file:
FEC_BD_OV	mcf_fec.c	109;"	d	file:
FEC_BD_R	mcf_fec.c	95;"	d	file:
FEC_BD_TC	mcf_fec.c	101;"	d	file:
FEC_BD_TR	mcf_fec.c	110;"	d	file:
FEC_BD_W	mcf_fec.c	98;"	d	file:
FEC_EN	mcf_fec.c	67;"	d	file:
FEC_INT_BABR	mcf_fec.c	54;"	d	file:
FEC_INT_BABT	mcf_fec.c	55;"	d	file:
FEC_INT_EB	mcf_fec.c	62;"	d	file:
FEC_INT_GRA	mcf_fec.c	56;"	d	file:
FEC_INT_HB	mcf_fec.c	53;"	d	file:
FEC_INT_LC	mcf_fec.c	63;"	d	file:
FEC_INT_MII	mcf_fec.c	61;"	d	file:
FEC_INT_RL	mcf_fec.c	64;"	d	file:
FEC_INT_RXB	mcf_fec.c	60;"	d	file:
FEC_INT_RXF	mcf_fec.c	59;"	d	file:
FEC_INT_TXB	mcf_fec.c	58;"	d	file:
FEC_INT_TXF	mcf_fec.c	57;"	d	file:
FEC_INT_UN	mcf_fec.c	65;"	d	file:
FEC_MAX_DESC	mcf_fec.c	26;"	d	file:
FEC_MAX_FRAME_SIZE	mcf_fec.c	27;"	d	file:
FEC_NUM_IRQ	mcf_fec.c	71;"	d	file:
FEC_PRINTF	imx_fec.c	38;"	d	file:
FEC_RESET	mcf_fec.c	68;"	d	file:
FEXTNVM_SW_CONFIG	e1000_regs.h	164;"	d
FIFOTMS	rtl8139.c	/^    FIFOTMS = 0x70,        \/* FIFO Control and test. *\/$/;"	e	enum:RTL8139_registers	file:
FLOW_KEY_WIDTH	rocker/rocker_of_dpa.c	105;"	d	file:
FS_ETH_MAX_REGS	etraxfs_eth.c	324;"	d	file:
FlashReg	rtl8139.c	/^    FlashReg = 0x54,$/;"	e	enum:RTL8139_registers	file:
FpPort	rocker/rocker_fp.h	/^typedef struct fp_port FpPort;$/;"	t	typeref:struct:fp_port
GADDR0	fsl_etsec/registers.h	268;"	d
GADDR1	fsl_etsec/registers.h	269;"	d
GADDR2	fsl_etsec/registers.h	270;"	d
GADDR3	fsl_etsec/registers.h	271;"	d
GADDR4	fsl_etsec/registers.h	272;"	d
GADDR5	fsl_etsec/registers.h	273;"	d
GADDR6	fsl_etsec/registers.h	274;"	d
GADDR7	fsl_etsec/registers.h	275;"	d
GEM_1588ADJ	cadence_gem.c	126;"	d	file:
GEM_1588INC	cadence_gem.c	127;"	d	file:
GEM_1588NS	cadence_gem.c	125;"	d	file:
GEM_1588S	cadence_gem.c	124;"	d	file:
GEM_CSENSECNT	cadence_gem.c	97;"	d	file:
GEM_DEFERTXCNT	cadence_gem.c	96;"	d	file:
GEM_DESCONF	cadence_gem.c	138;"	d	file:
GEM_DESCONF2	cadence_gem.c	139;"	d	file:
GEM_DESCONF3	cadence_gem.c	140;"	d	file:
GEM_DESCONF4	cadence_gem.c	141;"	d	file:
GEM_DESCONF5	cadence_gem.c	142;"	d	file:
GEM_DESCONF6	cadence_gem.c	143;"	d	file:
GEM_DESCONF7	cadence_gem.c	144;"	d	file:
GEM_DMACFG	cadence_gem.c	46;"	d	file:
GEM_DMACFG_RBUFSZ_M	cadence_gem.c	210;"	d	file:
GEM_DMACFG_RBUFSZ_MUL	cadence_gem.c	212;"	d	file:
GEM_DMACFG_RBUFSZ_S	cadence_gem.c	211;"	d	file:
GEM_DMACFG_TXCSUM_OFFL	cadence_gem.c	213;"	d	file:
GEM_EXCESSCOLLCNT	cadence_gem.c	94;"	d	file:
GEM_HASHHI	cadence_gem.c	61;"	d	file:
GEM_HASHLO	cadence_gem.c	60;"	d	file:
GEM_IDR	cadence_gem.c	53;"	d	file:
GEM_IER	cadence_gem.c	52;"	d	file:
GEM_IMR	cadence_gem.c	54;"	d	file:
GEM_INT_Q1_DISABLE	cadence_gem.c	158;"	d	file:
GEM_INT_Q1_ENABLE	cadence_gem.c	155;"	d	file:
GEM_INT_Q1_MASK	cadence_gem.c	147;"	d	file:
GEM_INT_Q1_MASK	cadence_gem.c	161;"	d	file:
GEM_INT_Q1_STATUS	cadence_gem.c	146;"	d	file:
GEM_INT_Q7_DISABLE	cadence_gem.c	159;"	d	file:
GEM_INT_Q7_ENABLE	cadence_gem.c	156;"	d	file:
GEM_INT_Q7_MASK	cadence_gem.c	162;"	d	file:
GEM_INT_RXCMPL	cadence_gem.c	225;"	d	file:
GEM_INT_RXUSED	cadence_gem.c	224;"	d	file:
GEM_INT_TXCMPL	cadence_gem.c	222;"	d	file:
GEM_INT_TXUSED	cadence_gem.c	223;"	d	file:
GEM_IPGSTRETCH	cadence_gem.c	75;"	d	file:
GEM_ISR	cadence_gem.c	51;"	d	file:
GEM_LATECOLLCNT	cadence_gem.c	95;"	d	file:
GEM_MODID	cadence_gem.c	77;"	d	file:
GEM_MULTCOLLCNT	cadence_gem.c	93;"	d	file:
GEM_NWCFG	cadence_gem.c	43;"	d	file:
GEM_NWCFG_BCAST_REJ	cadence_gem.c	207;"	d	file:
GEM_NWCFG_BUFF_OFST_M	cadence_gem.c	203;"	d	file:
GEM_NWCFG_BUFF_OFST_S	cadence_gem.c	204;"	d	file:
GEM_NWCFG_LERR_DISC	cadence_gem.c	202;"	d	file:
GEM_NWCFG_MCAST_HASH	cadence_gem.c	206;"	d	file:
GEM_NWCFG_PROMISC	cadence_gem.c	208;"	d	file:
GEM_NWCFG_STRIP_FCS	cadence_gem.c	201;"	d	file:
GEM_NWCFG_UCAST_HASH	cadence_gem.c	205;"	d	file:
GEM_NWCTRL	cadence_gem.c	42;"	d	file:
GEM_NWCTRL_LOCALLOOP	cadence_gem.c	199;"	d	file:
GEM_NWCTRL_RXENA	cadence_gem.c	198;"	d	file:
GEM_NWCTRL_TXENA	cadence_gem.c	197;"	d	file:
GEM_NWCTRL_TXSTART	cadence_gem.c	196;"	d	file:
GEM_NWSTATUS	cadence_gem.c	44;"	d	file:
GEM_OCTRXHI	cadence_gem.c	99;"	d	file:
GEM_OCTRXLO	cadence_gem.c	98;"	d	file:
GEM_OCTTXHI	cadence_gem.c	79;"	d	file:
GEM_OCTTXLO	cadence_gem.c	78;"	d	file:
GEM_PHYMNTNC	cadence_gem.c	55;"	d	file:
GEM_PHYMNTNC_ADDR	cadence_gem.c	229;"	d	file:
GEM_PHYMNTNC_ADDR_SHFT	cadence_gem.c	230;"	d	file:
GEM_PHYMNTNC_OP_R	cadence_gem.c	227;"	d	file:
GEM_PHYMNTNC_OP_W	cadence_gem.c	228;"	d	file:
GEM_PHYMNTNC_REG	cadence_gem.c	231;"	d	file:
GEM_PHYMNTNC_REG_SHIFT	cadence_gem.c	232;"	d	file:
GEM_PTPERXNS	cadence_gem.c	131;"	d	file:
GEM_PTPERXS	cadence_gem.c	130;"	d	file:
GEM_PTPETXNS	cadence_gem.c	129;"	d	file:
GEM_PTPETXS	cadence_gem.c	128;"	d	file:
GEM_PTPPRXNS	cadence_gem.c	135;"	d	file:
GEM_PTPPRXS	cadence_gem.c	134;"	d	file:
GEM_PTPPTXNS	cadence_gem.c	133;"	d	file:
GEM_PTPPTXS	cadence_gem.c	132;"	d	file:
GEM_RECEIVE_Q1_PTR	cadence_gem.c	152;"	d	file:
GEM_RECEIVE_Q7_PTR	cadence_gem.c	153;"	d	file:
GEM_RX1024CNT	cadence_gem.c	109;"	d	file:
GEM_RX128CNT	cadence_gem.c	106;"	d	file:
GEM_RX1519CNT	cadence_gem.c	110;"	d	file:
GEM_RX256CNT	cadence_gem.c	107;"	d	file:
GEM_RX512CNT	cadence_gem.c	108;"	d	file:
GEM_RX64CNT	cadence_gem.c	104;"	d	file:
GEM_RX65CNT	cadence_gem.c	105;"	d	file:
GEM_RXALIGNERRCNT	cadence_gem.c	117;"	d	file:
GEM_RXBROADCNT	cadence_gem.c	101;"	d	file:
GEM_RXCNT	cadence_gem.c	100;"	d	file:
GEM_RXFCSCNT	cadence_gem.c	114;"	d	file:
GEM_RXIPCSERRCNT	cadence_gem.c	120;"	d	file:
GEM_RXJABCNT	cadence_gem.c	113;"	d	file:
GEM_RXLENERRCNT	cadence_gem.c	115;"	d	file:
GEM_RXMULTICNT	cadence_gem.c	102;"	d	file:
GEM_RXORUNCNT	cadence_gem.c	119;"	d	file:
GEM_RXOVERCNT	cadence_gem.c	112;"	d	file:
GEM_RXPARTIALSF	cadence_gem.c	59;"	d	file:
GEM_RXPAUSE	cadence_gem.c	56;"	d	file:
GEM_RXPAUSECNT	cadence_gem.c	103;"	d	file:
GEM_RXQBASE	cadence_gem.c	48;"	d	file:
GEM_RXRSCERRCNT	cadence_gem.c	118;"	d	file:
GEM_RXSTATUS	cadence_gem.c	50;"	d	file:
GEM_RXSTATUS_FRMRCVD	cadence_gem.c	218;"	d	file:
GEM_RXSTATUS_NOBUF	cadence_gem.c	219;"	d	file:
GEM_RXSYMERRCNT	cadence_gem.c	116;"	d	file:
GEM_RXTCPCCNT	cadence_gem.c	121;"	d	file:
GEM_RXUDPCCNT	cadence_gem.c	122;"	d	file:
GEM_RXUNDERCNT	cadence_gem.c	111;"	d	file:
GEM_RX_BROADCAST_ACCEPT	cadence_gem.c	276;"	d	file:
GEM_RX_MULTICAST_HASH_ACCEPT	cadence_gem.c	277;"	d	file:
GEM_RX_PROMISCUOUS_ACCEPT	cadence_gem.c	275;"	d	file:
GEM_RX_REJECT	cadence_gem.c	274;"	d	file:
GEM_RX_SAR_ACCEPT	cadence_gem.c	280;"	d	file:
GEM_RX_UNICAST_HASH_ACCEPT	cadence_gem.c	278;"	d	file:
GEM_SCREENING_TYPE1_REGISTER_0	cadence_gem.c	164;"	d	file:
GEM_SCREENING_TYPE2_ETHERTYPE_REG_0	cadence_gem.c	187;"	d	file:
GEM_SCREENING_TYPE2_REGISTER_0	cadence_gem.c	175;"	d	file:
GEM_SINGLECOLLCNT	cadence_gem.c	92;"	d	file:
GEM_SPADDR1HI	cadence_gem.c	63;"	d	file:
GEM_SPADDR1LO	cadence_gem.c	62;"	d	file:
GEM_SPADDR2HI	cadence_gem.c	65;"	d	file:
GEM_SPADDR2LO	cadence_gem.c	64;"	d	file:
GEM_SPADDR3HI	cadence_gem.c	67;"	d	file:
GEM_SPADDR3LO	cadence_gem.c	66;"	d	file:
GEM_SPADDR4HI	cadence_gem.c	69;"	d	file:
GEM_SPADDR4LO	cadence_gem.c	68;"	d	file:
GEM_ST1R_DSTC_ENABLE	cadence_gem.c	167;"	d	file:
GEM_ST1R_DSTC_MATCH_SHIFT	cadence_gem.c	170;"	d	file:
GEM_ST1R_DSTC_MATCH_WIDTH	cadence_gem.c	171;"	d	file:
GEM_ST1R_QUEUE_SHIFT	cadence_gem.c	172;"	d	file:
GEM_ST1R_QUEUE_WIDTH	cadence_gem.c	173;"	d	file:
GEM_ST1R_UDP_PORT_MATCH_ENABLE	cadence_gem.c	166;"	d	file:
GEM_ST1R_UDP_PORT_MATCH_SHIFT	cadence_gem.c	168;"	d	file:
GEM_ST1R_UDP_PORT_MATCH_WIDTH	cadence_gem.c	169;"	d	file:
GEM_ST2R_COMPARE_A_ENABLE	cadence_gem.c	177;"	d	file:
GEM_ST2R_COMPARE_A_SHIFT	cadence_gem.c	178;"	d	file:
GEM_ST2R_COMPARE_WIDTH	cadence_gem.c	179;"	d	file:
GEM_ST2R_ETHERTYPE_ENABLE	cadence_gem.c	180;"	d	file:
GEM_ST2R_ETHERTYPE_INDEX_SHIFT	cadence_gem.c	181;"	d	file:
GEM_ST2R_ETHERTYPE_INDEX_WIDTH	cadence_gem.c	182;"	d	file:
GEM_ST2R_QUEUE_SHIFT	cadence_gem.c	184;"	d	file:
GEM_ST2R_QUEUE_WIDTH	cadence_gem.c	185;"	d	file:
GEM_SVLAN	cadence_gem.c	76;"	d	file:
GEM_T2CW1_COMPARE_OFFSET_SHIFT	cadence_gem.c	190;"	d	file:
GEM_T2CW1_COMPARE_OFFSET_WIDTH	cadence_gem.c	191;"	d	file:
GEM_T2CW1_OFFSET_VALUE_SHIFT	cadence_gem.c	192;"	d	file:
GEM_T2CW1_OFFSET_VALUE_WIDTH	cadence_gem.c	193;"	d	file:
GEM_TIDMATCH1	cadence_gem.c	70;"	d	file:
GEM_TIDMATCH2	cadence_gem.c	71;"	d	file:
GEM_TIDMATCH3	cadence_gem.c	72;"	d	file:
GEM_TIDMATCH4	cadence_gem.c	73;"	d	file:
GEM_TRANSMIT_Q1_PTR	cadence_gem.c	149;"	d	file:
GEM_TRANSMIT_Q7_PTR	cadence_gem.c	150;"	d	file:
GEM_TX1024CNT	cadence_gem.c	89;"	d	file:
GEM_TX128CNT	cadence_gem.c	86;"	d	file:
GEM_TX1519CNT	cadence_gem.c	90;"	d	file:
GEM_TX256CNT	cadence_gem.c	87;"	d	file:
GEM_TX512CNT	cadence_gem.c	88;"	d	file:
GEM_TX64CNT	cadence_gem.c	84;"	d	file:
GEM_TX65CNT	cadence_gem.c	85;"	d	file:
GEM_TXBCNT	cadence_gem.c	81;"	d	file:
GEM_TXCNT	cadence_gem.c	80;"	d	file:
GEM_TXMCNT	cadence_gem.c	82;"	d	file:
GEM_TXPARTIALSF	cadence_gem.c	58;"	d	file:
GEM_TXPAUSE	cadence_gem.c	57;"	d	file:
GEM_TXPAUSECNT	cadence_gem.c	83;"	d	file:
GEM_TXQBASE	cadence_gem.c	49;"	d	file:
GEM_TXSTATUS	cadence_gem.c	47;"	d	file:
GEM_TXSTATUS_TXCMPL	cadence_gem.c	215;"	d	file:
GEM_TXSTATUS_USED	cadence_gem.c	216;"	d	file:
GEM_TXURUNCNT	cadence_gem.c	91;"	d	file:
GEM_TYPE2_COMPARE_0_WORD_0	cadence_gem.c	188;"	d	file:
GEM_USERIO	cadence_gem.c	45;"	d	file:
GEM_WOLAN	cadence_gem.c	74;"	d	file:
GET_FIELD	opencores_eth.c	47;"	d	file:
GET_FIELD	pcnet.c	382;"	d	file:
GET_REGBIT	opencores_eth.c	48;"	d	file:
GET_REGFIELD	opencores_eth.c	49;"	d	file:
GIE_GIE	xilinx_ethlite.c	47;"	d	file:
GPIO0_INT	lan9118.c	94;"	d	file:
GPIO1_INT	lan9118.c	93;"	d	file:
GPIO2_INT	lan9118.c	92;"	d	file:
GPT_INT	lan9118.c	76;"	d	file:
GPT_TIMER_EN	lan9118.c	138;"	d	file:
HAFDUP	fsl_etsec/registers.h	171;"	d
HASH0	opencores_eth.c	/^    HASH0,$/;"	e	enum:__anon137	file:
HASH1	opencores_eth.c	/^    HASH1,$/;"	e	enum:__anon137	file:
HW_E1000_REGS_H	e1000_regs.h	33;"	d
HW_NE2000_H	ne2000.h	2;"	d
HW_PCNET_H	pcnet.h	2;"	d
HW_REVID	rtl8139.c	362;"	d	file:
HW_REVID_MASK	rtl8139.c	364;"	d	file:
HasHltClk	rtl8139.c	/^    HasHltClk = (1 << 0),$/;"	e	enum:chip_flags	file:
HasLWake	rtl8139.c	/^    HasLWake = (1 << 1),$/;"	e	enum:chip_flags	file:
HltClk	rtl8139.c	/^    HltClk = 0x5B,$/;"	e	enum:RTL8139_registers	file:
IEVENT	fsl_etsec/registers.h	101;"	d
IEVENT_BABR	fsl_etsec/registers.h	75;"	d
IEVENT_BABT	fsl_etsec/registers.h	69;"	d
IEVENT_BSY	fsl_etsec/registers.h	73;"	d
IEVENT_CRL	fsl_etsec/registers.h	63;"	d
IEVENT_DPE	fsl_etsec/registers.h	52;"	d
IEVENT_EBERR	fsl_etsec/registers.h	72;"	d
IEVENT_FGPI	fsl_etsec/registers.h	55;"	d
IEVENT_FIQ	fsl_etsec/registers.h	53;"	d
IEVENT_FIR	fsl_etsec/registers.h	54;"	d
IEVENT_GRSC	fsl_etsec/registers.h	57;"	d
IEVENT_GTSC	fsl_etsec/registers.h	70;"	d
IEVENT_LC	fsl_etsec/registers.h	64;"	d
IEVENT_MAG	fsl_etsec/registers.h	60;"	d
IEVENT_MMRD	fsl_etsec/registers.h	59;"	d
IEVENT_MMRW	fsl_etsec/registers.h	58;"	d
IEVENT_MSRO	fsl_etsec/registers.h	71;"	d
IEVENT_PERR	fsl_etsec/registers.h	51;"	d
IEVENT_RXB	fsl_etsec/registers.h	61;"	d
IEVENT_RXC	fsl_etsec/registers.h	74;"	d
IEVENT_RXF	fsl_etsec/registers.h	56;"	d
IEVENT_TXB	fsl_etsec/registers.h	66;"	d
IEVENT_TXC	fsl_etsec/registers.h	68;"	d
IEVENT_TXE	fsl_etsec/registers.h	67;"	d
IEVENT_TXF	fsl_etsec/registers.h	65;"	d
IEVENT_XFUN	fsl_etsec/registers.h	62;"	d
IFSTAT	fsl_etsec/registers.h	179;"	d
IGADDR0	fsl_etsec/registers.h	260;"	d
IGADDR1	fsl_etsec/registers.h	261;"	d
IGADDR2	fsl_etsec/registers.h	262;"	d
IGADDR3	fsl_etsec/registers.h	263;"	d
IGADDR4	fsl_etsec/registers.h	264;"	d
IGADDR5	fsl_etsec/registers.h	265;"	d
IGADDR6	fsl_etsec/registers.h	266;"	d
IGADDR7	fsl_etsec/registers.h	267;"	d
IMASK	fsl_etsec/registers.h	102;"	d
IMASK_GRSCEN	fsl_etsec/registers.h	78;"	d
IMASK_GTSCEN	fsl_etsec/registers.h	82;"	d
IMASK_RXBEN	fsl_etsec/registers.h	79;"	d
IMASK_RXFEN	fsl_etsec/registers.h	77;"	d
IMASK_TXBEN	fsl_etsec/registers.h	81;"	d
IMASK_TXFEN	fsl_etsec/registers.h	80;"	d
INT	eepro100.c	75;"	d	file:
INT_ALLOC	smc91c111.c	98;"	d	file:
INT_EPH	smc91c111.c	96;"	d	file:
INT_ERCV	smc91c111.c	95;"	d	file:
INT_MASK	eepro100.c	127;"	d	file:
INT_MASK	opencores_eth.c	/^    INT_MASK,$/;"	e	enum:__anon137	file:
INT_MD	smc91c111.c	94;"	d	file:
INT_RCV	smc91c111.c	101;"	d	file:
INT_RX_OVRN	smc91c111.c	97;"	d	file:
INT_SOURCE	opencores_eth.c	/^    INT_SOURCE,$/;"	e	enum:__anon137	file:
INT_SOURCE_BUSY	opencores_eth.c	/^    INT_SOURCE_BUSY = 0x10,$/;"	e	enum:__anon139	file:
INT_SOURCE_RXB	opencores_eth.c	/^    INT_SOURCE_RXB = 0x4,$/;"	e	enum:__anon139	file:
INT_SOURCE_TXB	opencores_eth.c	/^    INT_SOURCE_TXB = 0x1,$/;"	e	enum:__anon139	file:
INT_TX	smc91c111.c	100;"	d	file:
INT_TX_EMPTY	smc91c111.c	99;"	d	file:
IOPORT_SIZE	e1000.c	63;"	d	file:
IPGIFG	fsl_etsec/registers.h	170;"	d
IPGR1	opencores_eth.c	/^    IPGR1,$/;"	e	enum:__anon137	file:
IPGR2	opencores_eth.c	/^    IPGR2,$/;"	e	enum:__anon137	file:
IPGT	opencores_eth.c	/^    IPGT,$/;"	e	enum:__anon137	file:
IRQ_EN	lan9118.c	65;"	d	file:
IRQ_INT	lan9118.c	64;"	d	file:
IRQ_POL	lan9118.c	66;"	d	file:
IRQ_TYPE	lan9118.c	67;"	d	file:
ISANE2000State	ne2000-isa.c	/^typedef struct ISANE2000State {$/;"	s	file:
ISANE2000State	ne2000-isa.c	/^} ISANE2000State;$/;"	t	typeref:struct:ISANE2000State	file:
ISA_NE2000	ne2000-isa.c	36;"	d	file:
IS_AUTONEG	xilinx_axienet.c	/^    IS_AUTONEG = (1 << 1),$/;"	e	enum:__anon128	file:
IS_HARD_ACCESS_COMPLETE	xilinx_axienet.c	/^    IS_HARD_ACCESS_COMPLETE = 1,$/;"	e	enum:__anon128	file:
IS_MGM_RDY	xilinx_axienet.c	/^    IS_MGM_RDY = (1 << 7),$/;"	e	enum:__anon128	file:
IS_PHY_RST_DONE	xilinx_axienet.c	/^    IS_PHY_RST_DONE = (1 << 8),$/;"	e	enum:__anon128	file:
IS_RX_COMPLETE	xilinx_axienet.c	/^    IS_RX_COMPLETE = (1 << 2),$/;"	e	enum:__anon128	file:
IS_RX_DCM_LOCK	xilinx_axienet.c	/^    IS_RX_DCM_LOCK = (1 << 6),$/;"	e	enum:__anon128	file:
IS_RX_REJECT	xilinx_axienet.c	/^    IS_RX_REJECT = (1 << 3),$/;"	e	enum:__anon128	file:
IS_TX_COMPLETE	xilinx_axienet.c	/^    IS_TX_COMPLETE = (1 << 5),$/;"	e	enum:__anon128	file:
IntrMask	rtl8139.c	/^    IntrMask = 0x3C,$/;"	e	enum:RTL8139_registers	file:
IntrMask	rtl8139.c	/^    uint16_t IntrMask;$/;"	m	struct:RTL8139State	file:
IntrMitigate	rtl8139.c	/^    IntrMitigate    = 0xE2,    \/* rx\/tx interrupt mitigation control *\/$/;"	e	enum:RTL8139_registers	file:
IntrStatus	rtl8139.c	/^    IntrStatus = 0x3E,$/;"	e	enum:RTL8139_registers	file:
IntrStatus	rtl8139.c	/^    uint16_t IntrStatus;$/;"	m	struct:RTL8139State	file:
IntrStatusBits	rtl8139.c	/^enum IntrStatusBits {$/;"	g	file:
Ipv6Addr	rocker/rocker.h	/^} Ipv6Addr;$/;"	t	typeref:struct:ipv6_addr
KiB	eepro100.c	61;"	d	file:
LAN9118	lan9118.c	178;"	d	file:
LAN9118Packet	lan9118.c	/^} LAN9118Packet;$/;"	t	typeref:struct:__anon122	file:
LNC_POLYNOMIAL	pcnet.c	671;"	d	file:
LNC_POLYNOMIAL	pcnet.c	683;"	d	file:
LROBytesRxOK	vmxnet3.h	/^    u64            LROBytesRxOK;   \/* bytes from LRO pkts *\/$/;"	m	struct:UPT1_RxStats
LROPktsRxOK	vmxnet3.h	/^    u64            LROPktsRxOK;    \/* LRO pkts *\/$/;"	m	struct:UPT1_RxStats
LWAKE	rtl8139.c	/^    LWAKE = 0x10,        \/* not on 8139, 8139A *\/$/;"	e	enum:Config1Bits	file:
LWPTN	rtl8139.c	/^    LWPTN = (1 << 2),    \/* not on 8139, 8139A *\/$/;"	e	enum:Config4Bits	file:
M88E1000_EXT_PHY_SPEC_CTRL	e1000_regs.h	533;"	d
M88E1000_INT_ENABLE	e1000_regs.h	531;"	d
M88E1000_INT_STATUS	e1000_regs.h	532;"	d
M88E1000_PHY_EXT_CTRL	e1000_regs.h	536;"	d
M88E1000_PHY_GEN_CONTROL	e1000_regs.h	538;"	d
M88E1000_PHY_PAGE_SELECT	e1000_regs.h	537;"	d
M88E1000_PHY_SPEC_CTRL	e1000_regs.h	529;"	d
M88E1000_PHY_SPEC_STATUS	e1000_regs.h	530;"	d
M88E1000_PHY_VCO_REG_BIT11	e1000_regs.h	540;"	d
M88E1000_PHY_VCO_REG_BIT8	e1000_regs.h	539;"	d
M88E1000_RX_ERR_CNTR	e1000_regs.h	534;"	d
MAC0	rtl8139.c	/^    MAC0 = 0,        \/* Ethernet hardware address. *\/$/;"	e	enum:RTL8139_registers	file:
MAC01ADDR1	fsl_etsec/registers.h	182;"	d
MAC01ADDR2	fsl_etsec/registers.h	183;"	d
MAC02ADDR1	fsl_etsec/registers.h	184;"	d
MAC02ADDR2	fsl_etsec/registers.h	185;"	d
MAC03ADDR1	fsl_etsec/registers.h	186;"	d
MAC03ADDR2	fsl_etsec/registers.h	187;"	d
MAC04ADDR1	fsl_etsec/registers.h	188;"	d
MAC04ADDR2	fsl_etsec/registers.h	189;"	d
MAC05ADDR1	fsl_etsec/registers.h	190;"	d
MAC05ADDR2	fsl_etsec/registers.h	191;"	d
MAC06ADDR1	fsl_etsec/registers.h	192;"	d
MAC06ADDR2	fsl_etsec/registers.h	193;"	d
MAC07ADDR1	fsl_etsec/registers.h	194;"	d
MAC07ADDR2	fsl_etsec/registers.h	195;"	d
MAC08ADDR1	fsl_etsec/registers.h	196;"	d
MAC08ADDR2	fsl_etsec/registers.h	197;"	d
MAC09ADDR1	fsl_etsec/registers.h	198;"	d
MAC09ADDR2	fsl_etsec/registers.h	199;"	d
MAC10ADDR1	fsl_etsec/registers.h	200;"	d
MAC10ADDR2	fsl_etsec/registers.h	201;"	d
MAC11ADDR1	fsl_etsec/registers.h	202;"	d
MAC11ADDR2	fsl_etsec/registers.h	203;"	d
MAC12ADDR1	fsl_etsec/registers.h	204;"	d
MAC12ADDR2	fsl_etsec/registers.h	205;"	d
MAC13ADDR1	fsl_etsec/registers.h	206;"	d
MAC13ADDR2	fsl_etsec/registers.h	207;"	d
MAC14ADDR1	fsl_etsec/registers.h	208;"	d
MAC14ADDR2	fsl_etsec/registers.h	209;"	d
MAC15ADDR1	fsl_etsec/registers.h	210;"	d
MAC15ADDR2	fsl_etsec/registers.h	211;"	d
MACCFG1	fsl_etsec/registers.h	168;"	d
MACCFG1_RX_EN	fsl_etsec/registers.h	85;"	d
MACCFG1_TX_EN	fsl_etsec/registers.h	84;"	d
MACCFG2	fsl_etsec/registers.h	169;"	d
MACCFG2_CRC_EN	fsl_etsec/registers.h	87;"	d
MACCFG2_PADCRC	fsl_etsec/registers.h	88;"	d
MACSTNADDR1	fsl_etsec/registers.h	180;"	d
MACSTNADDR2	fsl_etsec/registers.h	181;"	d
MAC_ACCESS_FLAG_NEEDED	e1000.c	/^enum { MAC_ACCESS_PARTIAL = 1, MAC_ACCESS_FLAG_NEEDED = 2 };$/;"	e	enum:__anon94	file:
MAC_ACCESS_PARTIAL	e1000.c	/^enum { MAC_ACCESS_PARTIAL = 1, MAC_ACCESS_FLAG_NEEDED = 2 };$/;"	e	enum:__anon94	file:
MAC_ACCESS_PARTIAL	e1000e_core.c	/^enum { MAC_ACCESS_PARTIAL = 1 };$/;"	e	enum:__anon152	file:
MAC_ADDR0	opencores_eth.c	/^    MAC_ADDR0,$/;"	e	enum:__anon137	file:
MAC_ADDR0_BYTE2	opencores_eth.c	/^    MAC_ADDR0_BYTE2 = 0xff000000,$/;"	e	enum:__anon146	file:
MAC_ADDR0_BYTE2_LBN	opencores_eth.c	/^    MAC_ADDR0_BYTE2_LBN = 24,$/;"	e	enum:__anon146	file:
MAC_ADDR0_BYTE3	opencores_eth.c	/^    MAC_ADDR0_BYTE3 = 0xff0000,$/;"	e	enum:__anon146	file:
MAC_ADDR0_BYTE3_LBN	opencores_eth.c	/^    MAC_ADDR0_BYTE3_LBN = 16,$/;"	e	enum:__anon146	file:
MAC_ADDR0_BYTE4	opencores_eth.c	/^    MAC_ADDR0_BYTE4 = 0xff00,$/;"	e	enum:__anon146	file:
MAC_ADDR0_BYTE4_LBN	opencores_eth.c	/^    MAC_ADDR0_BYTE4_LBN = 8,$/;"	e	enum:__anon146	file:
MAC_ADDR0_BYTE5	opencores_eth.c	/^    MAC_ADDR0_BYTE5 = 0xff,$/;"	e	enum:__anon146	file:
MAC_ADDR0_BYTE5_LBN	opencores_eth.c	/^    MAC_ADDR0_BYTE5_LBN = 0,$/;"	e	enum:__anon146	file:
MAC_ADDR1	opencores_eth.c	/^    MAC_ADDR1,$/;"	e	enum:__anon137	file:
MAC_ADDR1_BYTE0	opencores_eth.c	/^    MAC_ADDR1_BYTE0 = 0xff00,$/;"	e	enum:__anon147	file:
MAC_ADDR1_BYTE0_LBN	opencores_eth.c	/^    MAC_ADDR1_BYTE0_LBN = 8,$/;"	e	enum:__anon147	file:
MAC_ADDR1_BYTE1	opencores_eth.c	/^    MAC_ADDR1_BYTE1 = 0xff,$/;"	e	enum:__anon147	file:
MAC_ADDR1_BYTE1_LBN	opencores_eth.c	/^    MAC_ADDR1_BYTE1_LBN = 0,$/;"	e	enum:__anon147	file:
MAC_ADDRH	lan9118.c	98;"	d	file:
MAC_ADDRL	lan9118.c	99;"	d	file:
MAC_CR	lan9118.c	97;"	d	file:
MAC_CR_BCAST	lan9118.c	121;"	d	file:
MAC_CR_BOLMT	lan9118.c	124;"	d	file:
MAC_CR_DFCHK	lan9118.c	125;"	d	file:
MAC_CR_DISRTY	lan9118.c	122;"	d	file:
MAC_CR_FDPX	lan9118.c	113;"	d	file:
MAC_CR_HO	lan9118.c	118;"	d	file:
MAC_CR_HPFILT	lan9118.c	119;"	d	file:
MAC_CR_INVFILT	lan9118.c	116;"	d	file:
MAC_CR_LCOLL	lan9118.c	120;"	d	file:
MAC_CR_LOOPBK	lan9118.c	112;"	d	file:
MAC_CR_MCPAS	lan9118.c	114;"	d	file:
MAC_CR_PADSTR	lan9118.c	123;"	d	file:
MAC_CR_PASSBAD	lan9118.c	117;"	d	file:
MAC_CR_PRMS	lan9118.c	115;"	d	file:
MAC_CR_RCVOWN	lan9118.c	111;"	d	file:
MAC_CR_RESERVED	lan9118.c	128;"	d	file:
MAC_CR_RXALL	lan9118.c	110;"	d	file:
MAC_CR_RXEN	lan9118.c	127;"	d	file:
MAC_CR_TXEN	lan9118.c	126;"	d	file:
MAC_FLOW	lan9118.c	104;"	d	file:
MAC_HASHH	lan9118.c	100;"	d	file:
MAC_HASHL	lan9118.c	101;"	d	file:
MAC_MII_ACC	lan9118.c	102;"	d	file:
MAC_MII_DATA	lan9118.c	103;"	d	file:
MAC_TABLE_ENTRIES	virtio-net.c	31;"	d	file:
MAC_VLAN1	lan9118.c	105;"	d	file:
MAC_VLAN2	lan9118.c	106;"	d	file:
MAC_WUCSR	lan9118.c	108;"	d	file:
MAC_WUFF	lan9118.c	107;"	d	file:
MAR0	rtl8139.c	/^    MAR0 = 8,        \/* Multicast filter. *\/$/;"	e	enum:RTL8139_registers	file:
MAXFRM	fsl_etsec/registers.h	172;"	d
MAXIMUM_ETHERNET_HDR_LEN	e1000.c	67;"	d	file:
MAX_ETH_FRAME_SIZE	eepro100.c	85;"	d	file:
MAX_ETH_FRAME_SIZE	mipsnet.c	21;"	d	file:
MAX_ETH_FRAME_SIZE	ne2000.c	35;"	d	file:
MAX_PACKET_SIZE	spapr_llan.c	42;"	d	file:
MAX_PHY_MULTI_PAGE_REG	e1000_regs.h	526;"	d
MAX_PHY_REG_ADDRESS	e1000_regs.h	525;"	d
MAX_PS_BUFFERS	e1000_regs.h	1057;"	d
MAX_ROCKER_NAME_LEN	rocker/rocker.c	1374;"	d	file:
MAX_VLAN	virtio-net.c	32;"	d	file:
MC_EN	xilinx_axienet.c	306;"	d	file:
MDI	eepro100.c	76;"	d	file:
MDIOBus	xilinx_axienet.c	/^struct MDIOBus {$/;"	s	file:
MDIO_CLK	milkymist-minimac2.c	/^    MDIO_CLK = (1<<3),$/;"	e	enum:__anon32	file:
MDIO_DI	milkymist-minimac2.c	/^    MDIO_DI  = (1<<1),$/;"	e	enum:__anon32	file:
MDIO_DO	milkymist-minimac2.c	/^    MDIO_DO  = (1<<0),$/;"	e	enum:__anon32	file:
MDIO_OE	milkymist-minimac2.c	/^    MDIO_OE  = (1<<2),$/;"	e	enum:__anon32	file:
MDIO_OP_READ	milkymist-minimac2.c	/^    MDIO_OP_READ  = 2,$/;"	e	enum:__anon34	file:
MDIO_OP_WRITE	milkymist-minimac2.c	/^    MDIO_OP_WRITE = 1,$/;"	e	enum:__anon34	file:
MDIO_STATE_IDLE	milkymist-minimac2.c	/^    MDIO_STATE_IDLE,$/;"	e	enum:mdio_state	file:
MDIO_STATE_READING	milkymist-minimac2.c	/^    MDIO_STATE_READING,$/;"	e	enum:mdio_state	file:
MDIO_STATE_WRITING	milkymist-minimac2.c	/^    MDIO_STATE_WRITING,$/;"	e	enum:mdio_state	file:
MIIADDRESS	opencores_eth.c	/^    MIIADDRESS,$/;"	e	enum:__anon137	file:
MIIADDRESS_FIAD	opencores_eth.c	/^    MIIADDRESS_FIAD = 0x1f,$/;"	e	enum:__anon142	file:
MIIADDRESS_FIAD_LBN	opencores_eth.c	/^    MIIADDRESS_FIAD_LBN = 0,$/;"	e	enum:__anon142	file:
MIIADDRESS_RGAD	opencores_eth.c	/^    MIIADDRESS_RGAD = 0x1f00,$/;"	e	enum:__anon142	file:
MIIADDRESS_RGAD_LBN	opencores_eth.c	/^    MIIADDRESS_RGAD_LBN = 8,$/;"	e	enum:__anon142	file:
MIICOMMAND	opencores_eth.c	/^    MIICOMMAND,$/;"	e	enum:__anon137	file:
MIICOMMAND_RSTAT	opencores_eth.c	/^    MIICOMMAND_RSTAT = 0x2,$/;"	e	enum:__anon141	file:
MIICOMMAND_SCANSTAT	opencores_eth.c	/^    MIICOMMAND_SCANSTAT = 0x1,$/;"	e	enum:__anon141	file:
MIICOMMAND_WCTRLDATA	opencores_eth.c	/^    MIICOMMAND_WCTRLDATA = 0x4,$/;"	e	enum:__anon141	file:
MIIMADD	fsl_etsec/registers.h	175;"	d
MIIMCFG	fsl_etsec/registers.h	173;"	d
MIIMCOM	fsl_etsec/registers.h	174;"	d
MIIMCOM_READ	fsl_etsec/registers.h	90;"	d
MIIMCOM_SCAN	fsl_etsec/registers.h	91;"	d
MIIMCON	fsl_etsec/registers.h	176;"	d
MIIMIND	fsl_etsec/registers.h	178;"	d
MIIMODER	opencores_eth.c	/^    MIIMODER,$/;"	e	enum:__anon137	file:
MIIMSTAT	fsl_etsec/registers.h	177;"	d
MIIM_CONTROL	fsl_etsec/miim.c	31;"	d	file:
MIIM_EXT_STATUS	fsl_etsec/miim.c	36;"	d	file:
MIIM_PHY_ID_1	fsl_etsec/miim.c	33;"	d	file:
MIIM_PHY_ID_2	fsl_etsec/miim.c	34;"	d	file:
MIIM_STATUS	fsl_etsec/miim.c	32;"	d	file:
MIIM_T2_STATUS	fsl_etsec/miim.c	35;"	d	file:
MIIRX_DATA	opencores_eth.c	/^    MIIRX_DATA,$/;"	e	enum:__anon137	file:
MIIRX_DATA_PRSD	opencores_eth.c	/^    MIIRX_DATA_PRSD = 0xffff,$/;"	e	enum:__anon144	file:
MIIRX_DATA_PRSD_LBN	opencores_eth.c	/^    MIIRX_DATA_PRSD_LBN = 0,$/;"	e	enum:__anon144	file:
MIISTATUS	opencores_eth.c	/^    MIISTATUS,$/;"	e	enum:__anon137	file:
MIISTATUS_LINKFAIL	opencores_eth.c	/^    MIISTATUS_LINKFAIL = 0x1,$/;"	e	enum:__anon145	file:
MIISTATUS_LINKFAIL_LBN	opencores_eth.c	/^    MIISTATUS_LINKFAIL_LBN = 0,$/;"	e	enum:__anon145	file:
MIITX_DATA	opencores_eth.c	/^    MIITX_DATA,$/;"	e	enum:__anon137	file:
MIITX_DATA_CTRLDATA	opencores_eth.c	/^    MIITX_DATA_CTRLDATA = 0xffff,$/;"	e	enum:__anon143	file:
MIITX_DATA_CTRLDATA_LBN	opencores_eth.c	/^    MIITX_DATA_CTRLDATA_LBN = 0,$/;"	e	enum:__anon143	file:
MII_CR_AUTO_NEG_EN	e1000_regs.h	549;"	d
MII_CR_COLL_TEST_ENABLE	e1000_regs.h	544;"	d
MII_CR_FULL_DUPLEX	e1000_regs.h	545;"	d
MII_CR_ISOLATE	e1000_regs.h	547;"	d
MII_CR_LOOPBACK	e1000_regs.h	551;"	d
MII_CR_POWER_DOWN	e1000_regs.h	548;"	d
MII_CR_RESET	e1000_regs.h	552;"	d
MII_CR_RESTART_AUTO_NEG	e1000_regs.h	546;"	d
MII_CR_SPEED_SELECT_LSB	e1000_regs.h	550;"	d
MII_CR_SPEED_SELECT_MSB	e1000_regs.h	543;"	d
MII_LPAR_LPACK	e1000_regs.h	572;"	d
MII_REG_MAX	opencores_eth.c	/^    MII_REG_MAX = 16,$/;"	e	enum:__anon136	file:
MII_SR_100T2_FD_CAPS	e1000_regs.h	564;"	d
MII_SR_100T2_FD_CAPS	fsl_etsec/etsec.h	89;"	d
MII_SR_100T2_HD_CAPS	e1000_regs.h	563;"	d
MII_SR_100T2_HD_CAPS	fsl_etsec/etsec.h	88;"	d
MII_SR_100T4_CAPS	e1000_regs.h	569;"	d
MII_SR_100T4_CAPS	fsl_etsec/etsec.h	94;"	d
MII_SR_100X_FD_CAPS	e1000_regs.h	568;"	d
MII_SR_100X_FD_CAPS	fsl_etsec/etsec.h	93;"	d
MII_SR_100X_HD_CAPS	e1000_regs.h	567;"	d
MII_SR_100X_HD_CAPS	fsl_etsec/etsec.h	92;"	d
MII_SR_10T_FD_CAPS	e1000_regs.h	566;"	d
MII_SR_10T_FD_CAPS	fsl_etsec/etsec.h	91;"	d
MII_SR_10T_HD_CAPS	e1000_regs.h	565;"	d
MII_SR_10T_HD_CAPS	fsl_etsec/etsec.h	90;"	d
MII_SR_AUTONEG_CAPS	e1000_regs.h	558;"	d
MII_SR_AUTONEG_CAPS	fsl_etsec/etsec.h	83;"	d
MII_SR_AUTONEG_COMPLETE	e1000_regs.h	560;"	d
MII_SR_AUTONEG_COMPLETE	fsl_etsec/etsec.h	85;"	d
MII_SR_EXTENDED_CAPS	e1000_regs.h	555;"	d
MII_SR_EXTENDED_CAPS	fsl_etsec/etsec.h	80;"	d
MII_SR_EXTENDED_STATUS	e1000_regs.h	562;"	d
MII_SR_EXTENDED_STATUS	fsl_etsec/etsec.h	87;"	d
MII_SR_JABBER_DETECT	e1000_regs.h	556;"	d
MII_SR_JABBER_DETECT	fsl_etsec/etsec.h	81;"	d
MII_SR_LINK_STATUS	e1000_regs.h	557;"	d
MII_SR_LINK_STATUS	fsl_etsec/etsec.h	82;"	d
MII_SR_PREAMBLE_SUPPRESS	e1000_regs.h	561;"	d
MII_SR_PREAMBLE_SUPPRESS	fsl_etsec/etsec.h	86;"	d
MII_SR_REMOTE_FAULT	e1000_regs.h	559;"	d
MII_SR_REMOTE_FAULT	fsl_etsec/etsec.h	84;"	d
MILKYMIST_MINIMAC2	milkymist-minimac2.c	98;"	d	file:
MINIMAC2_BUFFER_SIZE	milkymist-minimac2.c	83;"	d	file:
MINIMAC2_MTU	milkymist-minimac2.c	82;"	d	file:
MIN_BUF_SIZE	e1000.c	65;"	d	file:
MIN_BUF_SIZE	ne2000.c	256;"	d	file:
MIN_BUF_SIZE	pcnet.c	1143;"	d	file:
MIN_BUF_SIZE	rtl8139.c	782;"	d	file:
MIN_BUF_SIZE	vmxnet3.c	38;"	d	file:
MIPSNET_BUSY	mipsnet.c	10;"	d	file:
MIPSNET_DEV_ID	mipsnet.c	9;"	d	file:
MIPSNET_INTCTL_RXDONE	mipsnet.c	15;"	d	file:
MIPSNET_INTCTL_TESTBIT	mipsnet.c	16;"	d	file:
MIPSNET_INTCTL_TXDONE	mipsnet.c	14;"	d	file:
MIPSNET_INTERRUPT_INFO	mipsnet.c	17;"	d	file:
MIPSNET_INT_CTL	mipsnet.c	13;"	d	file:
MIPSNET_RX_DATA_BUFFER	mipsnet.c	18;"	d	file:
MIPSNET_RX_DATA_COUNT	mipsnet.c	11;"	d	file:
MIPSNET_TX_DATA_BUFFER	mipsnet.c	19;"	d	file:
MIPSNET_TX_DATA_COUNT	mipsnet.c	12;"	d	file:
MIPS_NET	mipsnet.c	24;"	d	file:
MIPSnetState	mipsnet.c	/^typedef struct MIPSnetState {$/;"	s	file:
MIPSnetState	mipsnet.c	/^} MIPSnetState;$/;"	t	typeref:struct:MIPSnetState	file:
MMFR_PHYADDR	mcf_fec.c	226;"	d	file:
MMFR_READ_OP	mcf_fec.c	225;"	d	file:
MMFR_REGNUM	mcf_fec.c	227;"	d	file:
MMFR_WRITE_OP	mcf_fec.c	224;"	d	file:
MOD2	rtl8139.c	74;"	d	file:
MODER	opencores_eth.c	/^    MODER,$/;"	e	enum:__anon137	file:
MODER_BRO	opencores_eth.c	/^    MODER_BRO = 0x8,$/;"	e	enum:__anon138	file:
MODER_HUGEN	opencores_eth.c	/^    MODER_HUGEN = 0x4000,$/;"	e	enum:__anon138	file:
MODER_IAM	opencores_eth.c	/^    MODER_IAM = 0x10,$/;"	e	enum:__anon138	file:
MODER_LOOPBCK	opencores_eth.c	/^    MODER_LOOPBCK = 0x80,$/;"	e	enum:__anon138	file:
MODER_PAD	opencores_eth.c	/^    MODER_PAD = 0x8000,$/;"	e	enum:__anon138	file:
MODER_PRO	opencores_eth.c	/^    MODER_PRO = 0x20,$/;"	e	enum:__anon138	file:
MODER_RECSMALL	opencores_eth.c	/^    MODER_RECSMALL = 0x10000,$/;"	e	enum:__anon138	file:
MODER_RST	opencores_eth.c	/^    MODER_RST = 0x800,$/;"	e	enum:__anon138	file:
MODER_RXEN	opencores_eth.c	/^    MODER_RXEN = 0x1,$/;"	e	enum:__anon138	file:
MODER_TXEN	opencores_eth.c	/^    MODER_TXEN = 0x2,$/;"	e	enum:__anon138	file:
MRBLR	fsl_etsec/registers.h	147;"	d
MULTICAST_FILTER_LEN	pcnet.c	667;"	d	file:
MediaStatus	rtl8139.c	/^    MediaStatus = 0x58,$/;"	e	enum:RTL8139_registers	file:
Mii	opencores_eth.c	/^typedef struct Mii {$/;"	s	file:
Mii	opencores_eth.c	/^} Mii;$/;"	t	typeref:struct:Mii	file:
MilkymistMinimac2MdioState	milkymist-minimac2.c	/^struct MilkymistMinimac2MdioState {$/;"	s	file:
MilkymistMinimac2MdioState	milkymist-minimac2.c	/^typedef struct MilkymistMinimac2MdioState MilkymistMinimac2MdioState;$/;"	t	typeref:struct:MilkymistMinimac2MdioState	file:
MilkymistMinimac2State	milkymist-minimac2.c	/^struct MilkymistMinimac2State {$/;"	s	file:
MilkymistMinimac2State	milkymist-minimac2.c	/^typedef struct MilkymistMinimac2State MilkymistMinimac2State;$/;"	t	typeref:struct:MilkymistMinimac2State	file:
MissPkt	rtl8139.c	/^    uint16_t   MissPkt;$/;"	m	struct:RTL8139TallyCounters	file:
MultiIntr	rtl8139.c	/^    MultiIntr = 0x5C,$/;"	e	enum:RTL8139_registers	file:
MultiIntr	rtl8139.c	/^    uint16_t MultiIntr;$/;"	m	struct:RTL8139State	file:
MultiIntrClear	rtl8139.c	/^    MultiIntrClear = 0xF000,$/;"	e	enum:ClearBitMasks	file:
NE2000State	ne2000.h	/^typedef struct NE2000State {$/;"	s
NE2000State	ne2000.h	/^} NE2000State;$/;"	t	typeref:struct:NE2000State
NE2000_MEM_SIZE	ne2000.h	7;"	d
NE2000_PMEM_END	ne2000.h	6;"	d
NE2000_PMEM_SIZE	ne2000.h	4;"	d
NE2000_PMEM_START	ne2000.h	5;"	d
NET_IP_ALIGN	xen_nic.c	228;"	d	file:
NET_MAX_FRAG_SG_LIST	net_tx_pkt.c	499;"	d	file:
NET_RX_PKT_H	net_rx_pkt.h	19;"	d
NET_TX_PKT_FRAGMENT_HEADER_NUM	net_tx_pkt.c	/^    NET_TX_PKT_FRAGMENT_HEADER_NUM$/;"	e	enum:__anon104	file:
NET_TX_PKT_FRAGMENT_L2_HDR_POS	net_tx_pkt.c	/^    NET_TX_PKT_FRAGMENT_L2_HDR_POS = 0,$/;"	e	enum:__anon104	file:
NET_TX_PKT_FRAGMENT_L3_HDR_POS	net_tx_pkt.c	/^    NET_TX_PKT_FRAGMENT_L3_HDR_POS,$/;"	e	enum:__anon104	file:
NET_TX_PKT_H	net_tx_pkt.h	19;"	d
NET_TX_PKT_L2HDR_FRAG	net_tx_pkt.c	/^    NET_TX_PKT_L2HDR_FRAG,$/;"	e	enum:__anon103	file:
NET_TX_PKT_L3HDR_FRAG	net_tx_pkt.c	/^    NET_TX_PKT_L3HDR_FRAG,$/;"	e	enum:__anon103	file:
NET_TX_PKT_PL_START_FRAG	net_tx_pkt.c	/^    NET_TX_PKT_PL_START_FRAG$/;"	e	enum:__anon103	file:
NET_TX_PKT_VHDR_FRAG	net_tx_pkt.c	/^    NET_TX_PKT_VHDR_FRAG = 0,$/;"	e	enum:__anon103	file:
NPHYWRITEOPS	e1000.c	/^enum { NPHYWRITEOPS = ARRAY_SIZE(phyreg_writeops) };$/;"	e	enum:__anon90	file:
NREADOPS	e1000.c	/^enum { NREADOPS = ARRAY_SIZE(macreg_readops) };$/;"	e	enum:__anon92	file:
NUM_PACKETS	smc91c111.c	18;"	d	file:
NWRITEOPS	e1000.c	/^enum { NWRITEOPS = ARRAY_SIZE(macreg_writeops) };$/;"	e	enum:__anon93	file:
NWayAdvert	rtl8139.c	/^    NWayAdvert = 0x66,$/;"	e	enum:RTL8139_registers	file:
NWayAdvert	rtl8139.c	/^    uint16_t NWayAdvert;$/;"	m	struct:RTL8139State	file:
NWayExpansion	rtl8139.c	/^    NWayExpansion = 0x6A,$/;"	e	enum:RTL8139_registers	file:
NWayExpansion	rtl8139.c	/^    uint16_t NWayExpansion;$/;"	m	struct:RTL8139State	file:
NWayLPAR	rtl8139.c	/^    NWayLPAR = 0x68,$/;"	e	enum:RTL8139_registers	file:
NWayLPAR	rtl8139.c	/^    uint16_t NWayLPAR;$/;"	m	struct:RTL8139State	file:
NetPktRssIpV4	net_rx_pkt.h	/^    NetPktRssIpV4,$/;"	e	enum:__anon1
NetPktRssIpV4Tcp	net_rx_pkt.h	/^    NetPktRssIpV4Tcp,$/;"	e	enum:__anon1
NetPktRssIpV6	net_rx_pkt.h	/^    NetPktRssIpV6,$/;"	e	enum:__anon1
NetPktRssIpV6Ex	net_rx_pkt.h	/^    NetPktRssIpV6Ex$/;"	e	enum:__anon1
NetPktRssIpV6Tcp	net_rx_pkt.h	/^    NetPktRssIpV6Tcp,$/;"	e	enum:__anon1
NetRxPkt	net_rx_pkt.c	/^struct NetRxPkt {$/;"	s	file:
NetRxPktRssType	net_rx_pkt.h	/^} NetRxPktRssType;$/;"	t	typeref:enum:__anon1
NetTxPkt	net_tx_pkt.c	/^struct NetTxPkt {$/;"	s	file:
OPC	etraxfs_eth.c	/^        OPC,$/;"	e	enum:qemu_mdio::__anon118	file:
OPC	xilinx_axienet.c	/^        OPC,$/;"	e	enum:MDIOBus::__anon126	file:
OPEN_ETH	opencores_eth.c	272;"	d	file:
OTHER	eepro100.c	77;"	d	file:
OfDpa	rocker/rocker_of_dpa.c	/^} OfDpa;$/;"	t	typeref:struct:of_dpa	file:
OfDpaFlow	rocker/rocker_of_dpa.c	/^} OfDpaFlow;$/;"	t	typeref:struct:of_dpa_flow	file:
OfDpaFlowAction	rocker/rocker_of_dpa.c	/^} OfDpaFlowAction;$/;"	t	typeref:struct:of_dpa_flow_action	file:
OfDpaFlowContext	rocker/rocker_of_dpa.c	/^} OfDpaFlowContext;$/;"	t	typeref:struct:of_dpa_flow_context	file:
OfDpaFlowKey	rocker/rocker_of_dpa.c	/^} OfDpaFlowKey;$/;"	t	typeref:struct:of_dpa_flow_key	file:
OfDpaFlowMatch	rocker/rocker_of_dpa.c	/^} OfDpaFlowMatch;$/;"	t	typeref:struct:of_dpa_flow_match	file:
OfDpaFlowPktFields	rocker/rocker_of_dpa.c	/^} OfDpaFlowPktFields;$/;"	t	typeref:struct:of_dpa_flow_pkt_fields	file:
OfDpaFlowTblOps	rocker/rocker_of_dpa.c	/^} OfDpaFlowTblOps;$/;"	t	typeref:struct:of_dpa_flow_tbl_ops	file:
OfDpaGroup	rocker/rocker_of_dpa.c	/^} OfDpaGroup;$/;"	t	typeref:struct:of_dpa_group	file:
OpenEthState	opencores_eth.c	/^typedef struct OpenEthState {$/;"	s	file:
OpenEthState	opencores_eth.c	/^} OpenEthState;$/;"	t	typeref:struct:OpenEthState	file:
PACKETLEN	opencores_eth.c	/^    PACKETLEN,$/;"	e	enum:__anon137	file:
PACKETLEN_MAXFL	opencores_eth.c	/^    PACKETLEN_MAXFL = 0xffff,$/;"	e	enum:__anon140	file:
PACKETLEN_MAXFL_LBN	opencores_eth.c	/^    PACKETLEN_MAXFL_LBN = 0,$/;"	e	enum:__anon140	file:
PACKETLEN_MINFL	opencores_eth.c	/^    PACKETLEN_MINFL = 0xffff0000,$/;"	e	enum:__anon140	file:
PACKETLEN_MINFL_LBN	opencores_eth.c	/^    PACKETLEN_MINFL_LBN = 16,$/;"	e	enum:__anon140	file:
PARA78	rtl8139.c	/^    PARA78 = 0x78,$/;"	e	enum:RTL8139_registers	file:
PARA7c	rtl8139.c	/^    PARA7c = 0x7c,        \/* Magic transceiver parameter register. *\/$/;"	e	enum:RTL8139_registers	file:
PCIErr	rtl8139.c	/^    PCIErr = 0x8000,$/;"	e	enum:IntrStatusBits	file:
PCINE2000State	ne2000.c	/^typedef struct PCINE2000State {$/;"	s	file:
PCINE2000State	ne2000.c	/^} PCINE2000State;$/;"	t	typeref:struct:PCINE2000State	file:
PCIPCNetState	pcnet-pci.c	/^} PCIPCNetState;$/;"	t	typeref:struct:__anon121	file:
PCIRevisionID	rtl8139.c	/^    PCIRevisionID = 0x5E,$/;"	e	enum:RTL8139_registers	file:
PCI_DEVICE_ID_VMWARE_VMXNET3_REVISION	vmxnet3.c	36;"	d	file:
PCI_FLASH_SIZE	eepro100.c	107;"	d	file:
PCI_IO_SIZE	eepro100.c	106;"	d	file:
PCI_MEM_SIZE	eepro100.c	105;"	d	file:
PCI_PCNET	pcnet-pci.c	51;"	d	file:
PCI_PERIOD	rtl8139.c	68;"	d	file:
PCNET_IOPORT_SIZE	pcnet.h	4;"	d
PCNET_LOOPTEST_CRC	pcnet.h	7;"	d
PCNET_LOOPTEST_NOCRC	pcnet.h	8;"	d
PCNET_PNPMMIO_SIZE	pcnet.h	5;"	d
PCNET_RECV_STORE	pcnet.c	1253;"	d	file:
PCNET_RECV_STORE	pcnet.c	1287;"	d	file:
PCNetState	pcnet.h	/^typedef struct PCNetState_st PCNetState;$/;"	t	typeref:struct:PCNetState_st
PCNetState_st	pcnet.h	/^struct PCNetState_st {$/;"	s
PCSTimeout	rtl8139.c	/^    PCSTimeout = 0x4000,$/;"	e	enum:IntrStatusBits	file:
PHY	xilinx_axienet.c	/^struct PHY {$/;"	s	file:
PHYSADDR	pcnet.c	258;"	d	file:
PHY_1000T_CTRL	e1000_regs.h	487;"	d
PHY_1000T_SKEW	e1000_regs.h	517;"	d
PHY_1000T_STATUS	e1000_regs.h	488;"	d
PHY_1000T_SWAP	e1000_regs.h	518;"	d
PHY_ANYPAGE	e1000e_core.h	/^       PHY_ANYPAGE = BIT(2) };$/;"	e	enum:__anon95
PHY_AUTONEG_ADV	e1000_regs.h	482;"	d
PHY_AUTONEG_EXP	e1000_regs.h	484;"	d
PHY_BIAS_1	e1000_regs.h	501;"	d
PHY_BIAS_2	e1000_regs.h	502;"	d
PHY_COPPER_CTRL1	e1000_regs.h	492;"	d
PHY_COPPER_CTRL2	e1000_regs.h	497;"	d
PHY_COPPER_CTRL3	e1000_regs.h	496;"	d
PHY_COPPER_INT_ENABLE	e1000_regs.h	494;"	d
PHY_COPPER_STAT1	e1000_regs.h	493;"	d
PHY_COPPER_STAT2	e1000_regs.h	495;"	d
PHY_CRC_COUNTERS	e1000_regs.h	521;"	d
PHY_CTRL	e1000_regs.h	478;"	d
PHY_EXT_STATUS	e1000_regs.h	489;"	d
PHY_ID1	e1000_regs.h	480;"	d
PHY_ID2	e1000_regs.h	481;"	d
PHY_INT	lan9118.c	77;"	d	file:
PHY_INT_AUTONEG_COMPLETE	imx_fec.c	216;"	d	file:
PHY_INT_AUTONEG_COMPLETE	lan9118.c	131;"	d	file:
PHY_INT_AUTONEG_LP	imx_fec.c	219;"	d	file:
PHY_INT_AUTONEG_LP	lan9118.c	134;"	d	file:
PHY_INT_AUTONEG_PAGE	imx_fec.c	221;"	d	file:
PHY_INT_AUTONEG_PAGE	lan9118.c	136;"	d	file:
PHY_INT_DOWN	imx_fec.c	218;"	d	file:
PHY_INT_DOWN	lan9118.c	133;"	d	file:
PHY_INT_ENERGYON	imx_fec.c	215;"	d	file:
PHY_INT_ENERGYON	lan9118.c	130;"	d	file:
PHY_INT_FAULT	imx_fec.c	217;"	d	file:
PHY_INT_FAULT	lan9118.c	132;"	d	file:
PHY_INT_PARFAULT	imx_fec.c	220;"	d	file:
PHY_INT_PARFAULT	lan9118.c	135;"	d	file:
PHY_LED_03_FUNC_CTRL1	e1000_regs.h	511;"	d
PHY_LED_03_POL_CTRL	e1000_regs.h	512;"	d
PHY_LED_45_CTRL	e1000_regs.h	514;"	d
PHY_LED_TIMER_CTRL	e1000_regs.h	513;"	d
PHY_LP_ABILITY	e1000_regs.h	483;"	d
PHY_LP_NEXT_PAGE	e1000_regs.h	486;"	d
PHY_MAC_CTRL1	e1000_regs.h	505;"	d
PHY_MAC_CTRL2	e1000_regs.h	508;"	d
PHY_MAC_INT_ENABLE	e1000_regs.h	506;"	d
PHY_MAC_STAT	e1000_regs.h	507;"	d
PHY_NEXT_PAGE_TX	e1000_regs.h	485;"	d
PHY_OEM_BITS	e1000_regs.h	500;"	d
PHY_PAGE	e1000_regs.h	499;"	d
PHY_PAGE_RW_MASK	e1000_regs.h	523;"	d
PHY_PRINTF	imx_fec.c	50;"	d	file:
PHY_R	e1000.c	/^enum { PHY_R = 1, PHY_W = 2, PHY_RW = PHY_R | PHY_W };$/;"	e	enum:__anon91	file:
PHY_R	e1000e_core.h	/^enum { PHY_R = BIT(0),$/;"	e	enum:__anon95
PHY_REG_1000BTSTAT	cadence_gem.c	247;"	d	file:
PHY_REG_100BTCTRL	cadence_gem.c	246;"	d	file:
PHY_REG_ANEGADV	cadence_gem.c	241;"	d	file:
PHY_REG_ANEGEXP	cadence_gem.c	243;"	d	file:
PHY_REG_CABLE_DIAG	cadence_gem.c	260;"	d	file:
PHY_REG_CONTROL	cadence_gem.c	237;"	d	file:
PHY_REG_CONTROL_ANEG	cadence_gem.c	264;"	d	file:
PHY_REG_CONTROL_LOOP	cadence_gem.c	263;"	d	file:
PHY_REG_CONTROL_RST	cadence_gem.c	262;"	d	file:
PHY_REG_EACD	cadence_gem.c	255;"	d	file:
PHY_REG_EXTSTAT	cadence_gem.c	248;"	d	file:
PHY_REG_EXT_PHYSPCFC_CTL	cadence_gem.c	253;"	d	file:
PHY_REG_EXT_PHYSPCFC_CTL2	cadence_gem.c	258;"	d	file:
PHY_REG_EXT_PHYSPCFC_ST	cadence_gem.c	259;"	d	file:
PHY_REG_INT_EN	cadence_gem.c	251;"	d	file:
PHY_REG_INT_ST	cadence_gem.c	252;"	d	file:
PHY_REG_INT_ST_ANEGCMPL	cadence_gem.c	269;"	d	file:
PHY_REG_INT_ST_ENERGY	cadence_gem.c	271;"	d	file:
PHY_REG_INT_ST_LINKC	cadence_gem.c	270;"	d	file:
PHY_REG_LED	cadence_gem.c	256;"	d	file:
PHY_REG_LED_OVRD	cadence_gem.c	257;"	d	file:
PHY_REG_LINKPABIL	cadence_gem.c	242;"	d	file:
PHY_REG_LINKPNEXTP	cadence_gem.c	245;"	d	file:
PHY_REG_NEXTP	cadence_gem.c	244;"	d	file:
PHY_REG_PHYID1	cadence_gem.c	239;"	d	file:
PHY_REG_PHYID2	cadence_gem.c	240;"	d	file:
PHY_REG_PHYSPCFC_CTL	cadence_gem.c	249;"	d	file:
PHY_REG_PHYSPCFC_ST	cadence_gem.c	250;"	d	file:
PHY_REG_RXERR	cadence_gem.c	254;"	d	file:
PHY_REG_STATUS	cadence_gem.c	238;"	d	file:
PHY_REG_STATUS_ANEGCMPL	cadence_gem.c	267;"	d	file:
PHY_REG_STATUS_LINK	cadence_gem.c	266;"	d	file:
PHY_RW	e1000.c	/^enum { PHY_R = 1, PHY_W = 2, PHY_RW = PHY_R | PHY_W };$/;"	e	enum:__anon91	file:
PHY_RW	e1000e_core.h	/^       PHY_RW = PHY_R | PHY_W,$/;"	e	enum:__anon95
PHY_RX_ERR_CNTR	e1000_regs.h	498;"	d
PHY_STATUS	e1000_regs.h	479;"	d
PHY_W	e1000.c	/^enum { PHY_R = 1, PHY_W = 2, PHY_RW = PHY_R | PHY_W };$/;"	e	enum:__anon91	file:
PHY_W	e1000e_core.h	/^       PHY_W = BIT(1),$/;"	e	enum:__anon95
PME_INT	lan9118.c	78;"	d	file:
PNPMMIO_SIZE	e1000.c	64;"	d	file:
POLYNOMIAL	eepro100.c	325;"	d	file:
PORT_DUMP	eepro100.c	1297;"	d	file:
PORT_SELECTION_MASK	eepro100.c	1298;"	d	file:
PORT_SELECTIVE_RESET	eepro100.c	1296;"	d	file:
PORT_SELFTEST	eepro100.c	1295;"	d	file:
PORT_SOFTWARE_RESET	eepro100.c	1294;"	d	file:
PPST_LINKSTATUS	xilinx_axienet.c	/^    PPST_LINKSTATUS = (1 << 0),$/;"	e	enum:__anon129	file:
PPST_PHY_LINKSTATUS	xilinx_axienet.c	/^    PPST_PHY_LINKSTATUS = (1 << 7),$/;"	e	enum:__anon129	file:
PREAMBLE	etraxfs_eth.c	/^        PREAMBLE,$/;"	e	enum:qemu_mdio::__anon118	file:
PREAMBLE	xilinx_axienet.c	/^        PREAMBLE,$/;"	e	enum:MDIOBus::__anon126	file:
PRINT_PKTHDR	pcnet.c	655;"	d	file:
PRINT_RMD	pcnet.c	413;"	d	file:
PRINT_TMD	pcnet.c	385;"	d	file:
PS_PAGE_BUFFERS	e1000_regs.h	1060;"	d
PTV	fsl_etsec/registers.h	105;"	d
PWRDN	rtl8139.c	/^    PWRDN = (1 << 0),    \/* only on 8139, 8139A *\/$/;"	e	enum:Config1Bits	file:
QEMU_VMXNET3_H	vmxnet3.h	19;"	d
QEMU_VMXNET_DEBUG_H	vmxnet_debug.h	19;"	d
RAF_BCAST_REJ	xilinx_axienet.c	/^    RAF_BCAST_REJ = (1 << 2),$/;"	e	enum:__anon127	file:
RAF_EMCF_EN	xilinx_axienet.c	/^    RAF_EMCF_EN = (1 << 12),$/;"	e	enum:__anon127	file:
RAF_MCAST_REJ	xilinx_axienet.c	/^    RAF_MCAST_REJ = (1 << 1),$/;"	e	enum:__anon127	file:
RAF_NEWFUNC_EN	xilinx_axienet.c	/^    RAF_NEWFUNC_EN = (1 << 11)$/;"	e	enum:__anon127	file:
RALN	fsl_etsec/registers.h	227;"	d
RBASE0	fsl_etsec/registers.h	158;"	d
RBASE1	fsl_etsec/registers.h	159;"	d
RBASE2	fsl_etsec/registers.h	160;"	d
RBASE3	fsl_etsec/registers.h	161;"	d
RBASE4	fsl_etsec/registers.h	162;"	d
RBASE5	fsl_etsec/registers.h	163;"	d
RBASE6	fsl_etsec/registers.h	164;"	d
RBASE7	fsl_etsec/registers.h	165;"	d
RBASEH	fsl_etsec/registers.h	157;"	d
RBCA	fsl_etsec/registers.h	223;"	d
RBDBPH	fsl_etsec/registers.h	148;"	d
RBIFX	fsl_etsec/registers.h	143;"	d
RBPTR0	fsl_etsec/registers.h	149;"	d
RBPTR1	fsl_etsec/registers.h	150;"	d
RBPTR2	fsl_etsec/registers.h	151;"	d
RBPTR3	fsl_etsec/registers.h	152;"	d
RBPTR4	fsl_etsec/registers.h	153;"	d
RBPTR5	fsl_etsec/registers.h	154;"	d
RBPTR6	fsl_etsec/registers.h	155;"	d
RBPTR7	fsl_etsec/registers.h	156;"	d
RBYT	fsl_etsec/registers.h	219;"	d
RCDE	fsl_etsec/registers.h	229;"	d
RCR_RXEN	smc91c111.c	85;"	d	file:
RCR_SOFT_RST	smc91c111.c	83;"	d	file:
RCR_STRIP_CRC	smc91c111.c	84;"	d	file:
RCSE	fsl_etsec/registers.h	230;"	d
RCTRL	fsl_etsec/registers.h	139;"	d
RCTRL_PRSDEP_MASK	fsl_etsec/registers.h	93;"	d
RCTRL_PRSDEP_OFFSET	fsl_etsec/registers.h	94;"	d
RCTRL_RSF	fsl_etsec/registers.h	95;"	d
RCW1_FCS	xilinx_axienet.c	/^    RCW1_FCS  = (1 << 29),$/;"	e	enum:__anon130	file:
RCW1_JUM	xilinx_axienet.c	/^    RCW1_JUM  = (1 << 30),$/;"	e	enum:__anon130	file:
RCW1_RST	xilinx_axienet.c	/^    RCW1_RST  = (1 << 31),$/;"	e	enum:__anon130	file:
RCW1_RX	xilinx_axienet.c	/^    RCW1_RX   = (1 << 28),$/;"	e	enum:__anon130	file:
RCW1_VLAN	xilinx_axienet.c	/^    RCW1_VLAN = (1 << 27),$/;"	e	enum:__anon130	file:
RDFL_INT	lan9118.c	89;"	d	file:
RDRP	fsl_etsec/registers.h	235;"	d
REG_MAX	opencores_eth.c	/^    REG_MAX,$/;"	e	enum:__anon137	file:
REQ	etraxfs_eth.c	/^        REQ,$/;"	e	enum:qemu_mdio::__anon118	file:
REQ	xilinx_axienet.c	/^        REQ,$/;"	e	enum:MDIOBus::__anon126	file:
RESERVED_INT	lan9118.c	95;"	d	file:
RFBPTR0	fsl_etsec/registers.h	286;"	d
RFBPTR1	fsl_etsec/registers.h	287;"	d
RFBPTR2	fsl_etsec/registers.h	288;"	d
RFBPTR3	fsl_etsec/registers.h	289;"	d
RFBPTR4	fsl_etsec/registers.h	290;"	d
RFBPTR5	fsl_etsec/registers.h	291;"	d
RFBPTR6	fsl_etsec/registers.h	292;"	d
RFBPTR7	fsl_etsec/registers.h	293;"	d
RFCS	fsl_etsec/registers.h	221;"	d
RFLR	fsl_etsec/registers.h	228;"	d
RFRG	fsl_etsec/registers.h	233;"	d
RING_DEBUG	fsl_etsec/rings.c	40;"	d	file:
RJBR	fsl_etsec/registers.h	234;"	d
RMCA	fsl_etsec/registers.h	222;"	d
RMDLOAD	pcnet.c	576;"	d	file:
RMDL_BCNT_MASK	pcnet.c	339;"	d	file:
RMDL_BCNT_SH	pcnet.c	340;"	d	file:
RMDL_ONES_MASK	pcnet.c	341;"	d	file:
RMDL_ONES_SH	pcnet.c	342;"	d	file:
RMDM_MCNT_MASK	pcnet.c	369;"	d	file:
RMDM_MCNT_SH	pcnet.c	370;"	d	file:
RMDM_RCC_MASK	pcnet.c	375;"	d	file:
RMDM_RCC_SH	pcnet.c	376;"	d	file:
RMDM_RPC_MASK	pcnet.c	373;"	d	file:
RMDM_RPC_SH	pcnet.c	374;"	d	file:
RMDM_ZEROS_MASK	pcnet.c	371;"	d	file:
RMDM_ZEROS_SH	pcnet.c	372;"	d	file:
RMDSTORE	pcnet.c	578;"	d	file:
RMDS_BAM_MASK	pcnet.c	344;"	d	file:
RMDS_BAM_SH	pcnet.c	345;"	d	file:
RMDS_BPE_MASK	pcnet.c	350;"	d	file:
RMDS_BPE_SH	pcnet.c	351;"	d	file:
RMDS_BUFF_MASK	pcnet.c	356;"	d	file:
RMDS_BUFF_SH	pcnet.c	357;"	d	file:
RMDS_CRC_MASK	pcnet.c	358;"	d	file:
RMDS_CRC_SH	pcnet.c	359;"	d	file:
RMDS_ENP_MASK	pcnet.c	352;"	d	file:
RMDS_ENP_SH	pcnet.c	353;"	d	file:
RMDS_ERR_MASK	pcnet.c	364;"	d	file:
RMDS_ERR_SH	pcnet.c	365;"	d	file:
RMDS_FRAM_MASK	pcnet.c	362;"	d	file:
RMDS_FRAM_SH	pcnet.c	363;"	d	file:
RMDS_LFAM_MASK	pcnet.c	346;"	d	file:
RMDS_LFAM_SH	pcnet.c	347;"	d	file:
RMDS_OFLO_MASK	pcnet.c	360;"	d	file:
RMDS_OFLO_SH	pcnet.c	361;"	d	file:
RMDS_OWN_MASK	pcnet.c	366;"	d	file:
RMDS_OWN_SH	pcnet.c	367;"	d	file:
RMDS_PAM_MASK	pcnet.c	348;"	d	file:
RMDS_PAM_SH	pcnet.c	349;"	d	file:
RMDS_STP_MASK	pcnet.c	354;"	d	file:
RMDS_STP_SH	pcnet.c	355;"	d	file:
ROCKER	rocker/rocker.c	72;"	d	file:
ROCKER_BOGUS_REG0	rocker/rocker_hw.h	66;"	d
ROCKER_BOGUS_REG1	rocker/rocker_hw.h	67;"	d
ROCKER_BOGUS_REG2	rocker/rocker_hw.h	68;"	d
ROCKER_BOGUS_REG3	rocker/rocker_hw.h	69;"	d
ROCKER_CONTROL	rocker/rocker_hw.h	482;"	d
ROCKER_CONTROL_RESET	rocker/rocker_hw.h	491;"	d
ROCKER_DESC_H	rocker/rocker_desc.h	18;"	d
ROCKER_DMA_DESC_ADDR_OFFSET	rocker/rocker_hw.h	96;"	d
ROCKER_DMA_DESC_BASE	rocker/rocker_hw.h	91;"	d
ROCKER_DMA_DESC_CREDITS_OFFSET	rocker/rocker_hw.h	101;"	d
ROCKER_DMA_DESC_CTRL_OFFSET	rocker/rocker_hw.h	100;"	d
ROCKER_DMA_DESC_CTRL_RESET	rocker/rocker_hw.h	107;"	d
ROCKER_DMA_DESC_HEAD_OFFSET	rocker/rocker_hw.h	98;"	d
ROCKER_DMA_DESC_MASK	rocker/rocker_hw.h	93;"	d
ROCKER_DMA_DESC_RSVD_OFFSET	rocker/rocker_hw.h	102;"	d
ROCKER_DMA_DESC_SIZE	rocker/rocker_hw.h	92;"	d
ROCKER_DMA_DESC_SIZE_OFFSET	rocker/rocker_hw.h	97;"	d
ROCKER_DMA_DESC_TAIL_OFFSET	rocker/rocker_hw.h	99;"	d
ROCKER_DMA_DESC_TOTAL_SIZE	rocker/rocker_hw.h	94;"	d
ROCKER_EEXIST	rocker/rocker_hw.h	/^    ROCKER_EEXIST = 17,$/;"	e	enum:__anon38
ROCKER_EINVAL	rocker/rocker_hw.h	/^    ROCKER_EINVAL = 22,$/;"	e	enum:__anon38
ROCKER_EMSGSIZE	rocker/rocker_hw.h	/^    ROCKER_EMSGSIZE = 90,$/;"	e	enum:__anon38
ROCKER_ENOBUFS	rocker/rocker_hw.h	/^    ROCKER_ENOBUFS = 105,$/;"	e	enum:__anon38
ROCKER_ENOENT	rocker/rocker_hw.h	/^    ROCKER_ENOENT = 2,$/;"	e	enum:__anon38
ROCKER_ENOMEM	rocker/rocker_hw.h	/^    ROCKER_ENOMEM = 12,$/;"	e	enum:__anon38
ROCKER_ENOTSUP	rocker/rocker_hw.h	/^    ROCKER_ENOTSUP = 95,$/;"	e	enum:__anon38
ROCKER_ENXIO	rocker/rocker_hw.h	/^    ROCKER_ENXIO = 6,$/;"	e	enum:__anon38
ROCKER_FP_H	rocker/rocker_fp.h	18;"	d
ROCKER_FP_PORTS_MAX	rocker/rocker_fp.h	23;"	d
ROCKER_GROUP_INDEX_GET	rocker/rocker_hw.h	451;"	d
ROCKER_GROUP_INDEX_LONG_GET	rocker/rocker_hw.h	455;"	d
ROCKER_GROUP_INDEX_LONG_MASK	rocker/rocker_hw.h	437;"	d
ROCKER_GROUP_INDEX_LONG_SET	rocker/rocker_hw.h	458;"	d
ROCKER_GROUP_INDEX_LONG_SHIFT	rocker/rocker_hw.h	436;"	d
ROCKER_GROUP_INDEX_MASK	rocker/rocker_hw.h	435;"	d
ROCKER_GROUP_INDEX_SET	rocker/rocker_hw.h	453;"	d
ROCKER_GROUP_INDEX_SHIFT	rocker/rocker_hw.h	434;"	d
ROCKER_GROUP_L2_FLOOD	rocker/rocker_hw.h	472;"	d
ROCKER_GROUP_L2_INTERFACE	rocker/rocker_hw.h	463;"	d
ROCKER_GROUP_L2_MCAST	rocker/rocker_hw.h	469;"	d
ROCKER_GROUP_L2_REWRITE	rocker/rocker_hw.h	466;"	d
ROCKER_GROUP_L3_UNICAST	rocker/rocker_hw.h	475;"	d
ROCKER_GROUP_NONE	rocker/rocker_hw.h	462;"	d
ROCKER_GROUP_PORT_GET	rocker/rocker_hw.h	447;"	d
ROCKER_GROUP_PORT_MASK	rocker/rocker_hw.h	429;"	d
ROCKER_GROUP_PORT_SET	rocker/rocker_hw.h	449;"	d
ROCKER_GROUP_PORT_SHIFT	rocker/rocker_hw.h	428;"	d
ROCKER_GROUP_SUBTYPE_MASK	rocker/rocker_hw.h	433;"	d
ROCKER_GROUP_SUBTYPE_SHIFT	rocker/rocker_hw.h	432;"	d
ROCKER_GROUP_TUNNEL_ID_MASK	rocker/rocker_hw.h	431;"	d
ROCKER_GROUP_TUNNEL_ID_SHIFT	rocker/rocker_hw.h	430;"	d
ROCKER_GROUP_TYPE_GET	rocker/rocker_hw.h	439;"	d
ROCKER_GROUP_TYPE_MASK	rocker/rocker_hw.h	425;"	d
ROCKER_GROUP_TYPE_SET	rocker/rocker_hw.h	441;"	d
ROCKER_GROUP_TYPE_SHIFT	rocker/rocker_hw.h	424;"	d
ROCKER_GROUP_VLAN_GET	rocker/rocker_hw.h	443;"	d
ROCKER_GROUP_VLAN_ID_MASK	rocker/rocker_hw.h	427;"	d
ROCKER_GROUP_VLAN_ID_SHIFT	rocker/rocker_hw.h	426;"	d
ROCKER_GROUP_VLAN_SET	rocker/rocker_hw.h	445;"	d
ROCKER_H	rocker/rocker.h	20;"	d
ROCKER_HW_H	rocker/rocker_hw.h	10;"	d
ROCKER_IFNAMSIZ	rocker/rocker.c	1373;"	d	file:
ROCKER_MSIX_VEC_CMD	rocker/rocker_hw.h	/^    ROCKER_MSIX_VEC_CMD,$/;"	e	enum:__anon39
ROCKER_MSIX_VEC_COUNT	rocker/rocker_hw.h	59;"	d
ROCKER_MSIX_VEC_EVENT	rocker/rocker_hw.h	/^    ROCKER_MSIX_VEC_EVENT,$/;"	e	enum:__anon39
ROCKER_MSIX_VEC_RESERVED0	rocker/rocker_hw.h	/^    ROCKER_MSIX_VEC_RESERVED0,$/;"	e	enum:__anon39
ROCKER_MSIX_VEC_RX	rocker/rocker_hw.h	57;"	d
ROCKER_MSIX_VEC_TEST	rocker/rocker_hw.h	/^    ROCKER_MSIX_VEC_TEST,$/;"	e	enum:__anon39
ROCKER_MSIX_VEC_TX	rocker/rocker_hw.h	55;"	d
ROCKER_OF_DPA_GROUP_TYPE_L2_FLOOD	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_GROUP_TYPE_L2_FLOOD,$/;"	e	enum:rocker_of_dpa_group_type
ROCKER_OF_DPA_GROUP_TYPE_L2_INTERFACE	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_GROUP_TYPE_L2_INTERFACE = 0,$/;"	e	enum:rocker_of_dpa_group_type
ROCKER_OF_DPA_GROUP_TYPE_L2_MCAST	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_GROUP_TYPE_L2_MCAST,$/;"	e	enum:rocker_of_dpa_group_type
ROCKER_OF_DPA_GROUP_TYPE_L2_OVERLAY	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_GROUP_TYPE_L2_OVERLAY,$/;"	e	enum:rocker_of_dpa_group_type
ROCKER_OF_DPA_GROUP_TYPE_L2_REWRITE	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_GROUP_TYPE_L2_REWRITE,$/;"	e	enum:rocker_of_dpa_group_type
ROCKER_OF_DPA_GROUP_TYPE_L3_ECMP	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_GROUP_TYPE_L3_ECMP,$/;"	e	enum:rocker_of_dpa_group_type
ROCKER_OF_DPA_GROUP_TYPE_L3_INTERFACE	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_GROUP_TYPE_L3_INTERFACE,$/;"	e	enum:rocker_of_dpa_group_type
ROCKER_OF_DPA_GROUP_TYPE_L3_MCAST	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_GROUP_TYPE_L3_MCAST,$/;"	e	enum:rocker_of_dpa_group_type
ROCKER_OF_DPA_GROUP_TYPE_L3_UCAST	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_GROUP_TYPE_L3_UCAST,$/;"	e	enum:rocker_of_dpa_group_type
ROCKER_OF_DPA_H	rocker/rocker_of_dpa.h	18;"	d
ROCKER_OF_DPA_OVERLAY_TYPE_FLOOD_MCAST	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_OVERLAY_TYPE_FLOOD_MCAST,$/;"	e	enum:rocker_of_dpa_overlay_type
ROCKER_OF_DPA_OVERLAY_TYPE_FLOOD_UCAST	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_OVERLAY_TYPE_FLOOD_UCAST = 0,$/;"	e	enum:rocker_of_dpa_overlay_type
ROCKER_OF_DPA_OVERLAY_TYPE_MCAST_MCAST	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_OVERLAY_TYPE_MCAST_MCAST,$/;"	e	enum:rocker_of_dpa_overlay_type
ROCKER_OF_DPA_OVERLAY_TYPE_MCAST_UCAST	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_OVERLAY_TYPE_MCAST_UCAST,$/;"	e	enum:rocker_of_dpa_overlay_type
ROCKER_OF_DPA_TABLE_ID_ACL_POLICY	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_TABLE_ID_ACL_POLICY = 60,$/;"	e	enum:rocker_of_dpa_table_id
ROCKER_OF_DPA_TABLE_ID_BRIDGING	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_TABLE_ID_BRIDGING = 50,$/;"	e	enum:rocker_of_dpa_table_id
ROCKER_OF_DPA_TABLE_ID_INGRESS_PORT	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_TABLE_ID_INGRESS_PORT = 0,$/;"	e	enum:rocker_of_dpa_table_id
ROCKER_OF_DPA_TABLE_ID_MULTICAST_ROUTING	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_TABLE_ID_MULTICAST_ROUTING = 40,$/;"	e	enum:rocker_of_dpa_table_id
ROCKER_OF_DPA_TABLE_ID_TERMINATION_MAC	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_TABLE_ID_TERMINATION_MAC = 20,$/;"	e	enum:rocker_of_dpa_table_id
ROCKER_OF_DPA_TABLE_ID_UNICAST_ROUTING	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_TABLE_ID_UNICAST_ROUTING = 30,$/;"	e	enum:rocker_of_dpa_table_id
ROCKER_OF_DPA_TABLE_ID_VLAN	rocker/rocker_hw.h	/^    ROCKER_OF_DPA_TABLE_ID_VLAN = 10,$/;"	e	enum:rocker_of_dpa_table_id
ROCKER_OK	rocker/rocker_hw.h	/^    ROCKER_OK = 0,$/;"	e	enum:__anon38
ROCKER_PCI_BAR0_IDX	rocker/rocker_hw.h	37;"	d
ROCKER_PCI_BAR0_SIZE	rocker/rocker_hw.h	38;"	d
ROCKER_PCI_MSIX_BAR_IDX	rocker/rocker_hw.h	39;"	d
ROCKER_PCI_MSIX_BAR_SIZE	rocker/rocker_hw.h	40;"	d
ROCKER_PCI_MSIX_PBA_OFFSET	rocker/rocker_hw.h	42;"	d
ROCKER_PCI_MSIX_TABLE_OFFSET	rocker/rocker_hw.h	41;"	d
ROCKER_PCI_REVISION	rocker/rocker_hw.h	36;"	d
ROCKER_PORT_MODE_OF_DPA	rocker/rocker_hw.h	/^    ROCKER_PORT_MODE_OF_DPA,$/;"	e	enum:__anon43
ROCKER_PORT_PHYS_COUNT	rocker/rocker_hw.h	483;"	d
ROCKER_PORT_PHYS_ENABLE	rocker/rocker_hw.h	485;"	d
ROCKER_PORT_PHYS_LINK_STATUS	rocker/rocker_hw.h	484;"	d
ROCKER_RING_CMD	rocker/rocker_hw.h	112;"	d
ROCKER_RING_EVENT	rocker/rocker_hw.h	113;"	d
ROCKER_RING_INDEX	rocker/rocker_hw.h	120;"	d
ROCKER_RX_FLAGS_CSUM_CALC	rocker/rocker_hw.h	247;"	d
ROCKER_RX_FLAGS_FWD_OFFLOAD	rocker/rocker_hw.h	253;"	d
ROCKER_RX_FLAGS_IPV4	rocker/rocker_hw.h	245;"	d
ROCKER_RX_FLAGS_IPV4_CSUM_GOOD	rocker/rocker_hw.h	248;"	d
ROCKER_RX_FLAGS_IPV6	rocker/rocker_hw.h	246;"	d
ROCKER_RX_FLAGS_IP_FRAG	rocker/rocker_hw.h	249;"	d
ROCKER_RX_FLAGS_TCP	rocker/rocker_hw.h	250;"	d
ROCKER_RX_FLAGS_TCP_UDP_CSUM_GOOD	rocker/rocker_hw.h	252;"	d
ROCKER_RX_FLAGS_UDP	rocker/rocker_hw.h	251;"	d
ROCKER_SWITCH_ID	rocker/rocker_hw.h	486;"	d
ROCKER_TEST_DMA_ADDR	rocker/rocker_hw.h	77;"	d
ROCKER_TEST_DMA_CTRL	rocker/rocker_hw.h	79;"	d
ROCKER_TEST_DMA_CTRL_CLEAR	rocker/rocker_hw.h	84;"	d
ROCKER_TEST_DMA_CTRL_FILL	rocker/rocker_hw.h	85;"	d
ROCKER_TEST_DMA_CTRL_INVERT	rocker/rocker_hw.h	86;"	d
ROCKER_TEST_DMA_SIZE	rocker/rocker_hw.h	78;"	d
ROCKER_TEST_IRQ	rocker/rocker_hw.h	76;"	d
ROCKER_TEST_REG	rocker/rocker_hw.h	74;"	d
ROCKER_TEST_REG64	rocker/rocker_hw.h	75;"	d
ROCKER_TLV_ALIGN	rocker/rocker_tlv.h	21;"	d
ROCKER_TLV_ALIGNTO	rocker/rocker_tlv.h	20;"	d
ROCKER_TLV_CMD_INFO	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_INFO,                \/* nest *\/$/;"	e	enum:__anon40
ROCKER_TLV_CMD_MAX	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_MAX = __ROCKER_TLV_CMD_MAX - 1,$/;"	e	enum:__anon40
ROCKER_TLV_CMD_PORT_SETTINGS_AUTONEG	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_PORT_SETTINGS_AUTONEG,       \/* u8 *\/$/;"	e	enum:__anon42
ROCKER_TLV_CMD_PORT_SETTINGS_DUPLEX	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_PORT_SETTINGS_DUPLEX,        \/* u8 *\/$/;"	e	enum:__anon42
ROCKER_TLV_CMD_PORT_SETTINGS_LEARNING	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_PORT_SETTINGS_LEARNING,      \/* u8 *\/$/;"	e	enum:__anon42
ROCKER_TLV_CMD_PORT_SETTINGS_MACADDR	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_PORT_SETTINGS_MACADDR,       \/* binary *\/$/;"	e	enum:__anon42
ROCKER_TLV_CMD_PORT_SETTINGS_MAX	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_PORT_SETTINGS_MAX = __ROCKER_TLV_CMD_PORT_SETTINGS_MAX - 1,$/;"	e	enum:__anon42
ROCKER_TLV_CMD_PORT_SETTINGS_MODE	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_PORT_SETTINGS_MODE,          \/* u8 *\/$/;"	e	enum:__anon42
ROCKER_TLV_CMD_PORT_SETTINGS_PHYS_NAME	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_PORT_SETTINGS_PHYS_NAME,     \/* binary *\/$/;"	e	enum:__anon42
ROCKER_TLV_CMD_PORT_SETTINGS_PPORT	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_PORT_SETTINGS_PPORT,         \/* u32 *\/$/;"	e	enum:__anon42
ROCKER_TLV_CMD_PORT_SETTINGS_SPEED	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_PORT_SETTINGS_SPEED,         \/* u32 *\/$/;"	e	enum:__anon42
ROCKER_TLV_CMD_PORT_SETTINGS_UNSPEC	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_PORT_SETTINGS_UNSPEC,$/;"	e	enum:__anon42
ROCKER_TLV_CMD_TYPE	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_TYPE,                \/* u16 *\/$/;"	e	enum:__anon40
ROCKER_TLV_CMD_TYPE_GET_PORT_SETTINGS	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_TYPE_GET_PORT_SETTINGS,$/;"	e	enum:__anon41
ROCKER_TLV_CMD_TYPE_MAX	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_TYPE_MAX = __ROCKER_TLV_CMD_TYPE_MAX - 1,$/;"	e	enum:__anon41
ROCKER_TLV_CMD_TYPE_OF_DPA_FLOW_ADD	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_TYPE_OF_DPA_FLOW_ADD,$/;"	e	enum:__anon41
ROCKER_TLV_CMD_TYPE_OF_DPA_FLOW_DEL	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_TYPE_OF_DPA_FLOW_DEL,$/;"	e	enum:__anon41
ROCKER_TLV_CMD_TYPE_OF_DPA_FLOW_GET_STATS	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_TYPE_OF_DPA_FLOW_GET_STATS,$/;"	e	enum:__anon41
ROCKER_TLV_CMD_TYPE_OF_DPA_FLOW_MOD	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_TYPE_OF_DPA_FLOW_MOD,$/;"	e	enum:__anon41
ROCKER_TLV_CMD_TYPE_OF_DPA_GROUP_ADD	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_TYPE_OF_DPA_GROUP_ADD,$/;"	e	enum:__anon41
ROCKER_TLV_CMD_TYPE_OF_DPA_GROUP_DEL	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_TYPE_OF_DPA_GROUP_DEL,$/;"	e	enum:__anon41
ROCKER_TLV_CMD_TYPE_OF_DPA_GROUP_GET_STATS	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_TYPE_OF_DPA_GROUP_GET_STATS,$/;"	e	enum:__anon41
ROCKER_TLV_CMD_TYPE_OF_DPA_GROUP_MOD	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_TYPE_OF_DPA_GROUP_MOD,$/;"	e	enum:__anon41
ROCKER_TLV_CMD_TYPE_SET_PORT_SETTINGS	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_TYPE_SET_PORT_SETTINGS,$/;"	e	enum:__anon41
ROCKER_TLV_CMD_TYPE_UNSPEC	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_TYPE_UNSPEC,$/;"	e	enum:__anon41
ROCKER_TLV_CMD_UNSPEC	rocker/rocker_hw.h	/^    ROCKER_TLV_CMD_UNSPEC,$/;"	e	enum:__anon40
ROCKER_TLV_EVENT_INFO	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_INFO,              \/* nest *\/$/;"	e	enum:__anon44
ROCKER_TLV_EVENT_LINK_CHANGED_LINKUP	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_LINK_CHANGED_LINKUP,   \/* u8 *\/$/;"	e	enum:__anon46
ROCKER_TLV_EVENT_LINK_CHANGED_MAX	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_LINK_CHANGED_MAX = __ROCKER_TLV_EVENT_LINK_CHANGED_MAX - 1,$/;"	e	enum:__anon46
ROCKER_TLV_EVENT_LINK_CHANGED_PPORT	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_LINK_CHANGED_PPORT,    \/* u32 *\/$/;"	e	enum:__anon46
ROCKER_TLV_EVENT_LINK_CHANGED_UNSPEC	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_LINK_CHANGED_UNSPEC,$/;"	e	enum:__anon46
ROCKER_TLV_EVENT_MAC_VLAN_MAC	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_MAC_VLAN_MAC,          \/* binary *\/$/;"	e	enum:__anon47
ROCKER_TLV_EVENT_MAC_VLAN_MAX	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_MAC_VLAN_MAX = __ROCKER_TLV_EVENT_MAC_VLAN_MAX - 1,$/;"	e	enum:__anon47
ROCKER_TLV_EVENT_MAC_VLAN_PPORT	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_MAC_VLAN_PPORT,        \/* u32 *\/$/;"	e	enum:__anon47
ROCKER_TLV_EVENT_MAC_VLAN_UNSPEC	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_MAC_VLAN_UNSPEC,$/;"	e	enum:__anon47
ROCKER_TLV_EVENT_MAC_VLAN_VLAN_ID	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_MAC_VLAN_VLAN_ID,      \/* __be16 *\/$/;"	e	enum:__anon47
ROCKER_TLV_EVENT_MAX	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_MAX = __ROCKER_TLV_EVENT_MAX - 1,$/;"	e	enum:__anon44
ROCKER_TLV_EVENT_TYPE	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_TYPE,              \/* u16 *\/$/;"	e	enum:__anon44
ROCKER_TLV_EVENT_TYPE_LINK_CHANGED	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_TYPE_LINK_CHANGED,$/;"	e	enum:__anon45
ROCKER_TLV_EVENT_TYPE_MAC_VLAN_SEEN	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_TYPE_MAC_VLAN_SEEN,$/;"	e	enum:__anon45
ROCKER_TLV_EVENT_TYPE_MAX	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_TYPE_MAX = __ROCKER_TLV_EVENT_TYPE_MAX - 1,$/;"	e	enum:__anon45
ROCKER_TLV_EVENT_TYPE_UNSPEC	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_TYPE_UNSPEC,$/;"	e	enum:__anon45
ROCKER_TLV_EVENT_UNSPEC	rocker/rocker_hw.h	/^    ROCKER_TLV_EVENT_UNSPEC,$/;"	e	enum:__anon44
ROCKER_TLV_H	rocker/rocker_tlv.h	18;"	d
ROCKER_TLV_HDRLEN	rocker/rocker_tlv.h	23;"	d
ROCKER_TLV_OF_DPA_CLEAR_ACTIONS	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_CLEAR_ACTIONS,       \/* u32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_COOKIE	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_COOKIE,              \/* u64 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_COPY_CPU_ACTION	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_COPY_CPU_ACTION,     \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_DST_IP	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_DST_IP,              \/* __be32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_DST_IPV6	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_DST_IPV6,            \/* binary *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_DST_IPV6_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_DST_IPV6_MASK,       \/* binary *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_DST_IP_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_DST_IP_MASK,         \/* __be32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_DST_MAC	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_DST_MAC,             \/* binary *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_DST_MAC_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_DST_MAC_MASK,        \/* binary *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_ETHERTYPE	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_ETHERTYPE,           \/* __be16 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_FLOW_STAT_DURATION	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_FLOW_STAT_DURATION,    \/* u32 *\/$/;"	e	enum:__anon53
ROCKER_TLV_OF_DPA_FLOW_STAT_MAX	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_FLOW_STAT_MAX = __ROCKER_TLV_OF_DPA_FLOW_STAT_MAX - 1,$/;"	e	enum:__anon53
ROCKER_TLV_OF_DPA_FLOW_STAT_RX_PKTS	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_FLOW_STAT_RX_PKTS,     \/* u64 *\/$/;"	e	enum:__anon53
ROCKER_TLV_OF_DPA_FLOW_STAT_TX_PKTS	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_FLOW_STAT_TX_PKTS,     \/* u64 *\/$/;"	e	enum:__anon53
ROCKER_TLV_OF_DPA_FLOW_STAT_UNSPEC	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_FLOW_STAT_UNSPEC,$/;"	e	enum:__anon53
ROCKER_TLV_OF_DPA_GOTO_TABLE_ID	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_GOTO_TABLE_ID,       \/* u16 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_GROUP_COUNT	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_GROUP_COUNT,         \/* u16 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_GROUP_ID	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_GROUP_ID,            \/* u32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_GROUP_IDS	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_GROUP_IDS,           \/* u32 array *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_GROUP_ID_LOWER	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_GROUP_ID_LOWER,      \/* u32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_HARDTIME	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_HARDTIME,            \/* u32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_ICMP_CODE	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_ICMP_CODE,           \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_ICMP_CODE_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_ICMP_CODE_MASK,      \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_ICMP_TYPE	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_ICMP_TYPE,           \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_ICMP_TYPE_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_ICMP_TYPE_MASK,      \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_IDLETIME	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_IDLETIME,            \/* u32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_IN_PPORT	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_IN_PPORT,            \/* u32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_IN_PPORT_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_IN_PPORT_MASK,       \/* u32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_IPV6_LABEL	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_IPV6_LABEL,          \/* __be32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_IPV6_LABEL_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_IPV6_LABEL_MASK,     \/* __be32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_IP_DSCP	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_IP_DSCP,             \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_IP_DSCP_ACTION	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_IP_DSCP_ACTION,      \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_IP_DSCP_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_IP_DSCP_MASK,        \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_IP_ECN	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_IP_ECN,              \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_IP_ECN_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_IP_ECN_MASK,         \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_IP_PROTO	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_IP_PROTO,            \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_IP_PROTO_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_IP_PROTO_MASK,       \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_L4_DST_PORT	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_L4_DST_PORT,         \/* __be16 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_L4_DST_PORT_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_L4_DST_PORT_MASK,    \/* __be16 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_L4_SRC_PORT	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_L4_SRC_PORT,         \/* __be16 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_L4_SRC_PORT_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_L4_SRC_PORT_MASK,    \/* __be16 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_MAX	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_MAX = __ROCKER_TLV_OF_DPA_MAX - 1,$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_NEW_IP_DSCP	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_NEW_IP_DSCP,         \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_NEW_QUEUE_ID	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_NEW_QUEUE_ID,        \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_NEW_VLAN_ID	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_NEW_VLAN_ID,         \/* __be16 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_NEW_VLAN_PCP	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_NEW_VLAN_PCP,        \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_OUT_PPORT	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_OUT_PPORT,           \/* u32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_POP_VLAN	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_POP_VLAN,            \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_PRIORITY	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_PRIORITY,            \/* u32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_QUEUE_ID_ACTION	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_QUEUE_ID_ACTION,     \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_SRC_ARP_IP	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_SRC_ARP_IP,          \/* __be32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_SRC_ARP_IP_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_SRC_ARP_IP_MASK,     \/* __be32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_SRC_IP	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_SRC_IP,              \/* __be32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_SRC_IPV6	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_SRC_IPV6,            \/* binary *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_SRC_IPV6_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_SRC_IPV6_MASK,       \/* binary *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_SRC_IP_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_SRC_IP_MASK,         \/* __be32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_SRC_MAC	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_SRC_MAC,             \/* binary *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_SRC_MAC_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_SRC_MAC_MASK,        \/* binary *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_TABLE_ID	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_TABLE_ID,            \/* u16 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_TTL_CHECK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_TTL_CHECK,           \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_TUNNEL_ID	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_TUNNEL_ID,           \/* u32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_TUNNEL_LPORT	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_TUNNEL_LPORT,        \/* u32 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_UNSPEC	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_UNSPEC,$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_VLAN_ID	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_VLAN_ID,             \/* __be16 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_VLAN_ID_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_VLAN_ID_MASK,        \/* __be16 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_VLAN_PCP	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_VLAN_PCP,            \/* __be16 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_VLAN_PCP_ACTION	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_VLAN_PCP_ACTION,     \/* u8 *\/$/;"	e	enum:__anon52
ROCKER_TLV_OF_DPA_VLAN_PCP_MASK	rocker/rocker_hw.h	/^    ROCKER_TLV_OF_DPA_VLAN_PCP_MASK,       \/* __be16 *\/$/;"	e	enum:__anon52
ROCKER_TLV_RX_CSUM	rocker/rocker_hw.h	/^    ROCKER_TLV_RX_CSUM,                 \/* u16 *\/$/;"	e	enum:__anon48
ROCKER_TLV_RX_FLAGS	rocker/rocker_hw.h	/^    ROCKER_TLV_RX_FLAGS,                \/* u16, see RX_FLAGS_ *\/$/;"	e	enum:__anon48
ROCKER_TLV_RX_FRAG_ADDR	rocker/rocker_hw.h	/^    ROCKER_TLV_RX_FRAG_ADDR,            \/* u64 *\/$/;"	e	enum:__anon48
ROCKER_TLV_RX_FRAG_LEN	rocker/rocker_hw.h	/^    ROCKER_TLV_RX_FRAG_LEN,             \/* u16 *\/$/;"	e	enum:__anon48
ROCKER_TLV_RX_FRAG_MAX_LEN	rocker/rocker_hw.h	/^    ROCKER_TLV_RX_FRAG_MAX_LEN,         \/* u16 *\/$/;"	e	enum:__anon48
ROCKER_TLV_RX_MAX	rocker/rocker_hw.h	/^    ROCKER_TLV_RX_MAX = __ROCKER_TLV_RX_MAX - 1,$/;"	e	enum:__anon48
ROCKER_TLV_RX_UNSPEC	rocker/rocker_hw.h	/^    ROCKER_TLV_RX_UNSPEC,$/;"	e	enum:__anon48
ROCKER_TLV_TX_FRAG	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_FRAG,                 \/* nest *\/$/;"	e	enum:__anon50
ROCKER_TLV_TX_FRAGS	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_FRAGS,                \/* array *\/$/;"	e	enum:__anon49
ROCKER_TLV_TX_FRAG_ATTR_ADDR	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_FRAG_ATTR_ADDR,       \/* u64 *\/$/;"	e	enum:__anon51
ROCKER_TLV_TX_FRAG_ATTR_LEN	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_FRAG_ATTR_LEN,        \/* u16 *\/$/;"	e	enum:__anon51
ROCKER_TLV_TX_FRAG_ATTR_MAX	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_FRAG_ATTR_MAX = __ROCKER_TLV_TX_FRAG_ATTR_MAX - 1,$/;"	e	enum:__anon51
ROCKER_TLV_TX_FRAG_ATTR_UNSPEC	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_FRAG_ATTR_UNSPEC,$/;"	e	enum:__anon51
ROCKER_TLV_TX_FRAG_MAX	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_FRAG_MAX = __ROCKER_TLV_TX_FRAG_MAX - 1,$/;"	e	enum:__anon50
ROCKER_TLV_TX_FRAG_UNSPEC	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_FRAG_UNSPEC,$/;"	e	enum:__anon50
ROCKER_TLV_TX_L3_CSUM_OFF	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_L3_CSUM_OFF,          \/* u16 *\/$/;"	e	enum:__anon49
ROCKER_TLV_TX_MAX	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_MAX = __ROCKER_TLV_TX_MAX - 1,$/;"	e	enum:__anon49
ROCKER_TLV_TX_OFFLOAD	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_OFFLOAD,              \/* u8, see TX_OFFLOAD_ *\/$/;"	e	enum:__anon49
ROCKER_TLV_TX_TSO_HDR_LEN	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_TSO_HDR_LEN,          \/* u16 *\/$/;"	e	enum:__anon49
ROCKER_TLV_TX_TSO_MSS	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_TSO_MSS,              \/* u16 *\/$/;"	e	enum:__anon49
ROCKER_TLV_TX_UNSPEC	rocker/rocker_hw.h	/^    ROCKER_TLV_TX_UNSPEC,$/;"	e	enum:__anon49
ROCKER_TUNNEL_LPORT	rocker/rocker_of_dpa.c	1066;"	d	file:
ROCKER_TX_FRAGS_MAX	rocker/rocker_hw.h	274;"	d
ROCKER_TX_OFFLOAD_IP_CSUM	rocker/rocker_hw.h	269;"	d
ROCKER_TX_OFFLOAD_L3_CSUM	rocker/rocker_hw.h	271;"	d
ROCKER_TX_OFFLOAD_NONE	rocker/rocker_hw.h	268;"	d
ROCKER_TX_OFFLOAD_TCP_UDP_CSUM	rocker/rocker_hw.h	270;"	d
ROCKER_TX_OFFLOAD_TSO	rocker/rocker_hw.h	272;"	d
ROCKER_WORLD_H	rocker/rocker_world.h	18;"	d
ROCKER_WORLD_TYPE_MAX	rocker/rocker_world.h	/^    ROCKER_WORLD_TYPE_MAX,$/;"	e	enum:rocker_world_type
ROCKER_WORLD_TYPE_OF_DPA	rocker/rocker_world.h	/^    ROCKER_WORLD_TYPE_OF_DPA = ROCKER_PORT_MODE_OF_DPA,$/;"	e	enum:rocker_world_type
ROVR	fsl_etsec/registers.h	232;"	d
RPKT	fsl_etsec/registers.h	220;"	d
RQFAR	fsl_etsec/registers.h	144;"	d
RQFCR	fsl_etsec/registers.h	145;"	d
RQFPR	fsl_etsec/registers.h	146;"	d
RQPRM0	fsl_etsec/registers.h	278;"	d
RQPRM1	fsl_etsec/registers.h	279;"	d
RQPRM2	fsl_etsec/registers.h	280;"	d
RQPRM3	fsl_etsec/registers.h	281;"	d
RQPRM4	fsl_etsec/registers.h	282;"	d
RQPRM5	fsl_etsec/registers.h	283;"	d
RQPRM6	fsl_etsec/registers.h	284;"	d
RQPRM7	fsl_etsec/registers.h	285;"	d
RQUEUE	fsl_etsec/registers.h	142;"	d
RREJ	fsl_etsec/registers.h	259;"	d
RSFF_INT	lan9118.c	90;"	d	file:
RSFL_INT	lan9118.c	91;"	d	file:
RSTAT	fsl_etsec/registers.h	140;"	d
RS_ALGNERR	smc91c111.c	107;"	d	file:
RS_BADCRC	smc91c111.c	109;"	d	file:
RS_BRODCAST	smc91c111.c	108;"	d	file:
RS_MULTICAST	smc91c111.c	113;"	d	file:
RS_ODDFRAME	smc91c111.c	110;"	d	file:
RS_TOOLONG	smc91c111.c	111;"	d	file:
RS_TOOSHORT	smc91c111.c	112;"	d	file:
RTL8139	rtl8139.c	95;"	d	file:
RTL8139State	rtl8139.c	/^typedef struct RTL8139State {$/;"	s	file:
RTL8139State	rtl8139.c	/^} RTL8139State;$/;"	t	typeref:struct:RTL8139State	file:
RTL8139TallyCounters	rtl8139.c	/^typedef struct RTL8139TallyCounters$/;"	s	file:
RTL8139TallyCounters	rtl8139.c	/^} RTL8139TallyCounters;$/;"	t	typeref:struct:RTL8139TallyCounters	file:
RTL8139TallyCounters_clear	rtl8139.c	/^static void RTL8139TallyCounters_clear(RTL8139TallyCounters* counters)$/;"	f	file:
RTL8139TallyCounters_dma_write	rtl8139.c	/^static void RTL8139TallyCounters_dma_write(RTL8139State *s, dma_addr_t tc_addr)$/;"	f	file:
RTL8139_PCI_REVID	rtl8139.c	369;"	d	file:
RTL8139_PCI_REVID_8139	rtl8139.c	366;"	d	file:
RTL8139_PCI_REVID_8139CPLUS	rtl8139.c	367;"	d	file:
RTL8139_registers	rtl8139.c	/^enum RTL8139_registers {$/;"	g	file:
RTL8201CP_mdio_read	allwinner_emac.c	/^static uint16_t RTL8201CP_mdio_read(AwEmacState *s, uint8_t addr, uint8_t reg)$/;"	f	file:
RTL8201CP_mdio_write	allwinner_emac.c	/^static void RTL8201CP_mdio_write(AwEmacState *s, uint8_t addr, uint8_t reg,$/;"	f	file:
RUND	fsl_etsec/registers.h	231;"	d
RU_ABORT	eepro100.c	124;"	d	file:
RU_NOP	eepro100.c	121;"	d	file:
RWT_INT	lan9118.c	80;"	d	file:
RW_CLR_ERR	etraxfs_eth.c	321;"	d	file:
RW_GA_HI	etraxfs_eth.c	317;"	d	file:
RW_GA_LO	etraxfs_eth.c	316;"	d	file:
RW_GEN_CTRL	etraxfs_eth.c	318;"	d	file:
RW_MA0_HI	etraxfs_eth.c	313;"	d	file:
RW_MA0_LO	etraxfs_eth.c	312;"	d	file:
RW_MA1_HI	etraxfs_eth.c	315;"	d	file:
RW_MA1_LO	etraxfs_eth.c	314;"	d	file:
RW_MGM_CTRL	etraxfs_eth.c	322;"	d	file:
RW_REC_CTRL	etraxfs_eth.c	319;"	d	file:
RW_TR_CTRL	etraxfs_eth.c	320;"	d	file:
RXCF	fsl_etsec/registers.h	224;"	d
RXDFH_INT	lan9118.c	73;"	d	file:
RXDF_INT	lan9118.c	88;"	d	file:
RXD_CF	opencores_eth.c	/^    RXD_CF = 0x100,$/;"	e	enum:__anon149	file:
RXD_CRC	opencores_eth.c	/^    RXD_CRC = 0x2,$/;"	e	enum:__anon149	file:
RXD_DN	opencores_eth.c	/^    RXD_DN = 0x10,$/;"	e	enum:__anon149	file:
RXD_E	opencores_eth.c	/^    RXD_E = 0x8000,$/;"	e	enum:__anon149	file:
RXD_INT	lan9118.c	75;"	d	file:
RXD_IRQ	opencores_eth.c	/^    RXD_IRQ = 0x4000,$/;"	e	enum:__anon149	file:
RXD_IS	opencores_eth.c	/^    RXD_IS = 0x20,$/;"	e	enum:__anon149	file:
RXD_LC	opencores_eth.c	/^    RXD_LC = 0x1,$/;"	e	enum:__anon149	file:
RXD_LEN	opencores_eth.c	/^    RXD_LEN = 0xffff0000,$/;"	e	enum:__anon149	file:
RXD_LEN_LBN	opencores_eth.c	/^    RXD_LEN_LBN = 16,$/;"	e	enum:__anon149	file:
RXD_M	opencores_eth.c	/^    RXD_M = 0x80,$/;"	e	enum:__anon149	file:
RXD_OR	opencores_eth.c	/^    RXD_OR = 0x40,$/;"	e	enum:__anon149	file:
RXD_SF	opencores_eth.c	/^    RXD_SF = 0x4,$/;"	e	enum:__anon149	file:
RXD_TL	opencores_eth.c	/^    RXD_TL = 0x8,$/;"	e	enum:__anon149	file:
RXD_WRAP	opencores_eth.c	/^    RXD_WRAP = 0x2000,$/;"	e	enum:__anon149	file:
RXE_INT	lan9118.c	81;"	d	file:
RXIC	fsl_etsec/registers.h	141;"	d
RXPF	fsl_etsec/registers.h	225;"	d
RXQ_IDX	vmxnet3.c	830;"	d	file:
RXSTOP_INT	lan9118.c	72;"	d	file:
RXTX	eepro100.c	78;"	d	file:
RXUO	fsl_etsec/registers.h	226;"	d
RX_ADDR_LOAD	eepro100.c	125;"	d	file:
RX_ALIGN	rtl8139.c	1148;"	d	file:
RX_BODY_ONLY_RING	vmxnet3.c	832;"	d	file:
RX_HEAD_BODY_RING	vmxnet3.c	831;"	d	file:
RX_MAX_POOLS	spapr_llan.c	90;"	d	file:
RX_POOL_MAX_BDS	spapr_llan.c	89;"	d	file:
RX_RESUME	eepro100.c	123;"	d	file:
RX_RESUMENR	eepro100.c	126;"	d	file:
RX_START	eepro100.c	122;"	d	file:
R_AF0	xilinx_axienet.c	319;"	d	file:
R_AF1	xilinx_axienet.c	320;"	d	file:
R_COUNT0	milkymist-minimac2.c	/^    R_COUNT0,$/;"	e	enum:__anon30	file:
R_COUNT1	milkymist-minimac2.c	/^    R_COUNT1,$/;"	e	enum:__anon30	file:
R_DESC_1_RX_BROADCAST	cadence_gem.c	298;"	d	file:
R_DESC_1_RX_MULTICAST_HASH	cadence_gem.c	297;"	d	file:
R_DESC_1_RX_SAR_LENGTH	cadence_gem.c	294;"	d	file:
R_DESC_1_RX_SAR_MATCH	cadence_gem.c	295;"	d	file:
R_DESC_1_RX_SAR_SHIFT	cadence_gem.c	293;"	d	file:
R_DESC_1_RX_UNICAST_HASH	cadence_gem.c	296;"	d	file:
R_EMMC	xilinx_axienet.c	296;"	d	file:
R_FMI	xilinx_axienet.c	318;"	d	file:
R_IE	xilinx_axienet.c	257;"	d	file:
R_IP	xilinx_axienet.c	256;"	d	file:
R_IS	xilinx_axienet.c	244;"	d	file:
R_MAX	milkymist-minimac2.c	/^    R_MAX$/;"	e	enum:__anon30	file:
R_MAX	xgmac.c	128;"	d	file:
R_MAX	xilinx_axienet.c	321;"	d	file:
R_MAX	xilinx_ethlite.c	45;"	d	file:
R_MC	xilinx_axienet.c	305;"	d	file:
R_MCR	xilinx_axienet.c	308;"	d	file:
R_MDIO	milkymist-minimac2.c	/^    R_MDIO,$/;"	e	enum:__anon30	file:
R_MIC	xilinx_axienet.c	314;"	d	file:
R_MIE	xilinx_axienet.c	313;"	d	file:
R_MIP	xilinx_axienet.c	312;"	d	file:
R_MIS	xilinx_axienet.c	311;"	d	file:
R_MRD	xilinx_axienet.c	310;"	d	file:
R_MWD	xilinx_axienet.c	309;"	d	file:
R_PHYC	xilinx_axienet.c	303;"	d	file:
R_PHY_ID1	milkymist-minimac2.c	/^    R_PHY_ID1  = 2,$/;"	e	enum:__anon35	file:
R_PHY_ID2	milkymist-minimac2.c	/^    R_PHY_ID2  = 3,$/;"	e	enum:__anon35	file:
R_PHY_MAX	milkymist-minimac2.c	/^    R_PHY_MAX  = 32$/;"	e	enum:__anon35	file:
R_PPST	xilinx_axienet.c	260;"	d	file:
R_RAF	xilinx_axienet.c	236;"	d	file:
R_RCW0	xilinx_axienet.c	277;"	d	file:
R_RCW1	xilinx_axienet.c	278;"	d	file:
R_RX_BUF0	xilinx_ethlite.c	41;"	d	file:
R_RX_BUF1	xilinx_ethlite.c	43;"	d	file:
R_RX_CTRL0	xilinx_ethlite.c	42;"	d	file:
R_RX_CTRL1	xilinx_ethlite.c	44;"	d	file:
R_SETUP	milkymist-minimac2.c	/^    R_SETUP = 0,$/;"	e	enum:__anon30	file:
R_STAT	etraxfs_eth.c	323;"	d	file:
R_STATE0	milkymist-minimac2.c	/^    R_STATE0,$/;"	e	enum:__anon30	file:
R_STATE1	milkymist-minimac2.c	/^    R_STATE1,$/;"	e	enum:__anon30	file:
R_STATS_RXH	xilinx_axienet.c	271;"	d	file:
R_STATS_RXL	xilinx_axienet.c	270;"	d	file:
R_STATS_RX_BCASTH	xilinx_axienet.c	273;"	d	file:
R_STATS_RX_BCASTL	xilinx_axienet.c	272;"	d	file:
R_STATS_RX_BYTESH	xilinx_axienet.c	267;"	d	file:
R_STATS_RX_BYTESL	xilinx_axienet.c	266;"	d	file:
R_STATS_RX_MCASTH	xilinx_axienet.c	275;"	d	file:
R_STATS_RX_MCASTL	xilinx_axienet.c	274;"	d	file:
R_STATS_TX_BYTESH	xilinx_axienet.c	269;"	d	file:
R_STATS_TX_BYTESL	xilinx_axienet.c	268;"	d	file:
R_TC	xilinx_axienet.c	287;"	d	file:
R_TXCOUNT	milkymist-minimac2.c	/^    R_TXCOUNT,$/;"	e	enum:__anon30	file:
R_TX_BUF0	xilinx_ethlite.c	33;"	d	file:
R_TX_BUF1	xilinx_ethlite.c	37;"	d	file:
R_TX_CTRL0	xilinx_ethlite.c	36;"	d	file:
R_TX_CTRL1	xilinx_ethlite.c	39;"	d	file:
R_TX_GIE0	xilinx_ethlite.c	35;"	d	file:
R_TX_LEN0	xilinx_ethlite.c	34;"	d	file:
R_TX_LEN1	xilinx_ethlite.c	38;"	d	file:
R_UAW0	xilinx_axienet.c	316;"	d	file:
R_UAW1	xilinx_axienet.c	317;"	d	file:
R_UAWL	xilinx_axienet.c	258;"	d	file:
R_UAWU	xilinx_axienet.c	259;"	d	file:
Rocker	rocker/rocker.h	/^typedef struct rocker Rocker;$/;"	t	typeref:struct:rocker
RockerDesc	rocker/rocker_hw.h	/^} __attribute__((packed, aligned(8))) RockerDesc;$/;"	t	typeref:struct:rocker_desc
RockerTlv	rocker/rocker_hw.h	/^} __attribute__((packed, aligned(8))) RockerTlv;$/;"	t	typeref:struct:rocker_tlv
RxAckBits	rtl8139.c	/^    RxAckBits = RxFIFOOver | RxOverflow | RxOK,$/;"	e	enum:IntrStatusBits	file:
RxBadAlign	rtl8139.c	/^    RxBadAlign = 0x0002,$/;"	e	enum:RxStatusBits	file:
RxBadSymbol	rtl8139.c	/^    RxBadSymbol = 0x0020,$/;"	e	enum:RxStatusBits	file:
RxBroadcast	rtl8139.c	/^    RxBroadcast = 0x2000,$/;"	e	enum:RxStatusBits	file:
RxBuf	rtl8139.c	/^    RxBuf = 0x30,$/;"	e	enum:RTL8139_registers	file:
RxBuf	rtl8139.c	/^    uint32_t RxBuf;       \/* Receive buffer *\/$/;"	m	struct:RTL8139State	file:
RxBufAddr	rtl8139.c	/^    RxBufAddr = 0x3A,$/;"	e	enum:RTL8139_registers	file:
RxBufAddr	rtl8139.c	/^    uint32_t RxBufAddr;$/;"	m	struct:RTL8139State	file:
RxBufEmpty	rtl8139.c	/^    RxBufEmpty = 0x01,$/;"	e	enum:ChipCmdBits	file:
RxBufPool	spapr_llan.c	/^} RxBufPool;$/;"	t	typeref:struct:__anon117	file:
RxBufPtr	rtl8139.c	/^    RxBufPtr = 0x38,$/;"	e	enum:RTL8139_registers	file:
RxBufPtr	rtl8139.c	/^    uint32_t RxBufPtr;$/;"	m	struct:RTL8139State	file:
RxBufferSize	rtl8139.c	/^    uint32_t RxBufferSize;\/* internal variable, receive ring buffer size in C mode *\/$/;"	m	struct:RTL8139State	file:
RxCRCErr	rtl8139.c	/^    RxCRCErr = 0x0004,$/;"	e	enum:RxStatusBits	file:
RxCfgDMAShift	rtl8139.c	/^    RxCfgDMAShift = 8,$/;"	e	enum:RxConfigBits	file:
RxCfgDMAUnlimited	rtl8139.c	/^    RxCfgDMAUnlimited = (7 << RxCfgDMAShift),$/;"	e	enum:RxConfigBits	file:
RxCfgFIFONone	rtl8139.c	/^    RxCfgFIFONone = (7 << RxCfgFIFOShift),$/;"	e	enum:RxConfigBits	file:
RxCfgFIFOShift	rtl8139.c	/^    RxCfgFIFOShift = 13,$/;"	e	enum:RxConfigBits	file:
RxCfgRcv16K	rtl8139.c	/^    RxCfgRcv16K = (1 << 11),$/;"	e	enum:RxConfigBits	file:
RxCfgRcv32K	rtl8139.c	/^    RxCfgRcv32K = (1 << 12),$/;"	e	enum:RxConfigBits	file:
RxCfgRcv64K	rtl8139.c	/^    RxCfgRcv64K = (1 << 11) | (1 << 12),$/;"	e	enum:RxConfigBits	file:
RxCfgRcv8K	rtl8139.c	/^    RxCfgRcv8K = 0,$/;"	e	enum:RxConfigBits	file:
RxConfig	rtl8139.c	/^    RxConfig = 0x44,$/;"	e	enum:RTL8139_registers	file:
RxConfig	rtl8139.c	/^    uint32_t RxConfig;$/;"	m	struct:RTL8139State	file:
RxConfigBits	rtl8139.c	/^enum RxConfigBits {$/;"	g	file:
RxERR	rtl8139.c	/^    uint32_t   RxERR;$/;"	m	struct:RTL8139TallyCounters	file:
RxErr	rtl8139.c	/^    RxErr = 0x02,$/;"	e	enum:IntrStatusBits	file:
RxFIFOOver	rtl8139.c	/^    RxFIFOOver = 0x40,$/;"	e	enum:IntrStatusBits	file:
RxMaxSize	rtl8139.c	/^    RxMaxSize    = 0xDA, \/* Max size of an Rx packet (8169 only) *\/$/;"	e	enum:RTL8139_registers	file:
RxMissed	rtl8139.c	/^    RxMissed = 0x4C,    \/* 24 bits valid, write clears. *\/$/;"	e	enum:RTL8139_registers	file:
RxMissed	rtl8139.c	/^    uint32_t RxMissed;$/;"	m	struct:RTL8139State	file:
RxMulticast	rtl8139.c	/^    RxMulticast = 0x8000,$/;"	e	enum:RxStatusBits	file:
RxNoWrap	rtl8139.c	/^    RxNoWrap = (1 << 7),$/;"	e	enum:RxConfigBits	file:
RxOK	rtl8139.c	/^    RxOK = 0x01,$/;"	e	enum:IntrStatusBits	file:
RxOk	rtl8139.c	/^    uint64_t   RxOk;$/;"	m	struct:RTL8139TallyCounters	file:
RxOkBrd	rtl8139.c	/^    uint64_t   RxOkBrd;$/;"	m	struct:RTL8139TallyCounters	file:
RxOkMul	rtl8139.c	/^    uint32_t   RxOkMul;$/;"	m	struct:RTL8139TallyCounters	file:
RxOkPhy	rtl8139.c	/^    uint64_t   RxOkPhy;$/;"	m	struct:RTL8139TallyCounters	file:
RxOverflow	rtl8139.c	/^    RxOverflow = 0x10,$/;"	e	enum:IntrStatusBits	file:
RxPhysical	rtl8139.c	/^    RxPhysical = 0x4000,$/;"	e	enum:RxStatusBits	file:
RxRingAddrHI	rtl8139.c	/^    RxRingAddrHI    = 0xE8, \/* 64-bit start addr of Rx ring *\/$/;"	e	enum:RTL8139_registers	file:
RxRingAddrHI	rtl8139.c	/^    uint32_t   RxRingAddrHI;$/;"	m	struct:RTL8139State	file:
RxRingAddrLO	rtl8139.c	/^    RxRingAddrLO    = 0xE4, \/* 64-bit start addr of Rx ring *\/$/;"	e	enum:RTL8139_registers	file:
RxRingAddrLO	rtl8139.c	/^    uint32_t   RxRingAddrLO;$/;"	m	struct:RTL8139State	file:
RxRunt	rtl8139.c	/^    RxRunt = 0x0010,$/;"	e	enum:RxStatusBits	file:
RxStatusBits	rtl8139.c	/^enum RxStatusBits {$/;"	g	file:
RxStatusOK	rtl8139.c	/^    RxStatusOK = 0x0001,$/;"	e	enum:RxStatusBits	file:
RxTooLong	rtl8139.c	/^    RxTooLong = 0x0008,$/;"	e	enum:RxStatusBits	file:
RxTxStats	xgmac.c	/^typedef struct RxTxStats {$/;"	s	file:
RxTxStats	xgmac.c	/^} RxTxStats;$/;"	t	typeref:struct:RxTxStats	file:
RxUnderrun	rtl8139.c	/^    RxUnderrun = 0x20, \/* Packet Underrun \/ Link Change *\/$/;"	e	enum:IntrStatusBits	file:
SCBAck	eepro100.c	/^    SCBAck = 1,$/;"	e	enum:__anon76	file:
SCBCmd	eepro100.c	/^    SCBCmd = 2,                 \/* Rx\/Command Unit command and status. *\/$/;"	e	enum:__anon76	file:
SCBCtrlMDI	eepro100.c	/^    SCBCtrlMDI = 16,            \/* MDI interface control. *\/$/;"	e	enum:__anon76	file:
SCBEarlyRx	eepro100.c	/^    SCBEarlyRx = 20,            \/* Early receive byte count. *\/$/;"	e	enum:__anon76	file:
SCBFlow	eepro100.c	/^    SCBFlow = 24,               \/* Flow Control. *\/$/;"	e	enum:__anon76	file:
SCBIntmask	eepro100.c	/^    SCBIntmask = 3,$/;"	e	enum:__anon76	file:
SCBPointer	eepro100.c	/^    SCBPointer = 4,             \/* General purpose pointer. *\/$/;"	e	enum:__anon76	file:
SCBPort	eepro100.c	/^    SCBPort = 8,                \/* Misc. commands and operands.  *\/$/;"	e	enum:__anon76	file:
SCBStatus	eepro100.c	/^    SCBStatus = 0,              \/* Status Word. *\/$/;"	e	enum:__anon76	file:
SCBeeprom	eepro100.c	/^    SCBeeprom = 14,             \/* EEPROM control. *\/$/;"	e	enum:__anon76	file:
SCBflash	eepro100.c	/^    SCBflash = 12,              \/* Flash memory control. *\/$/;"	e	enum:__anon76	file:
SCBgctrl	eepro100.c	/^    SCBgctrl = 28,              \/* General Control. *\/$/;"	e	enum:__anon76	file:
SCBgstat	eepro100.c	/^    SCBgstat = 29,              \/* General Status. *\/$/;"	e	enum:__anon76	file:
SCBpmdr	eepro100.c	/^    SCBpmdr = 27,               \/* Power Management Driver. *\/$/;"	e	enum:__anon76	file:
SETUP_PHY_RST	milkymist-minimac2.c	/^    SETUP_PHY_RST = (1<<0),$/;"	e	enum:__anon31	file:
SET_FIELD	opencores_eth.c	52;"	d	file:
SET_FIELD	pcnet.c	378;"	d	file:
SET_HIGH	smc91c111.c	304;"	d	file:
SET_LOW	smc91c111.c	303;"	d	file:
SET_MASKED	rtl8139.c	70;"	d	file:
SET_REGFIELD	opencores_eth.c	54;"	d	file:
SE_INT_FOV	stellaris_enet.c	30;"	d	file:
SE_INT_MD	stellaris_enet.c	32;"	d	file:
SE_INT_PHY	stellaris_enet.c	33;"	d	file:
SE_INT_RX	stellaris_enet.c	27;"	d	file:
SE_INT_RXER	stellaris_enet.c	31;"	d	file:
SE_INT_TXEMP	stellaris_enet.c	29;"	d	file:
SE_INT_TXER	stellaris_enet.c	28;"	d	file:
SE_RCTL_AMUL	stellaris_enet.c	36;"	d	file:
SE_RCTL_BADCRC	stellaris_enet.c	38;"	d	file:
SE_RCTL_PRMS	stellaris_enet.c	37;"	d	file:
SE_RCTL_RSTFIFO	stellaris_enet.c	39;"	d	file:
SE_RCTL_RXEN	stellaris_enet.c	35;"	d	file:
SE_TCTL_CRC	stellaris_enet.c	43;"	d	file:
SE_TCTL_DUPLEX	stellaris_enet.c	44;"	d	file:
SE_TCTL_PADEN	stellaris_enet.c	42;"	d	file:
SE_TCTL_TXEN	stellaris_enet.c	41;"	d	file:
SLEEP	rtl8139.c	/^    SLEEP = (1 << 1),    \/* only on 8139, 8139A *\/$/;"	e	enum:Config1Bits	file:
SMC91C111	smc91c111.c	21;"	d	file:
SOF	etraxfs_eth.c	/^        SOF,$/;"	e	enum:qemu_mdio::__anon118	file:
SOF	xilinx_axienet.c	/^        SOF,$/;"	e	enum:MDIOBus::__anon126	file:
SONIC_CAP0	dp8393x.c	83;"	d	file:
SONIC_CAP1	dp8393x.c	82;"	d	file:
SONIC_CAP2	dp8393x.c	81;"	d	file:
SONIC_CDC	dp8393x.c	86;"	d	file:
SONIC_CDP	dp8393x.c	85;"	d	file:
SONIC_CE	dp8393x.c	84;"	d	file:
SONIC_CEP	dp8393x.c	80;"	d	file:
SONIC_CR	dp8393x.c	51;"	d	file:
SONIC_CRBA0	dp8393x.c	66;"	d	file:
SONIC_CRBA1	dp8393x.c	67;"	d	file:
SONIC_CRCT	dp8393x.c	91;"	d	file:
SONIC_CRDA	dp8393x.c	65;"	d	file:
SONIC_CR_HTX	dp8393x.c	97;"	d	file:
SONIC_CR_LCAM	dp8393x.c	105;"	d	file:
SONIC_CR_MASK	dp8393x.c	106;"	d	file:
SONIC_CR_RRRA	dp8393x.c	104;"	d	file:
SONIC_CR_RST	dp8393x.c	103;"	d	file:
SONIC_CR_RXDIS	dp8393x.c	99;"	d	file:
SONIC_CR_RXEN	dp8393x.c	100;"	d	file:
SONIC_CR_ST	dp8393x.c	102;"	d	file:
SONIC_CR_STP	dp8393x.c	101;"	d	file:
SONIC_CR_TXP	dp8393x.c	98;"	d	file:
SONIC_CTDA	dp8393x.c	58;"	d	file:
SONIC_DCR	dp8393x.c	52;"	d	file:
SONIC_DCR2	dp8393x.c	95;"	d	file:
SONIC_DCR_DW	dp8393x.c	108;"	d	file:
SONIC_DCR_EXBUS	dp8393x.c	110;"	d	file:
SONIC_DCR_LBR	dp8393x.c	109;"	d	file:
SONIC_EOBC	dp8393x.c	70;"	d	file:
SONIC_ERROR	dp8393x.c	48;"	d	file:
SONIC_FAET	dp8393x.c	92;"	d	file:
SONIC_IMR	dp8393x.c	55;"	d	file:
SONIC_ISR	dp8393x.c	56;"	d	file:
SONIC_ISR_LCD	dp8393x.c	143;"	d	file:
SONIC_ISR_PINT	dp8393x.c	142;"	d	file:
SONIC_ISR_PKTRX	dp8393x.c	141;"	d	file:
SONIC_ISR_RBE	dp8393x.c	137;"	d	file:
SONIC_ISR_RDE	dp8393x.c	138;"	d	file:
SONIC_ISR_TC	dp8393x.c	139;"	d	file:
SONIC_ISR_TXDN	dp8393x.c	140;"	d	file:
SONIC_LLFA	dp8393x.c	78;"	d	file:
SONIC_MDT	dp8393x.c	94;"	d	file:
SONIC_MPT	dp8393x.c	93;"	d	file:
SONIC_PROM_SIZE	dp8393x.c	30;"	d	file:
SONIC_RBWC0	dp8393x.c	68;"	d	file:
SONIC_RBWC1	dp8393x.c	69;"	d	file:
SONIC_RCR	dp8393x.c	53;"	d	file:
SONIC_RCR_AMC	dp8393x.c	122;"	d	file:
SONIC_RCR_BC	dp8393x.c	118;"	d	file:
SONIC_RCR_BRD	dp8393x.c	124;"	d	file:
SONIC_RCR_CRCR	dp8393x.c	115;"	d	file:
SONIC_RCR_CRS	dp8393x.c	116;"	d	file:
SONIC_RCR_FAER	dp8393x.c	114;"	d	file:
SONIC_RCR_LB0	dp8393x.c	120;"	d	file:
SONIC_RCR_LB1	dp8393x.c	121;"	d	file:
SONIC_RCR_LBK	dp8393x.c	113;"	d	file:
SONIC_RCR_LPKT	dp8393x.c	117;"	d	file:
SONIC_RCR_MC	dp8393x.c	119;"	d	file:
SONIC_RCR_PRO	dp8393x.c	123;"	d	file:
SONIC_RCR_PRX	dp8393x.c	112;"	d	file:
SONIC_RCR_RNT	dp8393x.c	125;"	d	file:
SONIC_REA	dp8393x.c	73;"	d	file:
SONIC_RRP	dp8393x.c	74;"	d	file:
SONIC_RSA	dp8393x.c	72;"	d	file:
SONIC_RSC	dp8393x.c	90;"	d	file:
SONIC_RWP	dp8393x.c	75;"	d	file:
SONIC_SR	dp8393x.c	87;"	d	file:
SONIC_TCR	dp8393x.c	54;"	d	file:
SONIC_TCR_BCM	dp8393x.c	128;"	d	file:
SONIC_TCR_CRCI	dp8393x.c	134;"	d	file:
SONIC_TCR_CRSL	dp8393x.c	131;"	d	file:
SONIC_TCR_EXC	dp8393x.c	130;"	d	file:
SONIC_TCR_EXD	dp8393x.c	133;"	d	file:
SONIC_TCR_FU	dp8393x.c	129;"	d	file:
SONIC_TCR_NCRS	dp8393x.c	132;"	d	file:
SONIC_TCR_PINT	dp8393x.c	135;"	d	file:
SONIC_TCR_PTX	dp8393x.c	127;"	d	file:
SONIC_TFC	dp8393x.c	60;"	d	file:
SONIC_TFS	dp8393x.c	63;"	d	file:
SONIC_TPS	dp8393x.c	59;"	d	file:
SONIC_TRBA0	dp8393x.c	76;"	d	file:
SONIC_TRBA1	dp8393x.c	77;"	d	file:
SONIC_TSA0	dp8393x.c	61;"	d	file:
SONIC_TSA1	dp8393x.c	62;"	d	file:
SONIC_TTDA	dp8393x.c	79;"	d	file:
SONIC_URDA	dp8393x.c	64;"	d	file:
SONIC_URRA	dp8393x.c	71;"	d	file:
SONIC_UTDA	dp8393x.c	57;"	d	file:
SONIC_WT0	dp8393x.c	88;"	d	file:
SONIC_WT1	dp8393x.c	89;"	d	file:
SPAPRVLAN_FLAG_RX_BUF_POOLS	spapr_llan.c	46;"	d	file:
SPAPRVLAN_FLAG_RX_BUF_POOLS_BIT	spapr_llan.c	45;"	d	file:
STATE_EMPTY	milkymist-minimac2.c	/^    STATE_EMPTY   = 0,$/;"	e	enum:__anon33	file:
STATE_LOADED	milkymist-minimac2.c	/^    STATE_LOADED  = 1,$/;"	e	enum:__anon33	file:
STATE_PENDING	milkymist-minimac2.c	/^    STATE_PENDING = 2,$/;"	e	enum:__anon33	file:
STATUS_C	eepro100.c	/^    STATUS_C = BIT(15),$/;"	e	enum:__anon80	file:
STATUS_OK	eepro100.c	/^    STATUS_OK = BIT(13),$/;"	e	enum:__anon80	file:
STELLARIS_ENET	stellaris_enet.c	47;"	d	file:
SW_INT	lan9118.c	70;"	d	file:
SYSBUS_PCNET	lance.c	49;"	d	file:
StellarisEnetRxFrame	stellaris_enet.c	/^} StellarisEnetRxFrame;$/;"	t	typeref:struct:__anon124	file:
SysBusPCNetState	lance.c	/^} SysBusPCNetState;$/;"	t	typeref:struct:__anon105	file:
TBASE0	fsl_etsec/registers.h	125;"	d
TBASE1	fsl_etsec/registers.h	126;"	d
TBASE2	fsl_etsec/registers.h	127;"	d
TBASE3	fsl_etsec/registers.h	128;"	d
TBASE4	fsl_etsec/registers.h	129;"	d
TBASE5	fsl_etsec/registers.h	130;"	d
TBASE6	fsl_etsec/registers.h	131;"	d
TBASE7	fsl_etsec/registers.h	132;"	d
TBASEH	fsl_etsec/registers.h	124;"	d
TBCA	fsl_etsec/registers.h	239;"	d
TBDBPH	fsl_etsec/registers.h	115;"	d
TBIPA	fsl_etsec/registers.h	107;"	d
TBPTR0	fsl_etsec/registers.h	116;"	d
TBPTR1	fsl_etsec/registers.h	117;"	d
TBPTR2	fsl_etsec/registers.h	118;"	d
TBPTR3	fsl_etsec/registers.h	119;"	d
TBPTR4	fsl_etsec/registers.h	120;"	d
TBPTR5	fsl_etsec/registers.h	121;"	d
TBPTR6	fsl_etsec/registers.h	122;"	d
TBPTR7	fsl_etsec/registers.h	123;"	d
TBYT	fsl_etsec/registers.h	236;"	d
TCP_HEADER_CLEAR_FLAGS	rtl8139.c	1922;"	d	file:
TCR_EPH_LOOP	smc91c111.c	87;"	d	file:
TCR_FORCOL	smc91c111.c	90;"	d	file:
TCR_LOOP	smc91c111.c	91;"	d	file:
TCR_NOCRC	smc91c111.c	88;"	d	file:
TCR_PAD_EN	smc91c111.c	89;"	d	file:
TCR_TXEN	smc91c111.c	92;"	d	file:
TCTR	rtl8139.c	/^    uint32_t   TCTR;$/;"	m	struct:RTL8139State	file:
TCTRL	fsl_etsec/registers.h	108;"	d
TCTR_base	rtl8139.c	/^    int64_t    TCTR_base;$/;"	m	struct:RTL8139State	file:
TC_FCS	xilinx_axienet.c	/^    TC_FCS  = (1 << 29),$/;"	e	enum:__anon131	file:
TC_JUM	xilinx_axienet.c	/^    TC_JUM  = (1 << 30),$/;"	e	enum:__anon131	file:
TC_RST	xilinx_axienet.c	/^    TC_RST  = (1 << 31),$/;"	e	enum:__anon131	file:
TC_TX	xilinx_axienet.c	/^    TC_TX   = (1 << 28),$/;"	e	enum:__anon131	file:
TC_VLAN	xilinx_axienet.c	/^    TC_VLAN = (1 << 27),$/;"	e	enum:__anon131	file:
TDFA_INT	lan9118.c	85;"	d	file:
TDFO_INT	lan9118.c	84;"	d	file:
TDFR	fsl_etsec/registers.h	241;"	d
TDFU_INT	lan9118.c	83;"	d	file:
TDRP	fsl_etsec/registers.h	248;"	d
TEDF	fsl_etsec/registers.h	242;"	d
TEMAC	xilinx_axienet.c	/^    struct TEMAC TEMAC;$/;"	m	struct:XilinxAXIEnet	typeref:struct:XilinxAXIEnet::TEMAC	file:
TEMAC	xilinx_axienet.c	/^struct TEMAC  {$/;"	s	file:
TFCS	fsl_etsec/registers.h	250;"	d
TFRG	fsl_etsec/registers.h	254;"	d
TJBR	fsl_etsec/registers.h	249;"	d
TLCL	fsl_etsec/registers.h	245;"	d
TMCA	fsl_etsec/registers.h	238;"	d
TMCL	fsl_etsec/registers.h	244;"	d
TMDLOAD	pcnet.c	572;"	d	file:
TMDL_BCNT_MASK	pcnet.c	288;"	d	file:
TMDL_BCNT_SH	pcnet.c	289;"	d	file:
TMDL_ONES_MASK	pcnet.c	290;"	d	file:
TMDL_ONES_SH	pcnet.c	291;"	d	file:
TMDM_BUFF_MASK	pcnet.c	328;"	d	file:
TMDM_BUFF_SH	pcnet.c	329;"	d	file:
TMDM_EXDEF_MASK	pcnet.c	324;"	d	file:
TMDM_EXDEF_SH	pcnet.c	325;"	d	file:
TMDM_LCAR_MASK	pcnet.c	320;"	d	file:
TMDM_LCAR_SH	pcnet.c	321;"	d	file:
TMDM_LCOL_MASK	pcnet.c	322;"	d	file:
TMDM_LCOL_SH	pcnet.c	323;"	d	file:
TMDM_RTRY_MASK	pcnet.c	318;"	d	file:
TMDM_RTRY_SH	pcnet.c	319;"	d	file:
TMDM_TDR_MASK	pcnet.c	316;"	d	file:
TMDM_TDR_SH	pcnet.c	317;"	d	file:
TMDM_TRC_MASK	pcnet.c	314;"	d	file:
TMDM_TRC_SH	pcnet.c	315;"	d	file:
TMDM_UFLO_MASK	pcnet.c	326;"	d	file:
TMDM_UFLO_SH	pcnet.c	327;"	d	file:
TMDSTORE	pcnet.c	574;"	d	file:
TMDS_ADDFCS_MASK	pcnet.c	307;"	d	file:
TMDS_ADDFCS_SH	pcnet.c	308;"	d	file:
TMDS_BPE_MASK	pcnet.c	293;"	d	file:
TMDS_BPE_SH	pcnet.c	294;"	d	file:
TMDS_DEF_MASK	pcnet.c	299;"	d	file:
TMDS_DEF_SH	pcnet.c	300;"	d	file:
TMDS_ENP_MASK	pcnet.c	295;"	d	file:
TMDS_ENP_SH	pcnet.c	296;"	d	file:
TMDS_ERR_MASK	pcnet.c	309;"	d	file:
TMDS_ERR_SH	pcnet.c	310;"	d	file:
TMDS_LTINT_MASK	pcnet.c	303;"	d	file:
TMDS_LTINT_SH	pcnet.c	304;"	d	file:
TMDS_NOFCS_MASK	pcnet.c	305;"	d	file:
TMDS_NOFCS_SH	pcnet.c	306;"	d	file:
TMDS_ONE_MASK	pcnet.c	301;"	d	file:
TMDS_ONE_SH	pcnet.c	302;"	d	file:
TMDS_OWN_MASK	pcnet.c	311;"	d	file:
TMDS_OWN_SH	pcnet.c	312;"	d	file:
TMDS_STP_MASK	pcnet.c	297;"	d	file:
TMDS_STP_SH	pcnet.c	298;"	d	file:
TMROFF_H	fsl_etsec/registers.h	305;"	d
TMROFF_L	fsl_etsec/registers.h	306;"	d
TMR_ACC	fsl_etsec/registers.h	303;"	d
TMR_ADD	fsl_etsec/registers.h	302;"	d
TMR_ALARM1_H	fsl_etsec/registers.h	307;"	d
TMR_ALARM1_L	fsl_etsec/registers.h	308;"	d
TMR_ALARM2_H	fsl_etsec/registers.h	309;"	d
TMR_ALARM2_L	fsl_etsec/registers.h	310;"	d
TMR_CNT_H	fsl_etsec/registers.h	300;"	d
TMR_CNT_L	fsl_etsec/registers.h	301;"	d
TMR_CTRL	fsl_etsec/registers.h	294;"	d
TMR_ETTS1_H	fsl_etsec/registers.h	314;"	d
TMR_ETTS1_L	fsl_etsec/registers.h	315;"	d
TMR_ETTS2_H	fsl_etsec/registers.h	316;"	d
TMR_ETTS2_L	fsl_etsec/registers.h	317;"	d
TMR_FIPER1	fsl_etsec/registers.h	311;"	d
TMR_FIPER2	fsl_etsec/registers.h	312;"	d
TMR_FIPER3	fsl_etsec/registers.h	313;"	d
TMR_PEMASK	fsl_etsec/registers.h	298;"	d
TMR_PEVENT	fsl_etsec/registers.h	297;"	d
TMR_PRSC	fsl_etsec/registers.h	304;"	d
TMR_RXTS_H	fsl_etsec/registers.h	166;"	d
TMR_RXTS_L	fsl_etsec/registers.h	167;"	d
TMR_STAT	fsl_etsec/registers.h	299;"	d
TMR_TEMASK	fsl_etsec/registers.h	296;"	d
TMR_TEVENT	fsl_etsec/registers.h	295;"	d
TMR_TXTS1_H	fsl_etsec/registers.h	135;"	d
TMR_TXTS1_ID	fsl_etsec/registers.h	133;"	d
TMR_TXTS1_L	fsl_etsec/registers.h	136;"	d
TMR_TXTS2_H	fsl_etsec/registers.h	137;"	d
TMR_TXTS2_ID	fsl_etsec/registers.h	134;"	d
TMR_TXTS2_L	fsl_etsec/registers.h	138;"	d
TNCL	fsl_etsec/registers.h	247;"	d
TOVR	fsl_etsec/registers.h	252;"	d
TPKT	fsl_etsec/registers.h	237;"	d
TQUEUE	fsl_etsec/registers.h	112;"	d
TR03WT	fsl_etsec/registers.h	113;"	d
TR127	fsl_etsec/registers.h	213;"	d
TR1K	fsl_etsec/registers.h	216;"	d
TR255	fsl_etsec/registers.h	214;"	d
TR47WT	fsl_etsec/registers.h	114;"	d
TR511	fsl_etsec/registers.h	215;"	d
TR64	fsl_etsec/registers.h	212;"	d
TRACE	eepro100.c	81;"	d	file:
TRMAX	fsl_etsec/registers.h	217;"	d
TRMGV	fsl_etsec/registers.h	218;"	d
TSAD_OWN0	rtl8139.c	/^ TSAD_OWN0 = 1<<00, \/\/ OWN bit of Descriptor 0$/;"	e	enum:TSAD_bits	file:
TSAD_OWN1	rtl8139.c	/^ TSAD_OWN1 = 1<<01, \/\/ OWN bit of Descriptor 1$/;"	e	enum:TSAD_bits	file:
TSAD_OWN2	rtl8139.c	/^ TSAD_OWN2 = 1<<02, \/\/ OWN bit of Descriptor 2$/;"	e	enum:TSAD_bits	file:
TSAD_OWN3	rtl8139.c	/^ TSAD_OWN3 = 1<<03, \/\/ OWN bit of Descriptor 3$/;"	e	enum:TSAD_bits	file:
TSAD_TABT0	rtl8139.c	/^ TSAD_TABT0 = 1<<04, \/\/ TABT bit of Descriptor 0$/;"	e	enum:TSAD_bits	file:
TSAD_TABT1	rtl8139.c	/^ TSAD_TABT1 = 1<<05, \/\/ TABT bit of Descriptor 1$/;"	e	enum:TSAD_bits	file:
TSAD_TABT2	rtl8139.c	/^ TSAD_TABT2 = 1<<06, \/\/ TABT bit of Descriptor 2$/;"	e	enum:TSAD_bits	file:
TSAD_TABT3	rtl8139.c	/^ TSAD_TABT3 = 1<<07, \/\/ TABT bit of Descriptor 3$/;"	e	enum:TSAD_bits	file:
TSAD_TOK0	rtl8139.c	/^ TSAD_TOK0 = 1<<12, \/\/ TOK bit of Descriptor 0$/;"	e	enum:TSAD_bits	file:
TSAD_TOK1	rtl8139.c	/^ TSAD_TOK1 = 1<<13, \/\/ TOK bit of Descriptor 1$/;"	e	enum:TSAD_bits	file:
TSAD_TOK2	rtl8139.c	/^ TSAD_TOK2 = 1<<14, \/\/ TOK bit of Descriptor 2$/;"	e	enum:TSAD_bits	file:
TSAD_TOK3	rtl8139.c	/^ TSAD_TOK3 = 1<<15, \/\/ TOK bit of Descriptor 3$/;"	e	enum:TSAD_bits	file:
TSAD_TUN0	rtl8139.c	/^ TSAD_TUN0 = 1<<8, \/\/ TUN bit of Descriptor 0$/;"	e	enum:TSAD_bits	file:
TSAD_TUN1	rtl8139.c	/^ TSAD_TUN1 = 1<<9, \/\/ TUN bit of Descriptor 1$/;"	e	enum:TSAD_bits	file:
TSAD_TUN2	rtl8139.c	/^ TSAD_TUN2 = 1<<10, \/\/ TUN bit of Descriptor 2$/;"	e	enum:TSAD_bits	file:
TSAD_TUN3	rtl8139.c	/^ TSAD_TUN3 = 1<<11, \/\/ TUN bit of Descriptor 3$/;"	e	enum:TSAD_bits	file:
TSAD_bits	rtl8139.c	/^enum TSAD_bits {$/;"	g	file:
TSCL	fsl_etsec/registers.h	243;"	d
TSEC_ID	fsl_etsec/registers.h	99;"	d
TSEC_ID2	fsl_etsec/registers.h	100;"	d
TSFF_INT	lan9118.c	86;"	d	file:
TSFL_INT	lan9118.c	87;"	d	file:
TSOBytesTxOK	vmxnet3.h	/^    u64            TSOBytesTxOK;$/;"	m	struct:UPT1_TxStats
TSOPktsTxOK	vmxnet3.h	/^    u64            TSOPktsTxOK;  \/* TSO pkts post-segmentation *\/$/;"	m	struct:UPT1_TxStats
TSTAT	fsl_etsec/registers.h	109;"	d
TUND	fsl_etsec/registers.h	253;"	d
TURNAROUND	etraxfs_eth.c	/^        TURNAROUND,$/;"	e	enum:qemu_mdio::__anon118	file:
TURNAROUND	xilinx_axienet.c	/^        TURNAROUND,$/;"	e	enum:MDIOBus::__anon126	file:
TXCF	fsl_etsec/registers.h	251;"	d
TXCL	fsl_etsec/registers.h	246;"	d
TXCTRL	opencores_eth.c	/^    TXCTRL,$/;"	e	enum:__anon137	file:
TXD_CRC	opencores_eth.c	/^    TXD_CRC = 0x800,$/;"	e	enum:__anon148	file:
TXD_CS	opencores_eth.c	/^    TXD_CS = 0x1,$/;"	e	enum:__anon148	file:
TXD_DF	opencores_eth.c	/^    TXD_DF = 0x2,$/;"	e	enum:__anon148	file:
TXD_IRQ	opencores_eth.c	/^    TXD_IRQ = 0x4000,$/;"	e	enum:__anon148	file:
TXD_LC	opencores_eth.c	/^    TXD_LC = 0x4,$/;"	e	enum:__anon148	file:
TXD_LEN	opencores_eth.c	/^    TXD_LEN = 0xffff0000,$/;"	e	enum:__anon148	file:
TXD_LEN_LBN	opencores_eth.c	/^    TXD_LEN_LBN = 16,$/;"	e	enum:__anon148	file:
TXD_PAD	opencores_eth.c	/^    TXD_PAD = 0x1000,$/;"	e	enum:__anon148	file:
TXD_RD	opencores_eth.c	/^    TXD_RD = 0x8000,$/;"	e	enum:__anon148	file:
TXD_RL	opencores_eth.c	/^    TXD_RL = 0x8,$/;"	e	enum:__anon148	file:
TXD_RTRY	opencores_eth.c	/^    TXD_RTRY = 0xf0,$/;"	e	enum:__anon148	file:
TXD_RTRY_LBN	opencores_eth.c	/^    TXD_RTRY_LBN = 4,$/;"	e	enum:__anon148	file:
TXD_UR	opencores_eth.c	/^    TXD_UR = 0x100,$/;"	e	enum:__anon148	file:
TXD_WR	opencores_eth.c	/^    TXD_WR = 0x2000,$/;"	e	enum:__anon148	file:
TXE_INT	lan9118.c	82;"	d	file:
TXIC	fsl_etsec/registers.h	111;"	d
TXPF	fsl_etsec/registers.h	240;"	d
TXSO_INT	lan9118.c	79;"	d	file:
TXSTOP_INT	lan9118.c	71;"	d	file:
TX_B	lan9118.c	/^    TX_B,$/;"	e	enum:tx_state	file:
TX_BD_NUM	opencores_eth.c	/^    TX_BD_NUM,$/;"	e	enum:__anon137	file:
TX_DATA	lan9118.c	/^    TX_DATA$/;"	e	enum:tx_state	file:
TX_IDLE	lan9118.c	/^    TX_IDLE,$/;"	e	enum:tx_state	file:
TX_IOC_INT	lan9118.c	74;"	d	file:
TYPE_DP8393X	dp8393x.c	145;"	d	file:
TYPE_E1000E	e1000e.c	51;"	d	file:
TYPE_E1000_BASE	e1000.c	137;"	d	file:
TYPE_ETRAX_FS_ETH	etraxfs_eth.c	326;"	d	file:
TYPE_ETSEC_COMMON	fsl_etsec/etsec.h	152;"	d
TYPE_ISA_NE2000	ne2000-isa.c	35;"	d	file:
TYPE_LAN9118	lan9118.c	177;"	d	file:
TYPE_LANCE	lance.c	48;"	d	file:
TYPE_MILKYMIST_MINIMAC2	milkymist-minimac2.c	97;"	d	file:
TYPE_MIPS_NET	mipsnet.c	23;"	d	file:
TYPE_OPEN_ETH	opencores_eth.c	271;"	d	file:
TYPE_PCI_PCNET	pcnet-pci.c	49;"	d	file:
TYPE_RTL8139	rtl8139.c	93;"	d	file:
TYPE_SMC91C111	smc91c111.c	20;"	d	file:
TYPE_STELLARIS_ENET	stellaris_enet.c	46;"	d	file:
TYPE_VIO_SPAPR_VLAN_DEVICE	spapr_llan.c	85;"	d	file:
TYPE_VMXNET3	vmxnet3.c	133;"	d	file:
TYPE_XGMAC	xgmac.c	139;"	d	file:
TYPE_XILINX_AXI_ENET	xilinx_axienet.c	36;"	d	file:
TYPE_XILINX_AXI_ENET_CONTROL_STREAM	xilinx_axienet.c	38;"	d	file:
TYPE_XILINX_AXI_ENET_DATA_STREAM	xilinx_axienet.c	37;"	d	file:
TYPE_XILINX_ETHLITE	xilinx_ethlite.c	53;"	d	file:
Timer	rtl8139.c	/^    Timer = 0x48,        \/* A general-purpose counter. *\/$/;"	e	enum:RTL8139_registers	file:
TimerInt	rtl8139.c	/^    uint32_t   TimerInt;$/;"	m	struct:RTL8139State	file:
Tx1Col	rtl8139.c	/^    uint32_t   Tx1Col;$/;"	m	struct:RTL8139TallyCounters	file:
TxAborted	rtl8139.c	/^    TxAborted = 0x40000000,$/;"	e	enum:TxStatusBits	file:
TxAbt	rtl8139.c	/^    uint16_t   TxAbt;$/;"	m	struct:RTL8139TallyCounters	file:
TxAddr	rtl8139.c	/^    uint32_t TxAddr[4];   \/* TxAddr0 *\/$/;"	m	struct:RTL8139State	file:
TxAddr0	rtl8139.c	/^    TxAddr0 = 0x20,  \/* Tx descriptors (also four 32bit). *\/$/;"	e	enum:RTL8139_registers	file:
TxCRC	rtl8139.c	/^    TxCRC = (1 << 16),    \/* DISABLE appending CRC to end of Tx packets *\/$/;"	e	enum:tx_config_bits	file:
TxCarrierLost	rtl8139.c	/^    TxCarrierLost = 0x80000000,$/;"	e	enum:TxStatusBits	file:
TxClearAbt	rtl8139.c	/^    TxClearAbt = (1 << 0),    \/* Clear abort (WO) *\/$/;"	e	enum:tx_config_bits	file:
TxConfig	rtl8139.c	/^    TxConfig = 0x40,$/;"	e	enum:RTL8139_registers	file:
TxConfig	rtl8139.c	/^    uint32_t TxConfig;$/;"	m	struct:RTL8139State	file:
TxDMAShift	rtl8139.c	/^    TxDMAShift = 8,        \/* DMA burst value (0-7) is shifted this many bits *\/$/;"	e	enum:tx_config_bits	file:
TxERR	rtl8139.c	/^    uint64_t   TxERR;$/;"	m	struct:RTL8139TallyCounters	file:
TxErr	rtl8139.c	/^    TxErr = 0x08,$/;"	e	enum:IntrStatusBits	file:
TxHostOwns	rtl8139.c	/^    TxHostOwns = 0x2000,$/;"	e	enum:TxStatusBits	file:
TxIFG84	rtl8139.c	/^        TxIFG84 = (0 << TxIFGShift),    \/* 8.4us \/ 840ns (10 \/ 100Mbps) *\/$/;"	e	enum:tx_config_bits	file:
TxIFG88	rtl8139.c	/^        TxIFG88 = (1 << TxIFGShift),    \/* 8.8us \/ 880ns (10 \/ 100Mbps) *\/$/;"	e	enum:tx_config_bits	file:
TxIFG92	rtl8139.c	/^        TxIFG92 = (2 << TxIFGShift),    \/* 9.2us \/ 920ns (10 \/ 100Mbps) *\/$/;"	e	enum:tx_config_bits	file:
TxIFG96	rtl8139.c	/^        TxIFG96 = (3 << TxIFGShift),    \/* 9.6us \/ 960ns (10 \/ 100Mbps) *\/$/;"	e	enum:tx_config_bits	file:
TxIFGShift	rtl8139.c	/^        TxIFGShift = 24,$/;"	e	enum:tx_config_bits	file:
TxLoopBack	rtl8139.c	/^    TxLoopBack = (1 << 18) | (1 << 17), \/* enable loopback test mode *\/$/;"	e	enum:tx_config_bits	file:
TxMCol	rtl8139.c	/^    uint32_t   TxMCol;$/;"	m	struct:RTL8139TallyCounters	file:
TxOK	rtl8139.c	/^    TxOK = 0x04,$/;"	e	enum:IntrStatusBits	file:
TxOk	rtl8139.c	/^    uint64_t   TxOk;$/;"	m	struct:RTL8139TallyCounters	file:
TxOutOfWindow	rtl8139.c	/^    TxOutOfWindow = 0x20000000,$/;"	e	enum:TxStatusBits	file:
TxPoll	rtl8139.c	/^    TxPoll        = 0xD9,    \/* Tell chip to check Tx descriptors for work *\/$/;"	e	enum:RTL8139_registers	file:
TxRetryShift	rtl8139.c	/^    TxRetryShift = 4,    \/* TXRR value (0-15) is shifted this many bits *\/$/;"	e	enum:tx_config_bits	file:
TxStatOK	rtl8139.c	/^    TxStatOK = 0x8000,$/;"	e	enum:TxStatusBits	file:
TxStatus	rtl8139.c	/^    uint32_t TxStatus[4]; \/* TxStatus0 in C mode*\/ \/* also DTCCR[0] and DTCCR[1] in C+ mode *\/$/;"	m	struct:RTL8139State	file:
TxStatus0	rtl8139.c	/^    TxStatus0 = 0x10,\/* Transmit status (Four 32bit registers). C mode only *\/$/;"	e	enum:RTL8139_registers	file:
TxStatusBits	rtl8139.c	/^enum TxStatusBits {$/;"	g	file:
TxSummary	rtl8139.c	/^    TxSummary = 0x60, \/* TSAD register. Transmit Status of All Descriptors*\/$/;"	e	enum:RTL8139_registers	file:
TxThresh	rtl8139.c	/^    TxThresh    = 0xEC, \/* Early Tx threshold *\/$/;"	e	enum:RTL8139_registers	file:
TxThresh	rtl8139.c	/^    uint8_t  TxThresh;$/;"	m	struct:RTL8139State	file:
TxUnderrun	rtl8139.c	/^    TxUnderrun = 0x4000,$/;"	e	enum:TxStatusBits	file:
TxUndrn	rtl8139.c	/^    uint16_t   TxUndrn;$/;"	m	struct:RTL8139TallyCounters	file:
TxVersionMask	rtl8139.c	/^    TxVersionMask = 0x7C800000, \/* mask out version bits 30-26, 23 *\/$/;"	e	enum:tx_config_bits	file:
UPT1_F_LRO	vmxnet3.h	/^    UPT1_F_LRO           = 0x0008,$/;"	e	enum:__anon109
UPT1_F_RSS	vmxnet3.h	/^    UPT1_F_RSS           = 0x0002,$/;"	e	enum:__anon109
UPT1_F_RXCSUM	vmxnet3.h	/^    UPT1_F_RXCSUM        = 0x0001, \/* rx csum verification *\/$/;"	e	enum:__anon109
UPT1_F_RXVLAN	vmxnet3.h	/^    UPT1_F_RXVLAN        = 0x0004, \/* VLAN tag stripping *\/$/;"	e	enum:__anon109
UPT1_IML_ADAPTIVE	vmxnet3.h	/^    UPT1_IML_ADAPTIVE    = 8, \/* adpative intr moderation *\/$/;"	e	enum:__anon106
UPT1_IML_HIGHEST	vmxnet3.h	/^    UPT1_IML_HIGHEST    = 7, \/* least intr generated *\/$/;"	e	enum:__anon106
UPT1_IML_NONE	vmxnet3.h	/^    UPT1_IML_NONE        = 0, \/* no interrupt moderation *\/$/;"	e	enum:__anon106
UPT1_RSSConf	vmxnet3.h	/^struct UPT1_RSSConf {$/;"	s
UPT1_RSS_HASH_FUNC_NONE	vmxnet3.h	/^    UPT1_RSS_HASH_FUNC_NONE      = 0x0,$/;"	e	enum:__anon108
UPT1_RSS_HASH_FUNC_TOEPLITZ	vmxnet3.h	/^    UPT1_RSS_HASH_FUNC_TOEPLITZ  = 0x01,$/;"	e	enum:__anon108
UPT1_RSS_HASH_TYPE_IPV4	vmxnet3.h	/^    UPT1_RSS_HASH_TYPE_IPV4      = 0x01,$/;"	e	enum:__anon107
UPT1_RSS_HASH_TYPE_IPV6	vmxnet3.h	/^    UPT1_RSS_HASH_TYPE_IPV6      = 0x04,$/;"	e	enum:__anon107
UPT1_RSS_HASH_TYPE_NONE	vmxnet3.h	/^    UPT1_RSS_HASH_TYPE_NONE      = 0x0,$/;"	e	enum:__anon107
UPT1_RSS_HASH_TYPE_TCP_IPV4	vmxnet3.h	/^    UPT1_RSS_HASH_TYPE_TCP_IPV4  = 0x02,$/;"	e	enum:__anon107
UPT1_RSS_HASH_TYPE_TCP_IPV6	vmxnet3.h	/^    UPT1_RSS_HASH_TYPE_TCP_IPV6  = 0x08,$/;"	e	enum:__anon107
UPT1_RSS_MAX_IND_TABLE_SIZE	vmxnet3.h	124;"	d
UPT1_RSS_MAX_KEY_SIZE	vmxnet3.h	123;"	d
UPT1_RxStats	vmxnet3.h	/^struct UPT1_RxStats {$/;"	s
UPT1_TxStats	vmxnet3.h	/^struct UPT1_TxStats {$/;"	s
USE_RECSMALL	opencores_eth.c	45;"	d	file:
VIO_SPAPR_VLAN_DEVICE	spapr_llan.c	86;"	d	file:
VIOsPAPRVLANDevice	spapr_llan.c	/^typedef struct VIOsPAPRVLANDevice {$/;"	s	file:
VIOsPAPRVLANDevice	spapr_llan.c	/^} VIOsPAPRVLANDevice;$/;"	t	typeref:struct:VIOsPAPRVLANDevice	file:
VIRTIO_NET_RX_QUEUE_DEFAULT_SIZE	virtio-net.c	35;"	d	file:
VIRTIO_NET_RX_QUEUE_MIN_SIZE	virtio-net.c	37;"	d	file:
VIRTIO_NET_VM_VERSION	virtio-net.c	29;"	d	file:
VLAN_BD_ADDR	spapr_llan.c	61;"	d	file:
VLAN_BD_ADDR_MASK	spapr_llan.c	60;"	d	file:
VLAN_BD_CSUM_GOOD	spapr_llan.c	57;"	d	file:
VLAN_BD_LEN	spapr_llan.c	59;"	d	file:
VLAN_BD_LEN_MASK	spapr_llan.c	58;"	d	file:
VLAN_BD_NO_CSUM	spapr_llan.c	56;"	d	file:
VLAN_BD_TOGGLE	spapr_llan.c	55;"	d	file:
VLAN_BD_VALID	spapr_llan.c	54;"	d	file:
VLAN_FILTER_BD_OFF	spapr_llan.c	74;"	d	file:
VLAN_HLEN	rtl8139.c	81;"	d	file:
VLAN_MAX_BUFS	spapr_llan.c	83;"	d	file:
VLAN_RQ_ALIGNMENT	spapr_llan.c	72;"	d	file:
VLAN_RXQC_CSUM_GOOD	spapr_llan.c	70;"	d	file:
VLAN_RXQC_NO_CSUM	spapr_llan.c	69;"	d	file:
VLAN_RXQC_TOGGLE	spapr_llan.c	67;"	d	file:
VLAN_RXQC_VALID	spapr_llan.c	68;"	d	file:
VLAN_RXQ_BD_OFF	spapr_llan.c	73;"	d	file:
VLAN_RX_BDS_LEN	spapr_llan.c	82;"	d	file:
VLAN_RX_BDS_OFF	spapr_llan.c	75;"	d	file:
VLAN_TCI_LEN	rtl8139.c	80;"	d	file:
VLAN_VALID_BD	spapr_llan.c	63;"	d	file:
VMSTATE_E1000E_INTR_DELAY_TIMER	e1000e.c	580;"	d	file:
VMSTATE_E1000E_INTR_DELAY_TIMER_ARRAY	e1000e.c	584;"	d	file:
VMWARE_UTILS_H	vmware_utils.h	18;"	d
VMW_CBPRN	vmxnet_debug.h	89;"	d
VMW_CFPRN	vmxnet_debug.h	129;"	d
VMW_ERPRN	vmxnet_debug.h	113;"	d
VMW_IRPRN	vmxnet_debug.h	121;"	d
VMW_IS_MULTIREG_ADDR	vmware_utils.h	136;"	d
VMW_MULTIREG_IDX_BY_ADDR	vmware_utils.h	144;"	d
VMW_PKPRN	vmxnet_debug.h	97;"	d
VMW_RIPRN	vmxnet_debug.h	137;"	d
VMW_SHPRN	vmxnet_debug.h	81;"	d
VMW_WRPRN	vmxnet_debug.h	105;"	d
VMXNET3	vmxnet3.c	134;"	d	file:
VMXNET3Class	vmxnet3.c	/^typedef struct VMXNET3Class {$/;"	s	file:
VMXNET3Class	vmxnet3.c	/^} VMXNET3Class;$/;"	t	typeref:struct:VMXNET3Class	file:
VMXNET3State	vmxnet3.c	/^} VMXNET3State;$/;"	t	typeref:struct:__anon101	file:
VMXNET3_BAR0_IDX	vmxnet3.c	55;"	d	file:
VMXNET3_BAR1_IDX	vmxnet3.c	56;"	d	file:
VMXNET3_CDTYPE_RXCOMP	vmxnet3.h	477;"	d
VMXNET3_CDTYPE_TXCOMP	vmxnet3.h	476;"	d
VMXNET3_CLEAR_VFTABLE_ENTRY	vmxnet3.h	736;"	d
VMXNET3_CMD_ACTIVATE_DEV	vmxnet3.h	/^    VMXNET3_CMD_ACTIVATE_DEV = VMXNET3_CMD_FIRST_SET, \/* 0xCAFE0000 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_FIRST_GET	vmxnet3.h	/^    VMXNET3_CMD_FIRST_GET = 0xF00D0000,$/;"	e	enum:__anon112
VMXNET3_CMD_FIRST_SET	vmxnet3.h	/^    VMXNET3_CMD_FIRST_SET = 0xCAFE0000,$/;"	e	enum:__anon112
VMXNET3_CMD_GET_ADAPTIVE_RING_INFO	vmxnet3.h	/^    VMXNET3_CMD_GET_ADAPTIVE_RING_INFO                    \/* 0xF00D0009 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_GET_CONF_INTR	vmxnet3.h	/^    VMXNET3_CMD_GET_CONF_INTR,                            \/* 0xF00D0008 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_GET_DEV_EXTRA_INFO	vmxnet3.h	/^    VMXNET3_CMD_GET_DEV_EXTRA_INFO,                       \/* 0xF00D0007 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_GET_DID_HI	vmxnet3.h	/^    VMXNET3_CMD_GET_DID_HI,                               \/* 0xF00D0006 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_GET_DID_LO	vmxnet3.h	/^    VMXNET3_CMD_GET_DID_LO,                               \/* 0xF00D0005 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_GET_LINK	vmxnet3.h	/^    VMXNET3_CMD_GET_LINK,                                 \/* 0xF00D0002 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_GET_PERM_MAC_HI	vmxnet3.h	/^    VMXNET3_CMD_GET_PERM_MAC_HI,                          \/* 0xF00D0004 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_GET_PERM_MAC_LO	vmxnet3.h	/^    VMXNET3_CMD_GET_PERM_MAC_LO,                          \/* 0xF00D0003 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_GET_QUEUE_STATUS	vmxnet3.h	/^    VMXNET3_CMD_GET_QUEUE_STATUS = VMXNET3_CMD_FIRST_GET, \/* 0xF00D0000 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_GET_STATS	vmxnet3.h	/^    VMXNET3_CMD_GET_STATS,                                \/* 0xF00D0001 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_LOAD_PLUGIN	vmxnet3.h	/^    VMXNET3_CMD_LOAD_PLUGIN,                          \/* 0xCAFE000A *\/$/;"	e	enum:__anon112
VMXNET3_CMD_QUIESCE_DEV	vmxnet3.h	/^    VMXNET3_CMD_QUIESCE_DEV,                          \/* 0xCAFE0001 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_RESET_DEV	vmxnet3.h	/^    VMXNET3_CMD_RESET_DEV,                            \/* 0xCAFE0002 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_UPDATE_FEATURE	vmxnet3.h	/^    VMXNET3_CMD_UPDATE_FEATURE,                       \/* 0xCAFE0009 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_UPDATE_IML	vmxnet3.h	/^    VMXNET3_CMD_UPDATE_IML,                           \/* 0xCAFE0007 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_UPDATE_MAC_FILTERS	vmxnet3.h	/^    VMXNET3_CMD_UPDATE_MAC_FILTERS,                   \/* 0xCAFE0004 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_UPDATE_PMCFG	vmxnet3.h	/^    VMXNET3_CMD_UPDATE_PMCFG,                         \/* 0xCAFE0008 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_UPDATE_RSSIDT	vmxnet3.h	/^    VMXNET3_CMD_UPDATE_RSSIDT,                        \/* 0xCAFE0006 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_UPDATE_RX_MODE	vmxnet3.h	/^    VMXNET3_CMD_UPDATE_RX_MODE,                       \/* 0xCAFE0003 *\/$/;"	e	enum:__anon112
VMXNET3_CMD_UPDATE_VLAN_FILTERS	vmxnet3.h	/^    VMXNET3_CMD_UPDATE_VLAN_FILTERS,                  \/* 0xCAFE0005 *\/$/;"	e	enum:__anon112
VMXNET3_COMPAT_FLAG_DISABLE_PCIE	vmxnet3.c	45;"	d	file:
VMXNET3_COMPAT_FLAG_DISABLE_PCIE_BIT	vmxnet3.c	44;"	d	file:
VMXNET3_COMPAT_FLAG_OLD_MSI_OFFSETS	vmxnet3.c	42;"	d	file:
VMXNET3_COMPAT_FLAG_OLD_MSI_OFFSETS_BIT	vmxnet3.c	41;"	d	file:
VMXNET3_DEVICE_CLASS	vmxnet3.c	136;"	d	file:
VMXNET3_DEVICE_GET_CLASS	vmxnet3.c	138;"	d	file:
VMXNET3_DEVICE_MAX_RX_QUEUES	vmxnet3.h	22;"	d
VMXNET3_DEVICE_MAX_TX_QUEUES	vmxnet3.h	21;"	d
VMXNET3_DEVICE_REVISION	vmxnet3.c	71;"	d	file:
VMXNET3_DISABLE_ADAPTIVE_RING	vmxnet3.h	206;"	d
VMXNET3_DSN_OFFSET	vmxnet3.c	53;"	d	file:
VMXNET3_ECR_DEBUG	vmxnet3.h	720;"	d
VMXNET3_ECR_DIC	vmxnet3.h	719;"	d
VMXNET3_ECR_LINK	vmxnet3.h	718;"	d
VMXNET3_ECR_RQERR	vmxnet3.h	716;"	d
VMXNET3_ECR_TQERR	vmxnet3.h	717;"	d
VMXNET3_ERR_BIG_PKT	vmxnet3.h	/^ VMXNET3_ERR_BIG_PKT      = 0x80000002, \/* too many TxDesc for a pkt *\/$/;"	e	enum:__anon114
VMXNET3_ERR_DESC_NOT_SPT	vmxnet3.h	/^ VMXNET3_ERR_DESC_NOT_SPT = 0x80000003, \/* descriptor type not supported *\/$/;"	e	enum:__anon114
VMXNET3_ERR_NOEOP	vmxnet3.h	/^ VMXNET3_ERR_NOEOP        = 0x80000000, \/* cannot find the EOP desc of a pkt *\/$/;"	e	enum:__anon114
VMXNET3_ERR_SMALL_BUF	vmxnet3.h	/^ VMXNET3_ERR_SMALL_BUF    = 0x80000004, \/* type 0 buffer too small *\/$/;"	e	enum:__anon114
VMXNET3_ERR_STRESS	vmxnet3.h	/^ VMXNET3_ERR_STRESS       = 0x80000005, \/* stress option firing in vmkernel *\/$/;"	e	enum:__anon114
VMXNET3_ERR_SWITCH	vmxnet3.h	/^ VMXNET3_ERR_SWITCH       = 0x80000006, \/* mode switch failure *\/$/;"	e	enum:__anon114
VMXNET3_ERR_TXD_INVALID	vmxnet3.h	/^ VMXNET3_ERR_TXD_INVALID  = 0x80000007, \/* invalid TxDesc *\/$/;"	e	enum:__anon114
VMXNET3_ERR_TXD_REUSE	vmxnet3.h	/^ VMXNET3_ERR_TXD_REUSE    = 0x80000001, \/* reuse TxDesc before tx completion *\/$/;"	e	enum:__anon114
VMXNET3_EXP_EP_OFFSET	vmxnet3.c	48;"	d	file:
VMXNET3_FLIP_RING_GEN	vmxnet3.h	723;"	d
VMXNET3_GET_BYTE	vmxnet3.c	465;"	d	file:
VMXNET3_GOS_BITS_32	vmxnet3.h	/^    VMXNET3_GOS_BITS_32     = 1,$/;"	e	enum:__anon115
VMXNET3_GOS_BITS_64	vmxnet3.h	/^    VMXNET3_GOS_BITS_64     = 2,$/;"	e	enum:__anon115
VMXNET3_GOS_BITS_UNK	vmxnet3.h	/^    VMXNET3_GOS_BITS_UNK    = 0,   \/* unknown *\/$/;"	e	enum:__anon115
VMXNET3_GOS_TYPE_FREEBSD	vmxnet3.h	489;"	d
VMXNET3_GOS_TYPE_LINUX	vmxnet3.h	486;"	d
VMXNET3_GOS_TYPE_PXE	vmxnet3.h	490;"	d
VMXNET3_GOS_TYPE_SOLARIS	vmxnet3.h	488;"	d
VMXNET3_GOS_TYPE_UNK	vmxnet3.h	485;"	d
VMXNET3_GOS_TYPE_WIN	vmxnet3.h	487;"	d
VMXNET3_HDR_COPY_SIZE	vmxnet3.h	280;"	d
VMXNET3_IC_DISABLE_ALL	vmxnet3.h	587;"	d
VMXNET3_IMM_ACTIVE	vmxnet3.h	/^    VMXNET3_IMM_ACTIVE = 1,$/;"	e	enum:vmxnet3_intr_mask_mode
VMXNET3_IMM_AUTO	vmxnet3.h	/^    VMXNET3_IMM_AUTO   = 0,$/;"	e	enum:vmxnet3_intr_mask_mode
VMXNET3_IMM_LAZY	vmxnet3.h	/^    VMXNET3_IMM_LAZY   = 2$/;"	e	enum:vmxnet3_intr_mask_mode
VMXNET3_INC_RING_IDX_ONLY	vmxnet3.h	726;"	d
VMXNET3_INIT_GEN	vmxnet3.h	430;"	d
VMXNET3_IO_ADDR	vmxnet3.h	174;"	d
VMXNET3_IO_REG	vmxnet3.h	176;"	d
VMXNET3_IO_TYPE	vmxnet3.h	175;"	d
VMXNET3_IO_TYPE_PT	vmxnet3.h	172;"	d
VMXNET3_IO_TYPE_VD	vmxnet3.h	173;"	d
VMXNET3_IT_AUTO	vmxnet3.h	/^    VMXNET3_IT_AUTO = 0,$/;"	e	enum:vmxnet3_intr_type
VMXNET3_IT_INTX	vmxnet3.h	/^    VMXNET3_IT_INTX = 1,$/;"	e	enum:vmxnet3_intr_type
VMXNET3_IT_MSI	vmxnet3.h	/^    VMXNET3_IT_MSI  = 2,$/;"	e	enum:vmxnet3_intr_type
VMXNET3_IT_MSIX	vmxnet3.h	/^    VMXNET3_IT_MSIX = 3$/;"	e	enum:vmxnet3_intr_type
VMXNET3_LINK_DOWN	vmxnet3.h	746;"	d
VMXNET3_LINK_SPEED	vmxnet3.c	64;"	d	file:
VMXNET3_LINK_STATUS_UP	vmxnet3.c	67;"	d	file:
VMXNET3_LINK_UP	vmxnet3.h	745;"	d
VMXNET3_MAKE_BYTE	vmxnet3.c	466;"	d	file:
VMXNET3_MAX_CSUM_OFFSET	vmxnet3.h	446;"	d
VMXNET3_MAX_INTRS	vmxnet3.h	584;"	d
VMXNET3_MAX_MTU	vmxnet3.h	742;"	d
VMXNET3_MAX_NMSIX_INTRS	vmxnet3.c	74;"	d	file:
VMXNET3_MAX_RX_BUF_SIZE	vmxnet3.h	443;"	d
VMXNET3_MAX_RX_QUEUES	vmxnet3.h	582;"	d
VMXNET3_MAX_TXD_PER_PKT	vmxnet3.h	440;"	d
VMXNET3_MAX_TX_BUF_SIZE	vmxnet3.h	433;"	d
VMXNET3_MAX_TX_QUEUES	vmxnet3.h	581;"	d
VMXNET3_MIN_MTU	vmxnet3.h	743;"	d
VMXNET3_MIN_T0_BUF_SIZE	vmxnet3.h	445;"	d
VMXNET3_MSIX_BAR_IDX	vmxnet3.c	57;"	d	file:
VMXNET3_MSIX_BAR_SIZE	vmxnet3.c	37;"	d	file:
VMXNET3_MSIX_OFFSET	vmxnet3.c	51;"	d	file:
VMXNET3_MSI_OFFSET	vmxnet3.c	49;"	d	file:
VMXNET3_OFF_MSIX_PBA	vmxnet3.c	60;"	d	file:
VMXNET3_OFF_MSIX_TABLE	vmxnet3.c	59;"	d	file:
VMXNET3_OM_CSUM	vmxnet3.h	266;"	d
VMXNET3_OM_NONE	vmxnet3.h	265;"	d
VMXNET3_OM_TSO	vmxnet3.h	267;"	d
VMXNET3_PER_VECTOR_MASK	vmxnet3.c	2283;"	d	file:
VMXNET3_PKT_STATUS_DISCARD	vmxnet3.c	/^    VMXNET3_PKT_STATUS_DISCARD,\/* only for tx *\/$/;"	e	enum:__anon102	file:
VMXNET3_PKT_STATUS_ERROR	vmxnet3.c	/^    VMXNET3_PKT_STATUS_ERROR,$/;"	e	enum:__anon102	file:
VMXNET3_PKT_STATUS_OK	vmxnet3.c	/^    VMXNET3_PKT_STATUS_OK,$/;"	e	enum:__anon102	file:
VMXNET3_PKT_STATUS_OUT_OF_BUF	vmxnet3.c	/^    VMXNET3_PKT_STATUS_OUT_OF_BUF \/* only for rx *\/$/;"	e	enum:__anon102	file:
VMXNET3_PM_MAX_FILTERS	vmxnet3.h	641;"	d
VMXNET3_PM_MAX_MASK_SIZE	vmxnet3.h	643;"	d
VMXNET3_PM_MAX_PATTERN_SIZE	vmxnet3.h	642;"	d
VMXNET3_PM_WAKEUP_FILTER	vmxnet3.h	646;"	d
VMXNET3_PM_WAKEUP_MAGIC	vmxnet3.h	645;"	d
VMXNET3_PT_REG_SIZE	vmxnet3.h	165;"	d
VMXNET3_QUEUE_DESC_ALIGN	vmxnet3.h	522;"	d
VMXNET3_RCD_CSUM_OK	vmxnet3.h	404;"	d
VMXNET3_RCD_GEN_SHIFT	vmxnet3.h	401;"	d
VMXNET3_RCD_IPC_SHIFT	vmxnet3.h	397;"	d
VMXNET3_RCD_RSS_TYPE_IPV4	vmxnet3.h	/^    VMXNET3_RCD_RSS_TYPE_IPV4     = 1,$/;"	e	enum:__anon113
VMXNET3_RCD_RSS_TYPE_IPV6	vmxnet3.h	/^    VMXNET3_RCD_RSS_TYPE_IPV6     = 3,$/;"	e	enum:__anon113
VMXNET3_RCD_RSS_TYPE_NONE	vmxnet3.h	/^    VMXNET3_RCD_RSS_TYPE_NONE     = 0,$/;"	e	enum:__anon113
VMXNET3_RCD_RSS_TYPE_TCPIPV4	vmxnet3.h	/^    VMXNET3_RCD_RSS_TYPE_TCPIPV4  = 2,$/;"	e	enum:__anon113
VMXNET3_RCD_RSS_TYPE_TCPIPV6	vmxnet3.h	/^    VMXNET3_RCD_RSS_TYPE_TCPIPV6  = 4,$/;"	e	enum:__anon113
VMXNET3_RCD_TUC_SHIFT	vmxnet3.h	396;"	d
VMXNET3_RCD_TYPE_SHIFT	vmxnet3.h	400;"	d
VMXNET3_RC_RING_MAX_SIZE	vmxnet3.h	460;"	d
VMXNET3_READ_DRV_SHARED	vmxnet3.c	123;"	d	file:
VMXNET3_READ_DRV_SHARED16	vmxnet3.c	117;"	d	file:
VMXNET3_READ_DRV_SHARED32	vmxnet3.c	111;"	d	file:
VMXNET3_READ_DRV_SHARED64	vmxnet3.c	108;"	d	file:
VMXNET3_READ_DRV_SHARED8	vmxnet3.c	120;"	d	file:
VMXNET3_READ_RX_QUEUE_DESCR32	vmxnet3.c	98;"	d	file:
VMXNET3_READ_RX_QUEUE_DESCR64	vmxnet3.c	95;"	d	file:
VMXNET3_READ_TX_QUEUE_DESCR32	vmxnet3.c	83;"	d	file:
VMXNET3_READ_TX_QUEUE_DESCR64	vmxnet3.c	89;"	d	file:
VMXNET3_READ_TX_QUEUE_DESCR8	vmxnet3.c	77;"	d	file:
VMXNET3_REG_ALIGN	vmxnet3.h	168;"	d
VMXNET3_REG_ALIGN_MASK	vmxnet3.h	169;"	d
VMXNET3_REG_CMD	vmxnet3.h	/^    VMXNET3_REG_CMD        = 0x20,    \/* Command *\/$/;"	e	enum:__anon110
VMXNET3_REG_DSAH	vmxnet3.h	/^    VMXNET3_REG_DSAH    = 0x18,    \/* Driver Shared Address High *\/$/;"	e	enum:__anon110
VMXNET3_REG_DSAL	vmxnet3.h	/^    VMXNET3_REG_DSAL    = 0x10,    \/* Driver Shared Address Low *\/$/;"	e	enum:__anon110
VMXNET3_REG_ECR	vmxnet3.h	/^    VMXNET3_REG_ECR        = 0x40    \/* Event Cause Register *\/$/;"	e	enum:__anon110
VMXNET3_REG_ICR	vmxnet3.h	/^    VMXNET3_REG_ICR        = 0x38,    \/* Interrupt Cause Register *\/$/;"	e	enum:__anon110
VMXNET3_REG_IMR	vmxnet3.h	/^    VMXNET3_REG_IMR        = 0x0,     \/* Interrupt Mask Register *\/$/;"	e	enum:__anon111
VMXNET3_REG_MACH	vmxnet3.h	/^    VMXNET3_REG_MACH    = 0x30,    \/* MAC Address High *\/$/;"	e	enum:__anon110
VMXNET3_REG_MACL	vmxnet3.h	/^    VMXNET3_REG_MACL    = 0x28,    \/* MAC Address Low *\/$/;"	e	enum:__anon110
VMXNET3_REG_RXPROD	vmxnet3.h	/^    VMXNET3_REG_RXPROD    = 0x800, \/* Rx Producer Index for ring 1 *\/$/;"	e	enum:__anon111
VMXNET3_REG_RXPROD2	vmxnet3.h	/^    VMXNET3_REG_RXPROD2    = 0xA00     \/* Rx Producer Index for ring 2 *\/$/;"	e	enum:__anon111
VMXNET3_REG_TXPROD	vmxnet3.h	/^    VMXNET3_REG_TXPROD    = 0x600, \/* Tx Producer Index *\/$/;"	e	enum:__anon111
VMXNET3_REG_UVRS	vmxnet3.h	/^    VMXNET3_REG_UVRS    = 0x8,    \/* UPT Version Report Selection *\/$/;"	e	enum:__anon110
VMXNET3_REG_VRRS	vmxnet3.h	/^    VMXNET3_REG_VRRS    = 0x0,    \/* Vmxnet3 Revision Report Selection *\/$/;"	e	enum:__anon110
VMXNET3_REV1_MAGIC	vmxnet3.h	514;"	d
VMXNET3_RING_BA_ALIGN	vmxnet3.h	449;"	d
VMXNET3_RING_BA_MASK	vmxnet3.h	450;"	d
VMXNET3_RING_DUMP	vmxnet3.c	168;"	d	file:
VMXNET3_RING_SIZE_ALIGN	vmxnet3.h	453;"	d
VMXNET3_RING_SIZE_MASK	vmxnet3.h	454;"	d
VMXNET3_RXD_BTYPE_BODY	vmxnet3.h	326;"	d
VMXNET3_RXD_BTYPE_HEAD	vmxnet3.h	325;"	d
VMXNET3_RXD_BTYPE_SHIFT	vmxnet3.h	329;"	d
VMXNET3_RXD_GEN_SHIFT	vmxnet3.h	330;"	d
VMXNET3_RXM_ALL_MULTI	vmxnet3.h	/^    VMXNET3_RXM_ALL_MULTI = 0x08,  \/* all multicast *\/$/;"	e	enum:__anon116
VMXNET3_RXM_BCAST	vmxnet3.h	/^    VMXNET3_RXM_BCAST     = 0x04,  \/* broadcast only *\/$/;"	e	enum:__anon116
VMXNET3_RXM_MCAST	vmxnet3.h	/^    VMXNET3_RXM_MCAST     = 0x02,  \/* multicast passing the filters *\/$/;"	e	enum:__anon116
VMXNET3_RXM_PROMISC	vmxnet3.h	/^    VMXNET3_RXM_PROMISC   = 0x10  \/* promiscuous *\/$/;"	e	enum:__anon116
VMXNET3_RXM_UCAST	vmxnet3.h	/^    VMXNET3_RXM_UCAST     = 0x01,  \/* unicast only *\/$/;"	e	enum:__anon116
VMXNET3_RX_RINGS_PER_QUEUE	vmxnet3.c	248;"	d	file:
VMXNET3_RX_RING_MAX_SIZE	vmxnet3.h	459;"	d
VMXNET3_SET_VFTABLE_ENTRY	vmxnet3.h	734;"	d
VMXNET3_TCD_GEN_DWORD_SHIFT	vmxnet3.h	291;"	d
VMXNET3_TCD_GEN_SHIFT	vmxnet3.h	287;"	d
VMXNET3_TCD_GEN_SIZE	vmxnet3.h	288;"	d
VMXNET3_TCD_TXIDX_SHIFT	vmxnet3.h	289;"	d
VMXNET3_TCD_TXIDX_SIZE	vmxnet3.h	290;"	d
VMXNET3_TC_RING_MAX_SIZE	vmxnet3.h	458;"	d
VMXNET3_TXD_CQ	vmxnet3.h	276;"	d
VMXNET3_TXD_CQ_SHIFT	vmxnet3.h	271;"	d
VMXNET3_TXD_EOP	vmxnet3.h	277;"	d
VMXNET3_TXD_EOP_DWORD_SHIFT	vmxnet3.h	273;"	d
VMXNET3_TXD_EOP_SHIFT	vmxnet3.h	270;"	d
VMXNET3_TXD_EOP_SIZE	vmxnet3.h	407;"	d
VMXNET3_TXD_GEN	vmxnet3.h	278;"	d
VMXNET3_TXD_GEN_DWORD_SHIFT	vmxnet3.h	274;"	d
VMXNET3_TXD_GEN_SHIFT	vmxnet3.h	272;"	d
VMXNET3_TXD_GEN_SIZE	vmxnet3.h	406;"	d
VMXNET3_TXD_NEEDED	vmxnet3.h	436;"	d
VMXNET3_TX_RING_MAX_SIZE	vmxnet3.h	457;"	d
VMXNET3_UPT_REVISION	vmxnet3.c	70;"	d	file:
VMXNET3_USE_64BIT	vmxnet3.c	2282;"	d	file:
VMXNET3_VD_REG_SIZE	vmxnet3.h	166;"	d
VMXNET3_VFTABLE_ENTRY_IS_SET	vmxnet3.h	739;"	d
VMXNET3_VFT_SIZE	vmxnet3.h	601;"	d
VMXNET3_WRITE_DRV_SHARED32	vmxnet3.c	114;"	d	file:
VMXNET3_WRITE_RX_QUEUE_DESCR64	vmxnet3.c	101;"	d	file:
VMXNET3_WRITE_RX_QUEUE_DESCR8	vmxnet3.c	104;"	d	file:
VMXNET3_WRITE_TX_QUEUE_DESCR32	vmxnet3.c	86;"	d	file:
VMXNET3_WRITE_TX_QUEUE_DESCR64	vmxnet3.c	92;"	d	file:
VMXNET3_WRITE_TX_QUEUE_DESCR8	vmxnet3.c	80;"	d	file:
VMXNET_DEBUG_CB	vmxnet_debug.h	26;"	d
VMXNET_DEBUG_CB_ENABLED	vmxnet_debug.h	34;"	d
VMXNET_DEBUG_CB_ENABLED	vmxnet_debug.h	36;"	d
VMXNET_DEBUG_CONFIG	vmxnet_debug.h	28;"	d
VMXNET_DEBUG_CONFIG_ENABLED	vmxnet_debug.h	52;"	d
VMXNET_DEBUG_CONFIG_ENABLED	vmxnet_debug.h	54;"	d
VMXNET_DEBUG_ERRORS	vmxnet_debug.h	24;"	d
VMXNET_DEBUG_ERRORS_ENABLED	vmxnet_debug.h	46;"	d
VMXNET_DEBUG_ERRORS_ENABLED	vmxnet_debug.h	48;"	d
VMXNET_DEBUG_INTERRUPTS	vmxnet_debug.h	27;"	d
VMXNET_DEBUG_INTERRUPTS_ENABLED	vmxnet_debug.h	70;"	d
VMXNET_DEBUG_INTERRUPTS_ENABLED	vmxnet_debug.h	72;"	d
VMXNET_DEBUG_PACKETS	vmxnet_debug.h	30;"	d
VMXNET_DEBUG_PACKETS_ENABLED	vmxnet_debug.h	64;"	d
VMXNET_DEBUG_PACKETS_ENABLED	vmxnet_debug.h	66;"	d
VMXNET_DEBUG_RINGS	vmxnet_debug.h	29;"	d
VMXNET_DEBUG_RINGS_ENABLED	vmxnet_debug.h	58;"	d
VMXNET_DEBUG_RINGS_ENABLED	vmxnet_debug.h	60;"	d
VMXNET_DEBUG_SHMEM_ACCESS	vmxnet_debug.h	31;"	d
VMXNET_DEBUG_SHMEM_ACCESS_ENABLED	vmxnet_debug.h	76;"	d
VMXNET_DEBUG_SHMEM_ACCESS_ENABLED	vmxnet_debug.h	78;"	d
VMXNET_DEBUG_WARNINGS	vmxnet_debug.h	23;"	d
VMXNET_DEBUG_WARNINGS_ENABLED	vmxnet_debug.h	40;"	d
VMXNET_DEBUG_WARNINGS_ENABLED	vmxnet_debug.h	42;"	d
VMXNET_DEVICE_NAME	vmxnet_debug.h	21;"	d
VMXNET_FLAG_IS_SET	vmxnet3.c	126;"	d	file:
VirtIOFeature	virtio-net.c	/^typedef struct VirtIOFeature {$/;"	s	file:
VirtIOFeature	virtio-net.c	/^} VirtIOFeature;$/;"	t	typeref:struct:VirtIOFeature	file:
Vmxnet3IntState	vmxnet3.c	/^} Vmxnet3IntState;$/;"	t	typeref:struct:__anon100	file:
Vmxnet3PktStatus	vmxnet3.c	/^} Vmxnet3PktStatus;$/;"	t	typeref:enum:__anon102	file:
Vmxnet3Ring	vmxnet3.c	/^} Vmxnet3Ring;$/;"	t	typeref:struct:__anon97	file:
Vmxnet3RxqDescr	vmxnet3.c	/^} Vmxnet3RxqDescr;$/;"	t	typeref:struct:__anon99	file:
Vmxnet3TxqDescr	vmxnet3.c	/^} Vmxnet3TxqDescr;$/;"	t	typeref:struct:__anon98	file:
Vmxnet3_DSDevRead	vmxnet3.h	/^struct Vmxnet3_DSDevRead {$/;"	s
Vmxnet3_DriverInfo	vmxnet3.h	/^struct Vmxnet3_DriverInfo {$/;"	s
Vmxnet3_DriverShared	vmxnet3.h	/^struct Vmxnet3_DriverShared {$/;"	s
Vmxnet3_GOSInfo	vmxnet3.h	/^struct Vmxnet3_GOSInfo {$/;"	s
Vmxnet3_GenericDesc	vmxnet3.h	/^union Vmxnet3_GenericDesc {$/;"	u
Vmxnet3_IntrConf	vmxnet3.h	/^struct Vmxnet3_IntrConf {$/;"	s
Vmxnet3_MiscConf	vmxnet3.h	/^struct Vmxnet3_MiscConf {$/;"	s
Vmxnet3_PMConf	vmxnet3.h	/^struct Vmxnet3_PMConf {$/;"	s
Vmxnet3_PM_PktFilter	vmxnet3.h	/^struct Vmxnet3_PM_PktFilter {$/;"	s
Vmxnet3_QueueStatus	vmxnet3.h	/^struct Vmxnet3_QueueStatus {$/;"	s
Vmxnet3_RxCompDesc	vmxnet3.h	/^struct Vmxnet3_RxCompDesc {$/;"	s
Vmxnet3_RxDesc	vmxnet3.h	/^struct Vmxnet3_RxDesc {$/;"	s
Vmxnet3_RxFilterConf	vmxnet3.h	/^struct Vmxnet3_RxFilterConf {$/;"	s
Vmxnet3_RxQueueConf	vmxnet3.h	/^struct Vmxnet3_RxQueueConf {$/;"	s
Vmxnet3_RxQueueCtrl	vmxnet3.h	/^struct Vmxnet3_RxQueueCtrl {$/;"	s
Vmxnet3_RxQueueDesc	vmxnet3.h	/^struct Vmxnet3_RxQueueDesc {$/;"	s
Vmxnet3_TxCompDesc	vmxnet3.h	/^struct Vmxnet3_TxCompDesc {$/;"	s
Vmxnet3_TxDataDesc	vmxnet3.h	/^struct Vmxnet3_TxDataDesc {$/;"	s
Vmxnet3_TxDesc	vmxnet3.h	/^struct Vmxnet3_TxDesc {$/;"	s
Vmxnet3_TxQueueConf	vmxnet3.h	/^struct Vmxnet3_TxQueueConf {$/;"	s
Vmxnet3_TxQueueCtrl	vmxnet3.h	/^struct Vmxnet3_TxQueueCtrl {$/;"	s
Vmxnet3_TxQueueDesc	vmxnet3.h	/^struct Vmxnet3_TxQueueDesc {$/;"	s
Vmxnet3_VariableLenConfDesc	vmxnet3.h	/^struct Vmxnet3_VariableLenConfDesc {$/;"	s
World	rocker/rocker.h	/^typedef struct world World;$/;"	t	typeref:struct:world
WorldOps	rocker/rocker_world.h	/^} WorldOps;$/;"	t	typeref:struct:world_ops
XGMAC	xgmac.c	140;"	d	file:
XGMAC_ADDR_HIGH	xgmac.c	65;"	d	file:
XGMAC_ADDR_LOW	xgmac.c	66;"	d	file:
XGMAC_CONTROL	xgmac.c	42;"	d	file:
XGMAC_DEBUG	xgmac.c	53;"	d	file:
XGMAC_FLOW_CTRL	xgmac.c	44;"	d	file:
XGMAC_FRAME_FILTER	xgmac.c	43;"	d	file:
XGMAC_HASH	xgmac.c	56;"	d	file:
XGMAC_INT_STATUS	xgmac.c	54;"	d	file:
XGMAC_LPI_CTRL	xgmac.c	49;"	d	file:
XGMAC_LPI_TIMER	xgmac.c	50;"	d	file:
XGMAC_NUM_HASH	xgmac.c	57;"	d	file:
XGMAC_OPMODE	xgmac.c	59;"	d	file:
XGMAC_PMT	xgmac.c	63;"	d	file:
XGMAC_REMOTE_WAKE	xgmac.c	61;"	d	file:
XGMAC_TX_PACE	xgmac.c	51;"	d	file:
XGMAC_VERSION	xgmac.c	46;"	d	file:
XGMAC_VLAN_HASH	xgmac.c	52;"	d	file:
XGMAC_VLAN_INCL	xgmac.c	48;"	d	file:
XGMAC_VLAN_TAG	xgmac.c	45;"	d	file:
XILINX_AXI_ENET	xilinx_axienet.c	40;"	d	file:
XILINX_AXI_ENET_CONTROL_STREAM	xilinx_axienet.c	47;"	d	file:
XILINX_AXI_ENET_DATA_STREAM	xilinx_axienet.c	43;"	d	file:
XILINX_ETHLITE	xilinx_ethlite.c	54;"	d	file:
XenNetDev	xen_nic.c	/^struct XenNetDev {$/;"	s	file:
XgmacState	xgmac.c	/^typedef struct XgmacState {$/;"	s	file:
XgmacState	xgmac.c	/^} XgmacState;$/;"	t	typeref:struct:XgmacState	file:
XilinxAXIEnet	xilinx_axienet.c	/^struct XilinxAXIEnet {$/;"	s	file:
XilinxAXIEnet	xilinx_axienet.c	/^typedef struct XilinxAXIEnet XilinxAXIEnet;$/;"	t	typeref:struct:XilinxAXIEnet	file:
XilinxAXIEnetStreamSlave	xilinx_axienet.c	/^struct XilinxAXIEnetStreamSlave {$/;"	s	file:
XilinxAXIEnetStreamSlave	xilinx_axienet.c	/^typedef struct XilinxAXIEnetStreamSlave XilinxAXIEnetStreamSlave;$/;"	t	typeref:struct:XilinxAXIEnetStreamSlave	file:
__BIG_ENDIAN_BITFIELD	vmxnet3.h	39;"	d
__BIG_ENDIAN_BITFIELD	vmxnet3.h	756;"	d
__ROCKER_MSIX_VEC_RX	rocker/rocker_hw.h	/^    __ROCKER_MSIX_VEC_RX,$/;"	e	enum:__anon39
__ROCKER_MSIX_VEC_TX	rocker/rocker_hw.h	/^    __ROCKER_MSIX_VEC_TX,$/;"	e	enum:__anon39
__ROCKER_TLV_CMD_MAX	rocker/rocker_hw.h	/^    __ROCKER_TLV_CMD_MAX,$/;"	e	enum:__anon40
__ROCKER_TLV_CMD_PORT_SETTINGS_MAX	rocker/rocker_hw.h	/^    __ROCKER_TLV_CMD_PORT_SETTINGS_MAX,$/;"	e	enum:__anon42
__ROCKER_TLV_CMD_TYPE_MAX	rocker/rocker_hw.h	/^    __ROCKER_TLV_CMD_TYPE_MAX,$/;"	e	enum:__anon41
__ROCKER_TLV_EVENT_LINK_CHANGED_MAX	rocker/rocker_hw.h	/^    __ROCKER_TLV_EVENT_LINK_CHANGED_MAX,$/;"	e	enum:__anon46
__ROCKER_TLV_EVENT_MAC_VLAN_MAX	rocker/rocker_hw.h	/^    __ROCKER_TLV_EVENT_MAC_VLAN_MAX,$/;"	e	enum:__anon47
__ROCKER_TLV_EVENT_MAX	rocker/rocker_hw.h	/^    __ROCKER_TLV_EVENT_MAX,$/;"	e	enum:__anon44
__ROCKER_TLV_EVENT_TYPE_MAX	rocker/rocker_hw.h	/^    __ROCKER_TLV_EVENT_TYPE_MAX,$/;"	e	enum:__anon45
__ROCKER_TLV_OF_DPA_FLOW_STAT_MAX	rocker/rocker_hw.h	/^    __ROCKER_TLV_OF_DPA_FLOW_STAT_MAX,$/;"	e	enum:__anon53
__ROCKER_TLV_OF_DPA_MAX	rocker/rocker_hw.h	/^    __ROCKER_TLV_OF_DPA_MAX,$/;"	e	enum:__anon52
__ROCKER_TLV_RX_MAX	rocker/rocker_hw.h	/^    __ROCKER_TLV_RX_MAX,$/;"	e	enum:__anon48
__ROCKER_TLV_TX_FRAG_ATTR_MAX	rocker/rocker_hw.h	/^    __ROCKER_TLV_TX_FRAG_ATTR_MAX,$/;"	e	enum:__anon51
__ROCKER_TLV_TX_FRAG_MAX	rocker/rocker_hw.h	/^    __ROCKER_TLV_TX_FRAG_MAX,$/;"	e	enum:__anon50
__ROCKER_TLV_TX_MAX	rocker/rocker_hw.h	/^    __ROCKER_TLV_TX_MAX,$/;"	e	enum:__anon49
__aligned	e1000.c	525;"	d	file:
__aligned	ne2000.c	133;"	d	file:
__aligned	pcnet.c	54;"	d	file:
__aligned	rtl8139.c	1201;"	d	file:
__be16	rocker/rocker.h	47;"	d
__be32	rocker/rocker.h	48;"	d
__be64	rocker/rocker.h	49;"	d
__desc_ring_fetch_desc	rocker/rocker_desc.c	/^static DescInfo *__desc_ring_fetch_desc(DescRing *ring)$/;"	f	file:
__desc_ring_post_desc	rocker/rocker_desc.c	/^static bool __desc_ring_post_desc(DescRing *ring, int err)$/;"	f	file:
__le16	rocker/rocker.h	43;"	d
__le16	rocker/rocker_hw.h	12;"	d
__le16	vmxnet3.h	34;"	d
__le16	vmxnet3.h	752;"	d
__le32	rocker/rocker.h	44;"	d
__le32	rocker/rocker_hw.h	13;"	d
__le32	vmxnet3.h	35;"	d
__le32	vmxnet3.h	753;"	d
__le64	rocker/rocker.h	45;"	d
__le64	rocker/rocker_hw.h	14;"	d
__le64	vmxnet3.h	36;"	d
__le64	vmxnet3.h	754;"	d
__packed	e1000.c	524;"	d	file:
__packed	ne2000.c	132;"	d	file:
__packed	pcnet.c	53;"	d	file:
__packed	rtl8139.c	1200;"	d	file:
__pad	vmxnet3.h	/^    u8                      __pad[88]; \/* 128 aligned *\/$/;"	m	struct:Vmxnet3_RxQueueDesc
_ether_input	e1000.c	/^_ether_input(const unsigned char *frame)$/;"	f	file:
_ether_input	ne2000.c	/^_ether_input(const unsigned char *frame)$/;"	f	file:
_ether_input	pcnet.c	/^_ether_input(const unsigned char *frame)$/;"	f	file:
_ether_input	rtl8139.c	/^_ether_input(const unsigned char *frame)$/;"	f	file:
_ip_input	e1000.c	/^_ip_input(const u_char *packet)$/;"	f	file:
_ip_input	ne2000.c	/^_ip_input(const u_char *packet)$/;"	f	file:
_ip_input	pcnet.c	/^_ip_input(const u_char *packet)$/;"	f	file:
_ip_input	rtl8139.c	/^_ip_input(const u_char *packet)$/;"	f	file:
_net_rx_pkt_calc_l4_csum	net_rx_pkt.c	/^_net_rx_pkt_calc_l4_csum(struct NetRxPkt *pkt)$/;"	f	file:
_net_rx_rss_add_chunk	net_rx_pkt.c	/^_net_rx_rss_add_chunk(uint8_t *rss_input, size_t *bytes_written,$/;"	f	file:
_net_rx_rss_prepare_ip4	net_rx_pkt.c	/^_net_rx_rss_prepare_ip4(uint8_t *rss_input,$/;"	f	file:
_net_rx_rss_prepare_ip6	net_rx_pkt.c	/^_net_rx_rss_prepare_ip6(uint8_t *rss_input,$/;"	f	file:
_net_rx_rss_prepare_tcp	net_rx_pkt.c	/^_net_rx_rss_prepare_tcp(uint8_t *rss_input,$/;"	f	file:
_of_dpa_flow_match	rocker/rocker_of_dpa.c	/^static void _of_dpa_flow_match(void *key, void *value, void *user_data)$/;"	f	file:
_pad	vmxnet3.h	/^    u8                    _pad[88]; \/* 128 aligned *\/$/;"	m	struct:Vmxnet3_TxQueueDesc
_pad	vmxnet3.h	/^    u8        _pad[3];$/;"	m	struct:Vmxnet3_QueueStatus
_pad	vmxnet3.h	/^    u8        _pad[7];$/;"	m	struct:Vmxnet3_RxQueueConf
_pad	vmxnet3.h	/^    u8        _pad[7];$/;"	m	struct:Vmxnet3_RxQueueCtrl
_pad	vmxnet3.h	/^    u8        _pad[7];$/;"	m	struct:Vmxnet3_TxQueueConf
_pad1	vmxnet3.h	/^    __le16        _pad1;$/;"	m	struct:Vmxnet3_RxFilterConf
_res	pcnet.c	/^    uint16_t _res;$/;"	m	struct:pcnet_initblk32	file:
_vmxnet3_assert_interrupt_line	vmxnet3.c	/^static bool _vmxnet3_assert_interrupt_line(VMXNET3State *s, uint32_t int_idx)$/;"	f	file:
_vmxnet3_deassert_interrupt_line	vmxnet3.c	/^static void _vmxnet3_deassert_interrupt_line(VMXNET3State *s, int lidx)$/;"	f	file:
access	fsl_etsec/etsec.h	/^    uint32_t    access;$/;"	m	struct:eTSEC_Register
access	fsl_etsec/registers.h	/^    enum eTSEC_Register_Access_Type  access;$/;"	m	struct:eTSEC_Register_Definition	typeref:enum:eTSEC_Register_Definition::eTSEC_Register_Access_Type
action	rocker/rocker_of_dpa.c	/^    OfDpaFlowAction action;$/;"	m	struct:of_dpa_flow	file:
action_apply	rocker/rocker_of_dpa.c	/^    void (*action_apply)(OfDpaFlowContext *fc, OfDpaFlow *flow);$/;"	m	struct:of_dpa_flow_tbl_ops	file:
action_command	eepro100.c	/^static void action_command(EEPRO100State *s)$/;"	f	file:
action_set	rocker/rocker_of_dpa.c	/^    OfDpaFlowAction action_set;$/;"	m	struct:of_dpa_flow_context	file:
action_write	rocker/rocker_of_dpa.c	/^    void (*action_write)(OfDpaFlowContext *fc, OfDpaFlow *flow);$/;"	m	struct:of_dpa_flow_tbl_ops	file:
add_buf_ptr	spapr_llan.c	/^    uint32_t add_buf_ptr, use_buf_ptr, rx_bufs;$/;"	m	struct:VIOsPAPRVLANDevice	file:
addr	etraxfs_eth.c	/^    unsigned int addr;$/;"	m	struct:qemu_mdio	file:
addr	rocker/rocker_of_dpa.c	/^            } addr;$/;"	m	struct:of_dpa_flow_key::__anon57::__anon58	typeref:struct:of_dpa_flow_key::__anon57::__anon58::__anon59	file:
addr	rocker/rocker_of_dpa.c	/^            } addr;$/;"	m	struct:of_dpa_flow_key::__anon57::__anon63	typeref:struct:of_dpa_flow_key::__anon57::__anon63::__anon64	file:
addr	vmxnet3.h	/^    __le64        addr;$/;"	m	struct:Vmxnet3_RxDesc
addr	vmxnet3.h	/^    __le64 addr;$/;"	m	struct:Vmxnet3_TxDesc
addr	xilinx_axienet.c	/^    unsigned int addr;$/;"	m	struct:MDIOBus	file:
addr16	rocker/rocker.h	/^        __be16 addr16[8];$/;"	m	union:ipv6_addr::__anon54
addr32	rocker/rocker.h	/^        __be32 addr32[4];$/;"	m	union:ipv6_addr::__anon54
addr8	rocker/rocker.h	/^        uint8_t addr8[16];$/;"	m	union:ipv6_addr::__anon54
address	rtl8139.c	/^    uint8_t  address;$/;"	m	struct:EEprom9346	file:
afc_cfg	lan9118.c	/^    uint32_t afc_cfg;$/;"	m	struct:__anon123	file:
allocated	smc91c111.c	/^    int allocated;$/;"	m	struct:__anon96	file:
apply	rocker/rocker_of_dpa.c	/^    } apply;$/;"	m	struct:of_dpa_flow_action	typeref:struct:of_dpa_flow_action::__anon68	file:
arp	rocker/rocker_of_dpa.c	/^                } arp;$/;"	m	union:of_dpa_flow_key::__anon57::__anon58::__anon60	typeref:struct:of_dpa_flow_key::__anon57::__anon58::__anon60::__anon62	file:
as	dp8393x.c	/^    AddressSpace as;$/;"	m	struct:dp8393xState	file:
assemble_frame	milkymist-minimac2.c	/^static size_t assemble_frame(uint8_t *buf, size_t size,$/;"	f	file:
autoMask	vmxnet3.h	/^    bool        autoMask;$/;"	m	struct:Vmxnet3_IntrConf
auto_int_masking	vmxnet3.c	/^        bool auto_int_masking;$/;"	m	struct:__anon101	file:
autoneg	rocker/rocker_fp.c	/^    uint8_t autoneg;$/;"	m	struct:fp_port	file:
autoneg_timer	e1000.c	/^    QEMUTimer *autoneg_timer;$/;"	m	struct:E1000State_st	file:
autoneg_timer	e1000e_core.h	/^    QEMUTimer *autoneg_timer;$/;"	m	struct:E1000Core
aw_emac_can_receive	allwinner_emac.c	/^static int aw_emac_can_receive(NetClientState *nc)$/;"	f	file:
aw_emac_class_init	allwinner_emac.c	/^static void aw_emac_class_init(ObjectClass *klass, void *data)$/;"	f	file:
aw_emac_info	allwinner_emac.c	/^static const TypeInfo aw_emac_info = {$/;"	v	file:
aw_emac_init	allwinner_emac.c	/^static void aw_emac_init(Object *obj)$/;"	f	file:
aw_emac_mem_ops	allwinner_emac.c	/^static const MemoryRegionOps aw_emac_mem_ops = {$/;"	v	file:
aw_emac_post_load	allwinner_emac.c	/^static int aw_emac_post_load(void *opaque, int version_id)$/;"	f	file:
aw_emac_properties	allwinner_emac.c	/^static Property aw_emac_properties[] = {$/;"	v	file:
aw_emac_read	allwinner_emac.c	/^static uint64_t aw_emac_read(void *opaque, hwaddr offset, unsigned size)$/;"	f	file:
aw_emac_realize	allwinner_emac.c	/^static void aw_emac_realize(DeviceState *dev, Error **errp)$/;"	f	file:
aw_emac_receive	allwinner_emac.c	/^static ssize_t aw_emac_receive(NetClientState *nc, const uint8_t *buf,$/;"	f	file:
aw_emac_register_types	allwinner_emac.c	/^static void aw_emac_register_types(void)$/;"	f	file:
aw_emac_reset	allwinner_emac.c	/^static void aw_emac_reset(DeviceState *dev)$/;"	f	file:
aw_emac_rx_reset	allwinner_emac.c	/^static void aw_emac_rx_reset(AwEmacState *s)$/;"	f	file:
aw_emac_set_link	allwinner_emac.c	/^static void aw_emac_set_link(NetClientState *nc)$/;"	f	file:
aw_emac_tx_reset	allwinner_emac.c	/^static void aw_emac_tx_reset(AwEmacState *s, int chan)$/;"	f	file:
aw_emac_update_irq	allwinner_emac.c	/^static void aw_emac_update_irq(AwEmacState *s)$/;"	f	file:
aw_emac_write	allwinner_emac.c	/^static void aw_emac_write(void *opaque, hwaddr offset, uint64_t value,$/;"	f	file:
axienet_eth_rx_notify	xilinx_axienet.c	/^static void axienet_eth_rx_notify(void *opaque)$/;"	f	file:
axienet_extmcf_enabled	xilinx_axienet.c	/^static inline int axienet_extmcf_enabled(XilinxAXIEnet *s)$/;"	f	file:
axienet_newfunc_enabled	xilinx_axienet.c	/^static inline int axienet_newfunc_enabled(XilinxAXIEnet *s)$/;"	f	file:
axienet_rx_enabled	xilinx_axienet.c	/^static inline int axienet_rx_enabled(XilinxAXIEnet *s)$/;"	f	file:
axienet_rx_reset	xilinx_axienet.c	/^static void axienet_rx_reset(XilinxAXIEnet *s)$/;"	f	file:
axienet_rx_resetting	xilinx_axienet.c	/^static inline int axienet_rx_resetting(XilinxAXIEnet *s)$/;"	f	file:
axienet_tx_reset	xilinx_axienet.c	/^static void axienet_tx_reset(XilinxAXIEnet *s)$/;"	f	file:
b0_ops	vmxnet3.c	/^static const MemoryRegionOps b0_ops = {$/;"	v	file:
b1_ops	vmxnet3.c	/^static const MemoryRegionOps b1_ops = {$/;"	v	file:
bChipCmdState	rtl8139.c	/^    uint8_t  bChipCmdState;$/;"	m	struct:RTL8139State	file:
backend	vhost_net.c	/^    int backend;$/;"	m	struct:vhost_net	file:
bank	smc91c111.c	/^    int bank;$/;"	m	struct:__anon96	file:
bar0	vmxnet3.c	/^        MemoryRegion bar0;$/;"	m	struct:__anon101	file:
bar1	vmxnet3.c	/^        MemoryRegion bar1;$/;"	m	struct:__anon101	file:
bar_io	rtl8139.c	/^    MemoryRegion bar_io;$/;"	m	struct:RTL8139State	file:
bar_mem	rtl8139.c	/^    MemoryRegion bar_mem;$/;"	m	struct:RTL8139State	file:
base_addr	rocker/rocker_desc.c	/^    hwaddr base_addr;$/;"	m	struct:desc_ring	file:
bcast	e1000.c	/^static const uint8_t bcast[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff};$/;"	v	file:
bcastBytesRxOK	vmxnet3.h	/^    u64            bcastBytesRxOK;$/;"	m	struct:UPT1_RxStats
bcastBytesTxOK	vmxnet3.h	/^    u64            bcastBytesTxOK;$/;"	m	struct:UPT1_TxStats
bcastPktsRxOK	vmxnet3.h	/^    u64            bcastPktsRxOK;$/;"	m	struct:UPT1_RxStats
bcastPktsTxOK	vmxnet3.h	/^    u64            bcastPktsTxOK;$/;"	m	struct:UPT1_TxStats
bcr	pcnet.h	/^    uint16_t bcr[32];$/;"	m	struct:PCNetState_st
bds	spapr_llan.c	/^    vlan_bd_t bds[RX_POOL_MAX_BDS];$/;"	m	struct:__anon117	file:
best	rocker/rocker_of_dpa.c	/^    OfDpaFlow *best;$/;"	m	struct:of_dpa_flow_match	file:
bh	fsl_etsec/etsec.h	/^    QEMUBH *bh;$/;"	m	struct:eTSEC
bitnum_in	e1000.c	/^        uint16_t bitnum_in;$/;"	m	struct:E1000State_st::__anon89	file:
bitnum_out	e1000.c	/^        uint16_t bitnum_out;$/;"	m	struct:E1000State_st::__anon89	file:
boundary	ne2000.h	/^    uint8_t boundary;$/;"	m	struct:NE2000State
broadcast_addr	cadence_gem.c	/^static const uint8_t broadcast_addr[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };$/;"	v	file:
btype	vmxnet3.h	/^    u32        btype:1;      \/* Buffer Type *\/$/;"	m	struct:Vmxnet3_RxDesc
buf	rocker/rocker_desc.c	/^    char *buf;$/;"	m	struct:desc_info	file:
buf_addr	rocker/rocker_hw.h	/^    __le64 buf_addr;$/;"	m	struct:rocker_desc
buf_length	pcnet.c	/^    int16_t buf_length;$/;"	m	struct:pcnet_RMD	file:
buf_list	spapr_llan.c	/^    hwaddr buf_list;$/;"	m	struct:VIOsPAPRVLANDevice	file:
buf_ptr	opencores_eth.c	/^    uint32_t buf_ptr;$/;"	m	struct:desc	file:
buf_size	rocker/rocker_desc.c	/^    size_t buf_size;$/;"	m	struct:desc_info	file:
buf_size	rocker/rocker_hw.h	/^    __le16 buf_size;$/;"	m	struct:rocker_desc
buffer	pcnet.h	/^    uint8_t buffer[4096];$/;"	m	struct:PCNetState_st
buffer1_addr	xgmac.c	/^    uint32_t buffer1_addr;$/;"	m	struct:desc	file:
buffer1_size	xgmac.c	/^    uint16_t buffer1_size;$/;"	m	struct:desc	file:
buffer2_addr	xgmac.c	/^    uint32_t buffer2_addr;$/;"	m	struct:desc	file:
buffer2_size	xgmac.c	/^    uint16_t buffer2_size;$/;"	m	struct:desc	file:
buffer_addr	e1000_regs.h	/^        uint64_t buffer_addr;$/;"	m	struct:e1000_rx_desc_extended::__anon7
buffer_addr	e1000_regs.h	/^        uint64_t buffer_addr[MAX_PS_BUFFERS];$/;"	m	struct:e1000_rx_desc_packet_split::__anon13
buffer_addr	e1000_regs.h	/^    uint64_t buffer_addr;       \/* Address of the descriptor's buffer address *\/$/;"	m	struct:e1000_data_desc
buffer_addr	e1000_regs.h	/^    uint64_t buffer_addr;       \/* Address of the descriptor's data buffer *\/$/;"	m	struct:e1000_tx_desc
buffer_addr	e1000_regs.h	/^    uint64_t buffer_addr; \/* Address of the descriptor's data buffer *\/$/;"	m	struct:e1000_rx_desc
buffer_size	lan9118.c	/^    int32_t buffer_size;$/;"	m	struct:__anon122	file:
buffers	milkymist-minimac2.c	/^    MemoryRegion buffers;$/;"	m	struct:MilkymistMinimac2State	file:
bufptr	fsl_etsec/etsec.h	/^    uint32_t bufptr;$/;"	m	struct:eTSEC_rxtx_bd
bufsize	spapr_llan.c	/^    int32_t bufsize;$/;"	m	struct:__anon117	file:
build_match	rocker/rocker_of_dpa.c	/^    void (*build_match)(OfDpaFlowContext *fc, OfDpaFlowMatch *match);$/;"	m	struct:of_dpa_flow_tbl_ops	file:
busdev	fsl_etsec/etsec.h	/^    SysBusDevice  busdev;$/;"	m	struct:eTSEC
busdev	xilinx_axienet.c	/^    SysBusDevice busdev;$/;"	m	struct:XilinxAXIEnet	file:
busy	mipsnet.c	/^    uint32_t busy;$/;"	m	struct:MIPSnetState	file:
c	ne2000.h	/^    NICConf c;$/;"	m	struct:NE2000State
c_phyaddr	xilinx_axienet.c	/^    uint32_t c_phyaddr;$/;"	m	struct:XilinxAXIEnet	file:
c_rx_pingpong	xilinx_ethlite.c	/^    uint32_t c_rx_pingpong;$/;"	m	struct:xlx_ethlite	file:
c_rxmem	xilinx_axienet.c	/^    uint32_t c_rxmem;$/;"	m	struct:XilinxAXIEnet	file:
c_tx_pingpong	xilinx_ethlite.c	/^    uint32_t c_tx_pingpong;$/;"	m	struct:xlx_ethlite	file:
c_txmem	xilinx_axienet.c	/^    uint32_t c_txmem;$/;"	m	struct:XilinxAXIEnet	file:
calc_mac_hash	cadence_gem.c	/^static unsigned calc_mac_hash(const uint8_t *mac)$/;"	f	file:
cam	dp8393x.c	/^    uint8_t cam[16][6];$/;"	m	struct:dp8393xState	file:
cb_address	eepro100.c	/^    uint32_t cb_address;        \/* = cu_base + cu_offset *\/$/;"	m	struct:__anon84	file:
cell_size	vmxnet3.c	/^    size_t cell_size;$/;"	m	struct:__anon97	file:
check_bd	spapr_llan.c	/^static int check_bd(VIOsPAPRVLANDevice *dev, vlan_bd_t bd,$/;"	f	file:
chip_flags	rtl8139.c	/^enum chip_flags {$/;"	g	file:
chip_t	rtl8139.c	/^} chip_t;$/;"	t	typeref:enum:__anon153	file:
chkflag	e1000.c	130;"	d	file:
clock_enabled	rtl8139.c	/^    uint8_t  clock_enabled;$/;"	m	struct:RTL8139State	file:
cmd	e1000_regs.h	/^            uint8_t cmd;        \/* *\/$/;"	m	struct:e1000_data_desc::__anon26::__anon27
cmd	e1000_regs.h	/^            uint8_t cmd;        \/* Descriptor control *\/$/;"	m	struct:e1000_tx_desc::__anon3::__anon4
cmd	ne2000.h	/^    uint8_t cmd;$/;"	m	struct:NE2000State
cmd	rocker/rocker_world.h	/^    world_cmd *cmd;$/;"	m	struct:world_ops
cmd_a	lan9118.c	/^    uint32_t cmd_a;$/;"	m	struct:__anon122	file:
cmd_and_length	e1000_regs.h	/^    uint32_t cmd_and_length;    \/* *\/$/;"	m	struct:e1000_context_desc
cmd_b	lan9118.c	/^    uint32_t cmd_b;$/;"	m	struct:__anon122	file:
cmd_consume	rocker/rocker.c	/^static int cmd_consume(Rocker *r, DescInfo *info)$/;"	f	file:
cmd_get_port_settings	rocker/rocker.c	/^static int cmd_get_port_settings(Rocker *r,$/;"	f	file:
cmd_set_port_settings	rocker/rocker.c	/^static int cmd_set_port_settings(Rocker *r,$/;"	f	file:
cnc	vmxnet3.h	/^    u32        cnc:1;        \/* Checksum Not Calculated *\/$/;"	m	struct:Vmxnet3_RxCompDesc
cnt	etraxfs_eth.c	/^    unsigned int cnt;$/;"	m	struct:qemu_mdio	file:
cnt	xilinx_axienet.c	/^    unsigned int cnt;$/;"	m	struct:MDIOBus	file:
command	eepro100.c	/^    uint16_t command;$/;"	m	struct:__anon77	file:
command	eepro100.c	/^    uint16_t command;$/;"	m	struct:__anon78	file:
commands	eepro100.c	/^enum commands {$/;"	g	file:
compRingBasePA	vmxnet3.h	/^    __le64        compRingBasePA;$/;"	m	struct:Vmxnet3_RxQueueConf
compRingBasePA	vmxnet3.h	/^    __le64        compRingBasePA;$/;"	m	struct:Vmxnet3_TxQueueConf
compRingSize	vmxnet3.h	/^    __le32        compRingSize;    \/* # of rx comp desc *\/$/;"	m	struct:Vmxnet3_RxQueueConf
compRingSize	vmxnet3.h	/^    __le32        compRingSize; \/* # of comp desc *\/$/;"	m	struct:Vmxnet3_TxQueueConf
comp_err	rocker/rocker_hw.h	/^    __le16 comp_err;$/;"	m	struct:rocker_desc
comp_ring	vmxnet3.c	/^    Vmxnet3Ring comp_ring;$/;"	m	struct:__anon98	file:
comp_ring	vmxnet3.c	/^    Vmxnet3Ring comp_ring;$/;"	m	struct:__anon99	file:
compat_flags	e1000.c	/^    uint32_t compat_flags;$/;"	m	struct:E1000State_st	file:
compat_flags	spapr_llan.c	/^    uint32_t compat_flags;             \/* Compatability flags for migration *\/$/;"	m	struct:VIOsPAPRVLANDevice	file:
compat_flags	vmxnet3.c	/^        uint32_t compat_flags;$/;"	m	struct:__anon101	file:
conf	dp8393x.c	/^    NICConf conf;$/;"	m	struct:dp8393xState	file:
conf	e1000.c	/^    NICConf conf;$/;"	m	struct:E1000State_st	file:
conf	e1000e.c	/^    NICConf conf;$/;"	m	struct:E1000EState	file:
conf	eepro100.c	/^    NICConf conf;$/;"	m	struct:__anon84	file:
conf	etraxfs_eth.c	/^    NICConf conf;$/;"	m	struct:ETRAXFSEthState	file:
conf	fsl_etsec/etsec.h	/^    NICConf   conf;$/;"	m	struct:eTSEC
conf	lan9118.c	/^    NICConf conf;$/;"	m	struct:__anon123	file:
conf	mcf_fec.c	/^    NICConf conf;$/;"	m	struct:__anon36	file:
conf	milkymist-minimac2.c	/^    NICConf conf;$/;"	m	struct:MilkymistMinimac2State	file:
conf	mipsnet.c	/^    NICConf conf;$/;"	m	struct:MIPSnetState	file:
conf	opencores_eth.c	/^    NICConf conf;$/;"	m	struct:OpenEthState	file:
conf	pcnet.h	/^    NICConf conf;$/;"	m	struct:PCNetState_st
conf	rocker/rocker_fp.c	/^    NICConf conf;$/;"	m	struct:fp_port	file:
conf	rtl8139.c	/^    NICConf conf;$/;"	m	struct:RTL8139State	file:
conf	smc91c111.c	/^    NICConf conf;$/;"	m	struct:__anon96	file:
conf	stellaris_enet.c	/^    NICConf conf;$/;"	m	struct:__anon125	file:
conf	vmxnet3.c	/^        NICConf conf;$/;"	m	struct:__anon101	file:
conf	vmxnet3.h	/^    struct Vmxnet3_RxQueueConf        conf;$/;"	m	struct:Vmxnet3_RxQueueDesc	typeref:struct:Vmxnet3_RxQueueDesc::Vmxnet3_RxQueueConf
conf	vmxnet3.h	/^    struct Vmxnet3_TxQueueConf        conf;$/;"	m	struct:Vmxnet3_TxQueueDesc	typeref:struct:Vmxnet3_TxQueueDesc::Vmxnet3_TxQueueConf
conf	xen_nic.c	/^    NICConf               conf;$/;"	m	struct:XenNetDev	file:
conf	xgmac.c	/^    NICConf conf;$/;"	m	struct:XgmacState	file:
conf	xilinx_axienet.c	/^    NICConf conf;$/;"	m	struct:XilinxAXIEnet	file:
conf	xilinx_ethlite.c	/^    NICConf conf;$/;"	m	struct:xlx_ethlite	file:
confLen	vmxnet3.h	/^    __le32        confLen;$/;"	m	struct:Vmxnet3_VariableLenConfDesc
confPA	vmxnet3.h	/^    __le64        confPA;$/;"	m	struct:Vmxnet3_VariableLenConfDesc
confVer	vmxnet3.h	/^    __le32        confVer;$/;"	m	struct:Vmxnet3_VariableLenConfDesc
configuration	eepro100.c	/^    uint8_t configuration[22];$/;"	m	struct:__anon84	file:
consume	rocker/rocker_desc.c	/^    desc_ring_consume *consume;$/;"	m	struct:desc_ring	file:
contents	rtl8139.c	/^    uint16_t contents[EEPROM_9346_SIZE];$/;"	m	struct:EEprom9346	file:
cookie	rocker/rocker_hw.h	/^    uint64_t cookie;$/;"	m	struct:rocker_desc
cookie	rocker/rocker_of_dpa.c	/^    uint64_t cookie;$/;"	m	struct:of_dpa_flow	file:
copy_to_cpu	rocker/rocker_of_dpa.c	/^        uint8_t copy_to_cpu;$/;"	m	struct:of_dpa_flow_action::__anon68	file:
core	e1000e.c	/^    E1000ECore core;$/;"	m	struct:E1000EState	file:
core	e1000e_core.h	/^    E1000ECore *core;$/;"	m	struct:E1000IntrDelayTimer_st
count	eepro100.c	/^    uint16_t count;$/;"	m	struct:__anon78	file:
count	milkymist-minimac2.c	/^    int count;$/;"	m	struct:MilkymistMinimac2MdioState	file:
count	spapr_llan.c	/^    int32_t count;$/;"	m	struct:__anon117	file:
cplus_enabled	rtl8139.c	/^    uint32_t   cplus_enabled;$/;"	m	struct:RTL8139State	file:
cplus_txbuffer	rtl8139.c	/^    uint8_t   *cplus_txbuffer;$/;"	m	struct:RTL8139State	file:
cplus_txbuffer_len	rtl8139.c	/^    int        cplus_txbuffer_len;$/;"	m	struct:RTL8139State	file:
cplus_txbuffer_offset	rtl8139.c	/^    int        cplus_txbuffer_offset;$/;"	m	struct:RTL8139State	file:
cptse	e1000x_common.h	/^    bool cptse;$/;"	m	struct:e1000x_txd_props
cq	vmxnet3.h	/^    u32 cq:1;       \/* completion request *\/$/;"	m	struct:Vmxnet3_TxDesc
cr	smc91c111.c	/^    uint16_t cr;$/;"	m	struct:__anon96	file:
crctab	pcnet.c	/^static const uint32_t crctab[256] = {$/;"	v	file:
credits	rocker/rocker_desc.c	/^    uint32_t credits;$/;"	m	struct:desc_ring	file:
cso	e1000_regs.h	/^            uint8_t cso;        \/* Checksum offset *\/$/;"	m	struct:e1000_tx_desc::__anon3::__anon4
cso_or_gso_size	vmxnet3.c	/^        uint32_t cso_or_gso_size;$/;"	m	struct:__anon101	file:
csr	pcnet.h	/^    uint16_t csr[128];$/;"	m	struct:PCNetState_st
css	e1000_regs.h	/^            uint8_t css;        \/* Checksum start *\/$/;"	m	struct:e1000_tx_desc::__anon5::__anon6
csum	e1000_regs.h	/^                    uint16_t csum;     \/* Packet Checksum *\/$/;"	m	struct:e1000_rx_desc_packet_split::__anon14::__anon15::__anon16::__anon17
csum	e1000_regs.h	/^                    uint16_t csum;  \/* Packet Checksum *\/$/;"	m	struct:e1000_rx_desc_extended::__anon8::__anon9::__anon10::__anon11
csum	e1000_regs.h	/^    uint16_t csum;       \/* Packet checksum *\/$/;"	m	struct:e1000_rx_desc
csum	vmxnet3.h	/^    u32        csum:16;$/;"	m	struct:Vmxnet3_RxCompDesc
csum_ip	e1000_regs.h	/^                } csum_ip;$/;"	m	union:e1000_rx_desc_extended::__anon8::__anon9::__anon10	typeref:struct:e1000_rx_desc_extended::__anon8::__anon9::__anon10::__anon11
csum_ip	e1000_regs.h	/^                } csum_ip;$/;"	m	union:e1000_rx_desc_packet_split::__anon14::__anon15::__anon16	typeref:struct:e1000_rx_desc_packet_split::__anon14::__anon15::__anon16::__anon17
ctl_stat	xgmac.c	/^    uint32_t ctl_stat;$/;"	m	struct:desc	file:
ctr	smc91c111.c	/^    uint16_t ctr;$/;"	m	struct:__anon96	file:
ctrl	rocker/rocker_desc.c	/^    uint32_t ctrl;$/;"	m	struct:desc_ring	file:
ctrl	vmxnet3.h	/^    struct Vmxnet3_RxQueueCtrl        ctrl;$/;"	m	struct:Vmxnet3_RxQueueDesc	typeref:struct:Vmxnet3_RxQueueDesc::Vmxnet3_RxQueueCtrl
ctrl	vmxnet3.h	/^    struct Vmxnet3_TxQueueCtrl        ctrl;$/;"	m	struct:Vmxnet3_TxQueueDesc	typeref:struct:Vmxnet3_TxQueueDesc::Vmxnet3_TxQueueCtrl
cu_active	eepro100.c	/^    cu_active = 2,$/;"	e	enum:__anon82	file:
cu_base	eepro100.c	/^    uint32_t cu_base;           \/* CU base address *\/$/;"	m	struct:__anon84	file:
cu_hqp_active	eepro100.c	/^    cu_hqp_active = 3$/;"	e	enum:__anon82	file:
cu_idle	eepro100.c	/^    cu_idle = 0,$/;"	e	enum:__anon82	file:
cu_lpq_active	eepro100.c	/^    cu_lpq_active = 2,$/;"	e	enum:__anon82	file:
cu_offset	eepro100.c	/^    uint32_t cu_offset;         \/* CU address offset *\/$/;"	m	struct:__anon84	file:
cu_state_t	eepro100.c	/^} cu_state_t;$/;"	t	typeref:enum:__anon82	file:
cu_suspended	eepro100.c	/^    cu_suspended = 1,$/;"	e	enum:__anon82	file:
cur_idx	e1000e_core.c	/^    uint8_t cur_idx;$/;"	m	struct:e1000e_ba_state_st	file:
curpag	ne2000.h	/^    uint8_t curpag;$/;"	m	struct:NE2000State
currCPlusRxDesc	rtl8139.c	/^    uint32_t   currCPlusRxDesc;$/;"	m	struct:RTL8139State	file:
currCPlusTxDesc	rtl8139.c	/^    uint32_t   currCPlusTxDesc;$/;"	m	struct:RTL8139State	file:
currTxDesc	rtl8139.c	/^    uint32_t   currTxDesc;$/;"	m	struct:RTL8139State	file:
data	e1000.c	/^        unsigned char data[0x10000];$/;"	m	struct:E1000State_st::e1000_tx	file:
data	e1000_regs.h	/^        uint32_t data;$/;"	m	union:e1000_context_desc::__anon24
data	e1000_regs.h	/^        uint32_t data;$/;"	m	union:e1000_data_desc::__anon26
data	e1000_regs.h	/^        uint32_t data;$/;"	m	union:e1000_data_desc::__anon28
data	e1000_regs.h	/^        uint32_t data;$/;"	m	union:e1000_tx_desc::__anon3
data	e1000_regs.h	/^        uint32_t data;$/;"	m	union:e1000_tx_desc::__anon5
data	etraxfs_eth.c	/^    unsigned int data;$/;"	m	struct:qemu_mdio	file:
data	lan9118.c	/^    uint8_t data[2048];$/;"	m	struct:__anon122	file:
data	mcf_fec.c	/^    uint32_t data;$/;"	m	struct:__anon37	file:
data	milkymist-minimac2.c	/^    uint32_t data;$/;"	m	struct:MilkymistMinimac2MdioState	file:
data	smc91c111.c	/^    uint8_t data[NUM_PACKETS][2048];$/;"	m	struct:__anon96	file:
data	stellaris_enet.c	/^    uint8_t data[2048];$/;"	m	struct:__anon124	file:
data	vmxnet3.h	/^    u8        data[VMXNET3_HDR_COPY_SIZE];$/;"	m	struct:Vmxnet3_TxDataDesc
data	xilinx_axienet.c	/^    unsigned int data;$/;"	m	struct:MDIOBus	file:
dataRingBasePA	vmxnet3.h	/^    __le64        dataRingBasePA;$/;"	m	struct:Vmxnet3_TxQueueConf
dataRingSize	vmxnet3.h	/^    __le32        dataRingSize; \/* # of data desc *\/$/;"	m	struct:Vmxnet3_TxQueueConf
data_out	milkymist-minimac2.c	/^    uint16_t data_out;$/;"	m	struct:MilkymistMinimac2MdioState	file:
dbah	e1000e_core.c	/^    int dbah;$/;"	m	struct:E1000E_RingInfo_st	file:
dbal	e1000e_core.c	/^    int dbal;$/;"	m	struct:E1000E_RingInfo_st	file:
dcfg	ne2000.h	/^    uint8_t dcfg;$/;"	m	struct:NE2000State
ddLen	vmxnet3.h	/^    __le32        ddLen;           \/* size of driver data *\/$/;"	m	struct:Vmxnet3_RxQueueConf
ddLen	vmxnet3.h	/^    __le32        ddLen;        \/* driver data len *\/$/;"	m	struct:Vmxnet3_MiscConf
ddLen	vmxnet3.h	/^    __le32        ddLen;        \/* size of driver data *\/$/;"	m	struct:Vmxnet3_TxQueueConf
ddPA	vmxnet3.h	/^    __le64        ddPA;            \/* driver data *\/$/;"	m	struct:Vmxnet3_RxQueueConf
ddPA	vmxnet3.h	/^    __le64        ddPA;         \/* driver data *\/$/;"	m	struct:Vmxnet3_TxQueueConf
ddPA	vmxnet3.h	/^    __le64        ddPA;         \/* driver data PA *\/$/;"	m	struct:Vmxnet3_MiscConf
debug_etsec	fsl_etsec/etsec.c	/^static const int debug_etsec = 1;$/;"	v	file:
debug_etsec	fsl_etsec/etsec.c	/^static const int debug_etsec;$/;"	v	file:
debug_etsec	fsl_etsec/rings.c	/^static const int debug_etsec = 1;$/;"	v	file:
debug_etsec	fsl_etsec/rings.c	/^static const int debug_etsec;$/;"	v	file:
debugflags	e1000.c	/^static int debugflags = DBGBIT(TXERR) | DBGBIT(GENERAL);$/;"	v	file:
defreg	e1000x_common.h	/^    defreg(CTRL),    defreg(EECD),    defreg(EERD),    defreg(GPRC),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(CTRL_DUP),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(EEMNGCTL),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(EEMNGDATA),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(EXTCNF_SIZE),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(FCRTH),   defreg(FCRTL),   defreg(FCTTV),   defreg(FCRTV),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(FCRTL_A), defreg(FCRTH_A)$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(FCRUC),   defreg(AIT),     defreg(TDFH),    defreg(TDFT),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(FLA),     defreg(EEWR),    defreg(FLOP),    defreg(FLOL),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(FLASHT),  defreg(TIPG),    defreg(RDH),     defreg(RDT),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(FLMNGCNT),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(FLMNGCTL),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(FLMNGDATA),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(FLSWCTL), defreg(FLSWCNT), defreg(RXDCTL),  defreg(RXDCTL1),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(FLSWDATA),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(GCR),     defreg(TIMINCA), defreg(EIAC),    defreg(CTRL_EXT),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(GORCL),   defreg(GORCH),   defreg(GOTCL),   defreg(GOTCH),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(GPTC),    defreg(ICR),     defreg(ICS),     defreg(IMC),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(GSCL_2),  defreg(GSCL_3),  defreg(GSCL_4),  defreg(GSCN_0),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(GSCN_1),  defreg(GSCN_2),  defreg(GSCN_3),  defreg(GCR2),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(IAC),     defreg(MGTPRC),  defreg(MGTPDC),  defreg(MGTPTC),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(IMS),     defreg(LEDCTL),  defreg(MANC),    defreg(MDIC),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(IVAR),    defreg(MFUTP01), defreg(MFUTP23), defreg(MANC2H),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(MAVTV0),  defreg(MAVTV1),  defreg(MAVTV2),  defreg(MAVTV3),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(MCC),     defreg(LATECOL), defreg(COLC),    defreg(DC),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(MFVAL),   defreg(MDEF),    defreg(FACTPS),  defreg(FTFT),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(MPC),     defreg(PBA),     defreg(RCTL),    defreg(RDBAH0),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(MRQC),    defreg(RETA),    defreg(RSSRK),   defreg(RDBAH1),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(PBACLR),  defreg(FCAL),    defreg(FCAH),    defreg(FCT),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(PBM),     defreg(IPAV),    defreg(IP4AT),   defreg(IP6AT),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(PRC1023), defreg(PRC1522), defreg(PTC64),   defreg(PTC127),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(PRC64),   defreg(PRC127),  defreg(PRC255),  defreg(PRC511),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(PSRCTL),  defreg(MPTC),    defreg(BPTC),    defreg(TSCTFC),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(PTC255),  defreg(PTC511),  defreg(PTC1023), defreg(PTC1522),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(RAID),    defreg(RSRPD),   defreg(TIDV),    defreg(EITR),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(RDBAL0),  defreg(RDH0),    defreg(RDLEN0),  defreg(RDT0),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(RDBAL1),  defreg(RDLEN1),  defreg(RDH1),    defreg(RDT1),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(RDFT),    defreg(RDFHS),   defreg(RDFTS),   defreg(RDFPC),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(RDFT_A),  defreg(TDH_A),   defreg(TDT_A),   defreg(TIDV_A),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(RDH0_A),  defreg(RDT0_A),  defreg(RDTR_A),  defreg(RDFH_A),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(RDLEN),   defreg(RDBAH),   defreg(RDBAL),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(RNBC),    defreg(BPRC),    defreg(MPRC),    defreg(RFCTL),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(RUC),     defreg(ROC),     defreg(RFC),     defreg(RJC),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(RXCFGL),  defreg(RXUDP),   defreg(TIMADJL), defreg(TIMADJH),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(RXSTMPH), defreg(RXSTMPL), defreg(RXSATRL), defreg(RXSATRH),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(STATUS),  defreg(SWSM),    defreg(TCTL),    defreg(TDBAH),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TADV),    defreg(ITR),     defreg(SCC),     defreg(ECOL),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TARC0),   defreg(TARC1),   defreg(IAM),     defreg(EXTCNF_CTRL),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TDBAL),   defreg(TDH),     defreg(TDLEN),   defreg(TDT),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TDBAL_A), defreg(TDLEN_A), defreg(VFTA_A),  defreg(RDLEN0_A),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TDFHS),   defreg(TDFTS),   defreg(TDFPC),   defreg(WUC),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TDFH_A),  defreg(TDFT_A),  defreg(RA_A),    defreg(RDBAL0_A),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TDLEN1),  defreg(TDBAL1),  defreg(TDBAH1),  defreg(TDH1),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TDT1),    defreg(TORH),    defreg(TORL),    defreg(TOTH),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TNCRS),   defreg(SEC),     defreg(CEXTERR), defreg(RLEC),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TOTL),    defreg(TPR),     defreg(TPT),     defreg(TXDCTL),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TSCTC),   defreg(RXCSUM),  defreg(FUNCTAG), defreg(GSCL_1),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TSYNCRXCTL),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TSYNCTXCTL),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TXDCTL1),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(TXSTMPL), defreg(TXSTMPH), defreg(SYSTIML), defreg(SYSTIMH),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(VFTA),    defreg(VET),     defreg(RDTR),    defreg(RADV),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(WUFC),    defreg(RA),      defreg(MTA),     defreg(CRCERRS),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(WUPM),    defreg(FFLT),    defreg(FFMT),    defreg(FFVT),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(WUS),     defreg(POEMB),   defreg(PBS),     defreg(RDFH),$/;"	e	enum:__anon2
defreg	e1000x_common.h	/^    defreg(XONRXC),  defreg(XONTXC),  defreg(XOFFRXC), defreg(XOFFTXC),$/;"	e	enum:__anon2
defreg	e1000x_common.h	27;"	d
delay_reg	e1000e_core.h	/^    uint32_t delay_reg;$/;"	m	struct:E1000IntrDelayTimer_st
delay_resolution_ns	e1000e_core.h	/^    uint32_t delay_resolution_ns;$/;"	m	struct:E1000IntrDelayTimer_st
delayed_causes	e1000e_core.h	/^    uint32_t delayed_causes;$/;"	m	struct:E1000Core
desc	eepro100.c	/^    const char *desc;$/;"	m	struct:__anon75	file:
desc	fsl_etsec/etsec.h	/^    const char *desc;$/;"	m	struct:eTSEC_Register
desc	fsl_etsec/registers.h	/^    const char                      *desc;$/;"	m	struct:eTSEC_Register_Definition
desc	opencores_eth.c	/^    desc desc[128];$/;"	m	struct:OpenEthState	file:
desc	opencores_eth.c	/^typedef struct desc {$/;"	s	file:
desc	opencores_eth.c	/^} desc;$/;"	t	typeref:struct:desc	file:
desc	rocker/rocker_desc.c	/^    RockerDesc desc;$/;"	m	struct:desc_info	file:
desc	xgmac.c	/^struct desc {$/;"	s	file:
desc_buf_size	rocker/rocker_desc.c	/^uint16_t desc_buf_size(DescInfo *info)$/;"	f
desc_get_buf	rocker/rocker_desc.c	/^char *desc_get_buf(DescInfo *info, bool read_only)$/;"	f
desc_get_ring	rocker/rocker_desc.c	/^DescRing *desc_get_ring(DescInfo *info)$/;"	f
desc_info	rocker/rocker_desc.c	/^struct desc_info {$/;"	s	file:
desc_io	opencores_eth.c	/^    MemoryRegion desc_io;$/;"	m	struct:OpenEthState	file:
desc_read	rocker/rocker_desc.c	/^static DescInfo *desc_read(DescRing *ring, uint32_t index)$/;"	f	file:
desc_ring	rocker/rocker_desc.c	/^struct desc_ring {$/;"	s	file:
desc_ring_alloc	rocker/rocker_desc.c	/^DescRing *desc_ring_alloc(Rocker *r, int index)$/;"	f
desc_ring_base_addr_check	rocker/rocker_desc.c	/^static bool desc_ring_base_addr_check(DescRing *ring)$/;"	f	file:
desc_ring_consume	rocker/rocker_desc.h	/^typedef int (desc_ring_consume)(Rocker *r, DescInfo *info);$/;"	t
desc_ring_empty	rocker/rocker_desc.c	/^static bool desc_ring_empty(DescRing *ring)$/;"	f	file:
desc_ring_fetch_desc	rocker/rocker_desc.c	/^DescInfo *desc_ring_fetch_desc(DescRing *ring)$/;"	f
desc_ring_free	rocker/rocker_desc.c	/^void desc_ring_free(DescRing *ring)$/;"	f
desc_ring_get_base_addr	rocker/rocker_desc.c	/^uint64_t desc_ring_get_base_addr(DescRing *ring)$/;"	f
desc_ring_get_credits	rocker/rocker_desc.c	/^uint32_t desc_ring_get_credits(DescRing *ring)$/;"	f
desc_ring_get_head	rocker/rocker_desc.c	/^uint32_t desc_ring_get_head(DescRing *ring)$/;"	f
desc_ring_get_msix_vector	rocker/rocker_desc.c	/^unsigned desc_ring_get_msix_vector(DescRing *ring)$/;"	f
desc_ring_get_size	rocker/rocker_desc.c	/^uint32_t desc_ring_get_size(DescRing *ring)$/;"	f
desc_ring_get_tail	rocker/rocker_desc.c	/^uint32_t desc_ring_get_tail(DescRing *ring)$/;"	f
desc_ring_index	rocker/rocker_desc.c	/^int desc_ring_index(DescRing *ring)$/;"	f
desc_ring_post_desc	rocker/rocker_desc.c	/^bool desc_ring_post_desc(DescRing *ring, int err)$/;"	f
desc_ring_reset	rocker/rocker_desc.c	/^void desc_ring_reset(DescRing *ring)$/;"	f
desc_ring_ret_credits	rocker/rocker_desc.c	/^bool desc_ring_ret_credits(DescRing *ring, uint32_t credits)$/;"	f
desc_ring_set_base_addr	rocker/rocker_desc.c	/^bool desc_ring_set_base_addr(DescRing *ring, uint64_t base_addr)$/;"	f
desc_ring_set_consume	rocker/rocker_desc.c	/^void desc_ring_set_consume(DescRing *ring, desc_ring_consume *consume,$/;"	f
desc_ring_set_ctrl	rocker/rocker_desc.c	/^void desc_ring_set_ctrl(DescRing *ring, uint32_t val)$/;"	f
desc_ring_set_head	rocker/rocker_desc.c	/^bool desc_ring_set_head(DescRing *ring, uint32_t new)$/;"	f
desc_ring_set_size	rocker/rocker_desc.c	/^bool desc_ring_set_size(DescRing *ring, uint32_t size)$/;"	f
desc_set_buf	rocker/rocker_desc.c	/^int desc_set_buf(DescInfo *info, size_t tlv_size)$/;"	f
desc_tlv_size	rocker/rocker_desc.c	/^uint16_t desc_tlv_size(DescInfo *info)$/;"	f
desc_write	rocker/rocker_desc.c	/^static void desc_write(DescRing *ring, uint32_t index)$/;"	f	file:
dev	eepro100.c	/^    PCIDevice dev;$/;"	m	struct:__anon84	file:
dev	ne2000.c	/^    PCIDevice dev;$/;"	m	struct:PCINE2000State	file:
dev	vhost_net.c	/^    struct vhost_dev dev;$/;"	m	struct:vhost_net	typeref:struct:vhost_net::vhost_dev	file:
devRead	vmxnet3.h	/^    struct Vmxnet3_DSDevRead    devRead;$/;"	m	struct:Vmxnet3_DriverShared	typeref:struct:Vmxnet3_DriverShared::Vmxnet3_DSDevRead
device	eepro100.c	/^    uint32_t device;            \/* device variant *\/$/;"	m	struct:__anon84	file:
device	eepro100.c	/^    uint32_t device;$/;"	m	struct:__anon75	file:
device_active	vmxnet3.c	/^        uint32_t device_active;$/;"	m	struct:__anon101	file:
device_id	e1000.c	/^    uint16_t   device_id;$/;"	m	struct:E1000Info	file:
device_id	eepro100.c	/^    uint16_t device_id;$/;"	m	struct:__anon75	file:
devs	etraxfs_eth.c	/^    struct qemu_phy *devs[32];$/;"	m	struct:qemu_mdio	typeref:struct:qemu_mdio::qemu_phy	file:
devs	xilinx_axienet.c	/^    struct PHY *devs[32];$/;"	m	struct:MDIOBus	typeref:struct:MDIOBus::PHY	file:
dh	e1000e_core.c	/^    int dh;$/;"	m	struct:E1000E_RingInfo_st	file:
disable_interrupt	eepro100.c	/^static void disable_interrupt(EEPRO100State * s)$/;"	f	file:
disable_vnet	e1000e.c	/^    bool disable_vnet;$/;"	m	struct:E1000EState	file:
dlen	e1000e_core.c	/^    int dlen;$/;"	m	struct:E1000E_RingInfo_st	file:
dma_in	etraxfs_eth.c	/^        struct etraxfs_dma_client *dma_in;$/;"	m	union:ETRAXFSEthState::__anon120	typeref:struct:ETRAXFSEthState::__anon120::etraxfs_dma_client	file:
dma_mr	dp8393x.c	/^    void *dma_mr;$/;"	m	struct:dp8393xState	file:
dma_opaque	pcnet.h	/^    void *dma_opaque;$/;"	m	struct:PCNetState_st
dma_out	etraxfs_eth.c	/^        struct etraxfs_dma_client *dma_out;$/;"	m	union:ETRAXFSEthState::__anon119	typeref:struct:ETRAXFSEthState::__anon119::etraxfs_dma_client	file:
do_mac_read	lan9118.c	/^static uint32_t do_mac_read(lan9118_state *s, int reg)$/;"	f	file:
do_mac_write	lan9118.c	/^static void do_mac_write(lan9118_state *s, int reg, uint32_t val)$/;"	f	file:
do_phy_read	imx_fec.c	/^static uint32_t do_phy_read(IMXFECState *s, int reg)$/;"	f	file:
do_phy_read	lan9118.c	/^static uint32_t do_phy_read(lan9118_state *s, int reg)$/;"	f	file:
do_phy_write	imx_fec.c	/^static void do_phy_write(IMXFECState *s, int reg, uint32_t val)$/;"	f	file:
do_phy_write	lan9118.c	/^static void do_phy_write(lan9118_state *s, int reg, uint32_t val)$/;"	f	file:
do_tx_packet	lan9118.c	/^static void do_tx_packet(lan9118_state *s)$/;"	f	file:
dp8393xState	dp8393x.c	/^typedef struct dp8393xState {$/;"	s	file:
dp8393xState	dp8393x.c	/^} dp8393xState;$/;"	t	typeref:struct:dp8393xState	file:
dp8393x_can_receive	dp8393x.c	/^static int dp8393x_can_receive(NetClientState *nc)$/;"	f	file:
dp8393x_class_init	dp8393x.c	/^static void dp8393x_class_init(ObjectClass *klass, void *data)$/;"	f	file:
dp8393x_do_command	dp8393x.c	/^static void dp8393x_do_command(dp8393xState *s, uint16_t command)$/;"	f	file:
dp8393x_do_halt_transmission	dp8393x.c	/^static void dp8393x_do_halt_transmission(dp8393xState *s)$/;"	f	file:
dp8393x_do_load_cam	dp8393x.c	/^static void dp8393x_do_load_cam(dp8393xState *s)$/;"	f	file:
dp8393x_do_read_rra	dp8393x.c	/^static void dp8393x_do_read_rra(dp8393xState *s)$/;"	f	file:
dp8393x_do_receiver_disable	dp8393x.c	/^static void dp8393x_do_receiver_disable(dp8393xState *s)$/;"	f	file:
dp8393x_do_receiver_enable	dp8393x.c	/^static void dp8393x_do_receiver_enable(dp8393xState *s)$/;"	f	file:
dp8393x_do_software_reset	dp8393x.c	/^static void dp8393x_do_software_reset(dp8393xState *s)$/;"	f	file:
dp8393x_do_start_timer	dp8393x.c	/^static void dp8393x_do_start_timer(dp8393xState *s)$/;"	f	file:
dp8393x_do_stop_timer	dp8393x.c	/^static void dp8393x_do_stop_timer(dp8393xState *s)$/;"	f	file:
dp8393x_do_transmit_packets	dp8393x.c	/^static void dp8393x_do_transmit_packets(dp8393xState *s)$/;"	f	file:
dp8393x_info	dp8393x.c	/^static const TypeInfo dp8393x_info = {$/;"	v	file:
dp8393x_instance_init	dp8393x.c	/^static void dp8393x_instance_init(Object *obj)$/;"	f	file:
dp8393x_ops	dp8393x.c	/^static const MemoryRegionOps dp8393x_ops = {$/;"	v	file:
dp8393x_properties	dp8393x.c	/^static Property dp8393x_properties[] = {$/;"	v	file:
dp8393x_read	dp8393x.c	/^static uint64_t dp8393x_read(void *opaque, hwaddr addr, unsigned int size)$/;"	f	file:
dp8393x_realize	dp8393x.c	/^static void dp8393x_realize(DeviceState *dev, Error **errp)$/;"	f	file:
dp8393x_receive	dp8393x.c	/^static ssize_t dp8393x_receive(NetClientState *nc, const uint8_t * buf,$/;"	f	file:
dp8393x_receive_filter	dp8393x.c	/^static int dp8393x_receive_filter(dp8393xState *s, const uint8_t * buf,$/;"	f	file:
dp8393x_register_types	dp8393x.c	/^static void dp8393x_register_types(void)$/;"	f	file:
dp8393x_reset	dp8393x.c	/^static void dp8393x_reset(DeviceState *dev)$/;"	f	file:
dp8393x_set_next_tick	dp8393x.c	/^static void dp8393x_set_next_tick(dp8393xState *s)$/;"	f	file:
dp8393x_update_irq	dp8393x.c	/^static void dp8393x_update_irq(dp8393xState *s)$/;"	f	file:
dp8393x_update_wt_regs	dp8393x.c	/^static void dp8393x_update_wt_regs(dp8393xState *s)$/;"	f	file:
dp8393x_watchdog	dp8393x.c	/^static void dp8393x_watchdog(void *opaque)$/;"	f	file:
dp8393x_write	dp8393x.c	/^static void dp8393x_write(void *opaque, hwaddr addr, uint64_t data,$/;"	f	file:
drive	etraxfs_eth.c	/^    unsigned int drive;$/;"	m	struct:qemu_mdio	file:
drive	xilinx_axienet.c	/^    unsigned int drive;$/;"	m	struct:MDIOBus	file:
driverInfo	vmxnet3.h	/^    struct Vmxnet3_DriverInfo driverInfo;$/;"	m	struct:Vmxnet3_MiscConf	typeref:struct:Vmxnet3_MiscConf::Vmxnet3_DriverInfo
drv_shmem	vmxnet3.c	/^        hwaddr drv_shmem;$/;"	m	struct:__anon101	file:
dst	rocker/rocker_of_dpa.c	/^                    __be16 dst;      \/* TCP\/UDP\/SCTP destination port *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon58::__anon60::__anon61	file:
dst	rocker/rocker_of_dpa.c	/^                Ipv6Addr dst;       \/* IPv6 destination address *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon63::__anon64	file:
dst	rocker/rocker_of_dpa.c	/^                __be16 dst;          \/* TCP\/UDP\/SCTP destination port *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon63::__anon65	file:
dst	rocker/rocker_of_dpa.c	/^                __be32 dst;          \/* IP destination address *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon58::__anon59	file:
dst	rocker/rocker_of_dpa.c	/^        MACAddr dst;                 \/* ethernet destination address *\/$/;"	m	struct:of_dpa_flow_key::__anon55	file:
dst_mac	rocker/rocker_of_dpa.c	/^            MACAddr dst_mac;$/;"	m	struct:of_dpa_group::__anon70::__anon72	file:
dst_mac	rocker/rocker_of_dpa.c	/^            MACAddr dst_mac;$/;"	m	struct:of_dpa_group::__anon70::__anon74	file:
dt	e1000e_core.c	/^    int dt;$/;"	m	struct:E1000E_RingInfo_st	file:
dtype	vmxnet3.h	/^    u32        dtype:1;      \/* Descriptor type *\/$/;"	m	struct:Vmxnet3_RxDesc
dtype	vmxnet3.h	/^    u32 dtype:1;    \/* descriptor type *\/$/;"	m	struct:Vmxnet3_TxDesc
dump_statistics	eepro100.c	/^static void dump_statistics(EEPRO100State * s)$/;"	f	file:
duplex	rocker/rocker_fp.c	/^    uint8_t duplex;$/;"	m	struct:fp_port	file:
duplex	rocker/rocker_fp.c	/^enum duplex {$/;"	g	file:
duplex_mismatch	etraxfs_eth.c	/^    int duplex_mismatch;$/;"	m	struct:ETRAXFSEthState	file:
dword	vmxnet3.h	/^    __le32                dword[4];$/;"	m	union:Vmxnet3_GenericDesc
e1000_autoneg_done	e1000.c	/^e1000_autoneg_done(E1000State *s)$/;"	f	file:
e1000_autoneg_timer	e1000.c	/^e1000_autoneg_timer(void *opaque)$/;"	f	file:
e1000_base_info	e1000.c	/^static const TypeInfo e1000_base_info = {$/;"	v	file:
e1000_can_receive	e1000.c	/^e1000_can_receive(NetClientState *nc)$/;"	f	file:
e1000_class_init	e1000.c	/^static void e1000_class_init(ObjectClass *klass, void *data)$/;"	f	file:
e1000_context_desc	e1000_regs.h	/^struct e1000_context_desc {$/;"	s
e1000_data_desc	e1000_regs.h	/^struct e1000_data_desc {$/;"	s
e1000_devices	e1000.c	/^static const E1000Info e1000_devices[] = {$/;"	v	file:
e1000_eeprom_template	e1000.c	/^static const uint16_t e1000_eeprom_template[64] = {$/;"	v	file:
e1000_full_mac_needed	e1000.c	/^static bool e1000_full_mac_needed(void *opaque)$/;"	f	file:
e1000_has_rxbufs	e1000.c	/^static bool e1000_has_rxbufs(E1000State *s, size_t total_size)$/;"	f	file:
e1000_instance_init	e1000.c	/^static void e1000_instance_init(Object *obj)$/;"	f	file:
e1000_io_ops	e1000.c	/^static const MemoryRegionOps e1000_io_ops = {$/;"	v	file:
e1000_io_read	e1000.c	/^static uint64_t e1000_io_read(void *opaque, hwaddr addr,$/;"	f	file:
e1000_io_write	e1000.c	/^static void e1000_io_write(void *opaque, hwaddr addr,$/;"	f	file:
e1000_link_up	e1000.c	/^e1000_link_up(E1000State *s)$/;"	f	file:
e1000_mit_state_needed	e1000.c	/^static bool e1000_mit_state_needed(void *opaque)$/;"	f	file:
e1000_mit_timer	e1000.c	/^e1000_mit_timer(void *opaque)$/;"	f	file:
e1000_mmio_ops	e1000.c	/^static const MemoryRegionOps e1000_mmio_ops = {$/;"	v	file:
e1000_mmio_read	e1000.c	/^e1000_mmio_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
e1000_mmio_setup	e1000.c	/^e1000_mmio_setup(E1000State *d)$/;"	f	file:
e1000_mmio_write	e1000.c	/^e1000_mmio_write(void *opaque, hwaddr addr, uint64_t val,$/;"	f	file:
e1000_post_load	e1000.c	/^static int e1000_post_load(void *opaque, int version_id)$/;"	f	file:
e1000_pre_save	e1000.c	/^static void e1000_pre_save(void *opaque)$/;"	f	file:
e1000_properties	e1000.c	/^static Property e1000_properties[] = {$/;"	v	file:
e1000_receive	e1000.c	/^e1000_receive(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
e1000_receive_iov	e1000.c	/^e1000_receive_iov(NetClientState *nc, const struct iovec *iov, int iovcnt)$/;"	f	file:
e1000_register_types	e1000.c	/^static void e1000_register_types(void)$/;"	f	file:
e1000_reset	e1000.c	/^static void e1000_reset(void *opaque)$/;"	f	file:
e1000_rx_desc	e1000_regs.h	/^struct e1000_rx_desc {$/;"	s
e1000_rx_desc_extended	e1000_regs.h	/^union e1000_rx_desc_extended {$/;"	u
e1000_rx_desc_packet_split	e1000_regs.h	/^union e1000_rx_desc_packet_split {$/;"	u
e1000_send_packet	e1000.c	/^e1000_send_packet(E1000State *s, const uint8_t *buf, int size)$/;"	f	file:
e1000_set_link_status	e1000.c	/^e1000_set_link_status(NetClientState *nc)$/;"	f	file:
e1000_tx	e1000.c	/^    struct e1000_tx {$/;"	s	struct:E1000State_st	file:
e1000_tx_desc	e1000_regs.h	/^struct e1000_tx_desc {$/;"	s
e1000_write_config	e1000.c	/^static void e1000_write_config(PCIDevice *pci_dev, uint32_t address,$/;"	f	file:
e1000e_add_pm_capability	e1000e.c	/^e1000e_add_pm_capability(PCIDevice *pdev, uint8_t offset, uint16_t pmc)$/;"	f	file:
e1000e_autoneg_pause	e1000e_core.c	/^e1000e_autoneg_pause(E1000ECore *core)$/;"	f	file:
e1000e_autoneg_resume	e1000e_core.c	/^e1000e_autoneg_resume(E1000ECore *core)$/;"	f	file:
e1000e_autoneg_timer	e1000e_core.c	/^e1000e_autoneg_timer(void *opaque)$/;"	f	file:
e1000e_ba_state	e1000e_core.c	/^} e1000e_ba_state;$/;"	t	typeref:struct:e1000e_ba_state_st	file:
e1000e_ba_state_st	e1000e_core.c	/^typedef struct e1000e_ba_state_st {$/;"	s	file:
e1000e_build_rx_metadata	e1000e_core.c	/^e1000e_build_rx_metadata(E1000ECore *core,$/;"	f	file:
e1000e_calc_per_desc_buf_size	e1000e_core.c	/^e1000e_calc_per_desc_buf_size(E1000ECore *core)$/;"	f	file:
e1000e_calc_rxdesclen	e1000e_core.c	/^e1000e_calc_rxdesclen(E1000ECore *core)$/;"	f	file:
e1000e_can_receive	e1000e_core.c	/^e1000e_can_receive(E1000ECore *core)$/;"	f
e1000e_class_init	e1000e.c	/^static void e1000e_class_init(ObjectClass *class, void *data)$/;"	f	file:
e1000e_cleanup_msix	e1000e.c	/^e1000e_cleanup_msix(E1000EState *s)$/;"	f	file:
e1000e_clear_ims_bits	e1000e_core.c	/^e1000e_clear_ims_bits(E1000ECore *core, uint32_t bits)$/;"	f	file:
e1000e_core_pci_realize	e1000e_core.c	/^e1000e_core_pci_realize(E1000ECore     *core,$/;"	f
e1000e_core_pci_uninit	e1000e_core.c	/^e1000e_core_pci_uninit(E1000ECore *core)$/;"	f
e1000e_core_post_load	e1000e_core.c	/^e1000e_core_post_load(E1000ECore *core)$/;"	f
e1000e_core_pre_save	e1000e_core.c	/^void e1000e_core_pre_save(E1000ECore *core)$/;"	f
e1000e_core_read	e1000e_core.c	/^e1000e_core_read(E1000ECore *core, hwaddr addr, unsigned size)$/;"	f
e1000e_core_realize	e1000e.c	/^static void e1000e_core_realize(E1000EState *s)$/;"	f	file:
e1000e_core_reset	e1000e_core.c	/^e1000e_core_reset(E1000ECore *core)$/;"	f
e1000e_core_set_link_status	e1000e_core.c	/^e1000e_core_set_link_status(E1000ECore *core)$/;"	f
e1000e_core_write	e1000e_core.c	/^e1000e_core_write(E1000ECore *core, hwaddr addr, uint64_t val, unsigned size)$/;"	f
e1000e_do_ps	e1000e_core.c	/^e1000e_do_ps(E1000ECore *core, struct NetRxPkt *pkt, size_t *hdr_len)$/;"	f	file:
e1000e_eeprom_template	e1000e.c	/^static const uint16_t e1000e_eeprom_template[64] = {$/;"	v	file:
e1000e_eitr_should_postpone	e1000e_core.c	/^e1000e_eitr_should_postpone(E1000ECore *core, int idx)$/;"	f	file:
e1000e_fix_icr_asserted	e1000e_core.c	/^e1000e_fix_icr_asserted(E1000ECore *core)$/;"	f	file:
e1000e_gen_dsn	e1000e.c	/^e1000e_gen_dsn(uint8_t *mac)$/;"	f	file:
e1000e_get_ctrl	e1000e_core.c	/^e1000e_get_ctrl(E1000ECore *core, int index)$/;"	f	file:
e1000e_get_reg_index_with_offset	e1000e_core.c	/^e1000e_get_reg_index_with_offset(const uint16_t *mac_reg_access, hwaddr addr)$/;"	f	file:
e1000e_get_status	e1000e_core.c	/^e1000e_get_status(E1000ECore *core, int index)$/;"	f	file:
e1000e_get_tarc	e1000e_core.c	/^e1000e_get_tarc(E1000ECore *core, int index)$/;"	f	file:
e1000e_getreg	e1000e_core.c	2835;"	d	file:
e1000e_has_rxbufs	e1000e_core.c	/^e1000e_has_rxbufs(E1000ECore *core, const E1000E_RingInfo *r,$/;"	f	file:
e1000e_have_autoneg	e1000e_core.c	/^e1000e_have_autoneg(E1000ECore *core)$/;"	f	file:
e1000e_info	e1000e.c	/^static const TypeInfo e1000e_info = {$/;"	v	file:
e1000e_init_msix	e1000e.c	/^e1000e_init_msix(E1000EState *s)$/;"	f	file:
e1000e_init_net_peer	e1000e.c	/^e1000e_init_net_peer(E1000EState *s, PCIDevice *pci_dev, uint8_t *macaddr)$/;"	f	file:
e1000e_instance_init	e1000e.c	/^static void e1000e_instance_init(Object *obj)$/;"	f	file:
e1000e_intmgr_collect_delayed_causes	e1000e_core.c	/^e1000e_intmgr_collect_delayed_causes(E1000ECore *core)$/;"	f	file:
e1000e_intmgr_timer_pause	e1000e_core.c	/^e1000e_intmgr_timer_pause(E1000IntrDelayTimer *timer)$/;"	f	file:
e1000e_intmgr_timer_resume	e1000e_core.c	/^e1000e_intmgr_timer_resume(E1000IntrDelayTimer *timer)$/;"	f	file:
e1000e_intrmgr_delay_rx_causes	e1000e_core.c	/^e1000e_intrmgr_delay_rx_causes(E1000ECore *core, uint32_t *causes)$/;"	f	file:
e1000e_intrmgr_delay_tx_causes	e1000e_core.c	/^e1000e_intrmgr_delay_tx_causes(E1000ECore *core, uint32_t *causes)$/;"	f	file:
e1000e_intrmgr_fire_all_timers	e1000e_core.c	/^e1000e_intrmgr_fire_all_timers(E1000ECore *core)$/;"	f	file:
e1000e_intrmgr_fire_delayed_interrupts	e1000e_core.c	/^e1000e_intrmgr_fire_delayed_interrupts(E1000ECore *core)$/;"	f	file:
e1000e_intrmgr_initialize_all_timers	e1000e_core.c	/^e1000e_intrmgr_initialize_all_timers(E1000ECore *core, bool create)$/;"	f	file:
e1000e_intrmgr_on_msix_throttling_timer	e1000e_core.c	/^e1000e_intrmgr_on_msix_throttling_timer(void *opaque)$/;"	f	file:
e1000e_intrmgr_on_throttling_timer	e1000e_core.c	/^e1000e_intrmgr_on_throttling_timer(void *opaque)$/;"	f	file:
e1000e_intrmgr_on_timer	e1000e_core.c	/^e1000e_intrmgr_on_timer(void *opaque)$/;"	f	file:
e1000e_intrmgr_pause	e1000e_core.c	/^e1000e_intrmgr_pause(E1000ECore *core)$/;"	f	file:
e1000e_intrmgr_pci_realize	e1000e_core.c	/^e1000e_intrmgr_pci_realize(E1000ECore *core)$/;"	f	file:
e1000e_intrmgr_pci_unint	e1000e_core.c	/^e1000e_intrmgr_pci_unint(E1000ECore *core)$/;"	f	file:
e1000e_intrmgr_rearm_timer	e1000e_core.c	/^e1000e_intrmgr_rearm_timer(E1000IntrDelayTimer *timer)$/;"	f	file:
e1000e_intrmgr_reset	e1000e_core.c	/^e1000e_intrmgr_reset(E1000ECore *core)$/;"	f	file:
e1000e_intrmgr_resume	e1000e_core.c	/^e1000e_intrmgr_resume(E1000ECore *core)$/;"	f	file:
e1000e_intrmgr_stop_delay_timers	e1000e_core.c	/^e1000e_intrmgr_stop_delay_timers(E1000ECore *core)$/;"	f	file:
e1000e_intrmgr_stop_timer	e1000e_core.c	/^e1000e_intrmgr_stop_timer(E1000IntrDelayTimer *timer)$/;"	f	file:
e1000e_io_get_reg_index	e1000e.c	/^e1000e_io_get_reg_index(E1000EState *s, uint32_t *idx)$/;"	f	file:
e1000e_io_read	e1000e.c	/^e1000e_io_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
e1000e_io_write	e1000e.c	/^e1000e_io_write(void *opaque, hwaddr addr,$/;"	f	file:
e1000e_is_tcp_ack	e1000e_core.c	/^e1000e_is_tcp_ack(E1000ECore *core, struct NetRxPkt *rx_pkt)$/;"	f	file:
e1000e_itr_should_postpone	e1000e_core.c	/^e1000e_itr_should_postpone(E1000ECore *core)$/;"	f	file:
e1000e_link_down	e1000e_core.c	/^e1000e_link_down(E1000ECore *core)$/;"	f	file:
e1000e_lower_legacy_irq	e1000e_core.c	/^e1000e_lower_legacy_irq(E1000ECore *core)$/;"	f	file:
e1000e_mac_eitr_read	e1000e_core.c	/^e1000e_mac_eitr_read(E1000ECore *core, int index)$/;"	f	file:
e1000e_mac_icr_read	e1000e_core.c	/^e1000e_mac_icr_read(E1000ECore *core, int index)$/;"	f	file:
e1000e_mac_ics_read	e1000e_core.c	/^e1000e_mac_ics_read(E1000ECore *core, int index)$/;"	f	file:
e1000e_mac_ims_read	e1000e_core.c	/^e1000e_mac_ims_read(E1000ECore *core, int index)$/;"	f	file:
e1000e_mac_itr_read	e1000e_core.c	/^e1000e_mac_itr_read(E1000ECore *core, int index)$/;"	f	file:
e1000e_mac_read_clr4	e1000e_core.c	/^e1000e_mac_read_clr4(E1000ECore *core, int index)$/;"	f	file:
e1000e_mac_read_clr8	e1000e_core.c	/^e1000e_mac_read_clr8(E1000ECore *core, int index)$/;"	f	file:
e1000e_mac_readreg	e1000e_core.c	/^e1000e_mac_readreg(E1000ECore *core, int index)$/;"	f	file:
e1000e_mac_reg_init	e1000e_core.c	/^static const uint32_t e1000e_mac_reg_init[] = {$/;"	v	file:
e1000e_mac_setmacaddr	e1000e_core.c	/^e1000e_mac_setmacaddr(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_mac_swsm_read	e1000e_core.c	/^e1000e_mac_swsm_read(E1000ECore *core, int index)$/;"	f	file:
e1000e_mac_writereg	e1000e_core.c	/^e1000e_mac_writereg(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_macreg_readops	e1000e_core.c	/^static uint32_t (*e1000e_macreg_readops[])(E1000ECore *, int) = {$/;"	v	file:
e1000e_macreg_writeops	e1000e_core.c	/^static void (*e1000e_macreg_writeops[])(E1000ECore *, int, uint32_t) = {$/;"	v	file:
e1000e_mmio_read	e1000e.c	/^e1000e_mmio_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
e1000e_mmio_write	e1000e.c	/^e1000e_mmio_write(void *opaque, hwaddr addr,$/;"	f	file:
e1000e_mq_queue_idx	e1000e_core.c	/^e1000e_mq_queue_idx(int base_reg_idx, int reg_idx)$/;"	f	file:
e1000e_msix_clear	e1000e_core.c	/^e1000e_msix_clear(E1000ECore *core, uint32_t causes)$/;"	f	file:
e1000e_msix_clear_one	e1000e_core.c	/^e1000e_msix_clear_one(E1000ECore *core, uint32_t cause, uint32_t int_cfg)$/;"	f	file:
e1000e_msix_notify	e1000e_core.c	/^e1000e_msix_notify(E1000ECore *core, uint32_t causes)$/;"	f	file:
e1000e_msix_notify_one	e1000e_core.c	/^e1000e_msix_notify_one(E1000ECore *core, uint32_t cause, uint32_t int_cfg)$/;"	f	file:
e1000e_nc_can_receive	e1000e.c	/^e1000e_nc_can_receive(NetClientState *nc)$/;"	f	file:
e1000e_nc_receive	e1000e.c	/^e1000e_nc_receive(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
e1000e_nc_receive_iov	e1000e.c	/^e1000e_nc_receive_iov(NetClientState *nc, const struct iovec *iov, int iovcnt)$/;"	f	file:
e1000e_on_tx_done_update_stats	e1000e_core.c	/^e1000e_on_tx_done_update_stats(E1000ECore *core, struct NetTxPkt *tx_pkt)$/;"	f	file:
e1000e_parse_rxbufsize	e1000e_core.c	/^e1000e_parse_rxbufsize(E1000ECore *core)$/;"	f	file:
e1000e_pci_realize	e1000e.c	/^static void e1000e_pci_realize(PCIDevice *pci_dev, Error **errp)$/;"	f	file:
e1000e_pci_uninit	e1000e.c	/^static void e1000e_pci_uninit(PCIDevice *pci_dev)$/;"	f	file:
e1000e_phy_reg_check_cap	e1000e_core.c	/^e1000e_phy_reg_check_cap(E1000ECore *core, uint32_t addr,$/;"	f	file:
e1000e_phy_reg_init	e1000e_core.c	/^e1000e_phy_reg_init[E1000E_PHY_PAGES][E1000E_PHY_PAGE_SIZE] = {$/;"	v	file:
e1000e_phy_reg_write	e1000e_core.c	/^e1000e_phy_reg_write(E1000ECore *core, uint8_t page,$/;"	f	file:
e1000e_phy_regcap	e1000e_core.c	/^static const char e1000e_phy_regcap[E1000E_PHY_PAGES][0x20] = {$/;"	v	file:
e1000e_phyreg_writeops	e1000e_core.c	/^void(*e1000e_phyreg_writeops[E1000E_PHY_PAGES][E1000E_PHY_PAGE_SIZE])$/;"	v	file:
e1000e_post_load	e1000e.c	/^static int e1000e_post_load(void *opaque, int version_id)$/;"	f	file:
e1000e_postpone_interrupt	e1000e_core.c	/^e1000e_postpone_interrupt(bool *interrupt_pending,$/;"	f	file:
e1000e_pre_save	e1000e.c	/^static void e1000e_pre_save(void *opaque)$/;"	f	file:
e1000e_process_snap_option	e1000e_core.c	/^e1000e_process_snap_option(E1000ECore *core, uint32_t cmd_and_length)$/;"	f	file:
e1000e_process_ts_option	e1000e_core.c	/^e1000e_process_ts_option(E1000ECore *core, struct e1000_tx_desc *dp)$/;"	f	file:
e1000e_process_tx_desc	e1000e_core.c	/^e1000e_process_tx_desc(E1000ECore *core,$/;"	f	file:
e1000e_prop_disable_vnet	e1000e.c	/^static PropertyInfo e1000e_prop_disable_vnet,$/;"	v	file:
e1000e_prop_subsys	e1000e.c	/^                    e1000e_prop_subsys;$/;"	v	file:
e1000e_prop_subsys_ven	e1000e.c	/^                    e1000e_prop_subsys_ven,$/;"	v	file:
e1000e_properties	e1000e.c	/^static Property e1000e_properties[] = {$/;"	v	file:
e1000e_putreg	e1000e_core.c	3041;"	d	file:
e1000e_qdev_reset	e1000e.c	/^static void e1000e_qdev_reset(DeviceState *dev)$/;"	f	file:
e1000e_raise_legacy_irq	e1000e_core.c	/^e1000e_raise_legacy_irq(E1000ECore *core)$/;"	f	file:
e1000e_read_ext_rx_descr	e1000e_core.c	/^e1000e_read_ext_rx_descr(E1000ECore *core, uint8_t *desc, hwaddr *buff_addr)$/;"	f	file:
e1000e_read_lgcy_rx_descr	e1000e_core.c	/^e1000e_read_lgcy_rx_descr(E1000ECore *core, uint8_t *desc, hwaddr *buff_addr)$/;"	f	file:
e1000e_read_ps_rx_descr	e1000e_core.c	/^e1000e_read_ps_rx_descr(E1000ECore *core, uint8_t *desc,$/;"	f	file:
e1000e_read_rx_descr	e1000e_core.c	/^e1000e_read_rx_descr(E1000ECore *core, uint8_t *desc,$/;"	f	file:
e1000e_receive	e1000e_core.c	/^e1000e_receive(E1000ECore *core, const uint8_t *buf, size_t size)$/;"	f
e1000e_receive_filter	e1000e_core.c	/^e1000e_receive_filter(E1000ECore *core, const uint8_t *buf, int size)$/;"	f	file:
e1000e_receive_iov	e1000e_core.c	/^e1000e_receive_iov(E1000ECore *core, const struct iovec *iov, int iovcnt)$/;"	f
e1000e_register_types	e1000e.c	/^static void e1000e_register_types(void)$/;"	f	file:
e1000e_ring_advance	e1000e_core.c	/^e1000e_ring_advance(E1000ECore *core, const E1000E_RingInfo *r, uint32_t count)$/;"	f	file:
e1000e_ring_base	e1000e_core.c	/^e1000e_ring_base(E1000ECore *core, const E1000E_RingInfo *r)$/;"	f	file:
e1000e_ring_empty	e1000e_core.c	/^e1000e_ring_empty(E1000ECore *core, const E1000E_RingInfo *r)$/;"	f	file:
e1000e_ring_enabled	e1000e_core.c	/^e1000e_ring_enabled(E1000ECore *core, const E1000E_RingInfo *r)$/;"	f	file:
e1000e_ring_free_descr_num	e1000e_core.c	/^e1000e_ring_free_descr_num(E1000ECore *core, const E1000E_RingInfo *r)$/;"	f	file:
e1000e_ring_head_descr	e1000e_core.c	/^e1000e_ring_head_descr(E1000ECore *core, const E1000E_RingInfo *r)$/;"	f	file:
e1000e_ring_len	e1000e_core.c	/^e1000e_ring_len(E1000ECore *core, const E1000E_RingInfo *r)$/;"	f	file:
e1000e_rss_calc_hash	e1000e_core.c	/^e1000e_rss_calc_hash(E1000ECore *core,$/;"	f	file:
e1000e_rss_enabled	e1000e_core.c	/^e1000e_rss_enabled(E1000ECore *core)$/;"	f	file:
e1000e_rss_get_hash_type	e1000e_core.c	/^e1000e_rss_get_hash_type(E1000ECore *core, struct NetRxPkt *pkt)$/;"	f	file:
e1000e_rss_parse_packet	e1000e_core.c	/^e1000e_rss_parse_packet(E1000ECore *core,$/;"	f	file:
e1000e_rx_csum_enabled	e1000e_core.c	/^e1000e_rx_csum_enabled(E1000ECore *core)$/;"	f	file:
e1000e_rx_descr_threshold_hit	e1000e_core.c	/^e1000e_rx_descr_threshold_hit(E1000ECore *core, const E1000E_RingInfo *rxi)$/;"	f	file:
e1000e_rx_fix_l4_csum	e1000e_core.c	/^e1000e_rx_fix_l4_csum(E1000ECore *core, struct NetRxPkt *pkt)$/;"	f	file:
e1000e_rx_l3_cso_enabled	e1000e_core.c	/^e1000e_rx_l3_cso_enabled(E1000ECore *core)$/;"	f	file:
e1000e_rx_l4_cso_enabled	e1000e_core.c	/^e1000e_rx_l4_cso_enabled(E1000ECore *core)$/;"	f	file:
e1000e_rx_ring_init	e1000e_core.c	/^e1000e_rx_ring_init(E1000ECore *core, E1000E_RxRing *rxr, int idx)$/;"	f	file:
e1000e_rx_use_legacy_descriptor	e1000e_core.c	/^e1000e_rx_use_legacy_descriptor(E1000ECore *core)$/;"	f	file:
e1000e_rx_use_ps_descriptor	e1000e_core.c	/^e1000e_rx_use_ps_descriptor(E1000ECore *core)$/;"	f	file:
e1000e_rx_wb_interrupt_cause	e1000e_core.c	/^e1000e_rx_wb_interrupt_cause(E1000ECore *core, int queue_idx,$/;"	f	file:
e1000e_send_msi	e1000e_core.c	/^e1000e_send_msi(E1000ECore *core, bool msix)$/;"	f	file:
e1000e_set_12bit	e1000e_core.c	/^e1000e_set_12bit(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_16bit	e1000e_core.c	/^e1000e_set_16bit(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_ctrl	e1000e_core.c	/^e1000e_set_ctrl(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_ctrlext	e1000e_core.c	/^e1000e_set_ctrlext(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_dbal	e1000e_core.c	/^e1000e_set_dbal(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_dlen	e1000e_core.c	/^e1000e_set_dlen(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_eecd	e1000e_core.c	/^e1000e_set_eecd(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_eerd	e1000e_core.c	/^e1000e_set_eerd(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_eewr	e1000e_core.c	/^e1000e_set_eewr(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_eitr	e1000e_core.c	/^e1000e_set_eitr(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_fcrth	e1000e_core.c	/^e1000e_set_fcrth(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_fcrtl	e1000e_core.c	/^e1000e_set_fcrtl(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_gcr	e1000e_core.c	/^e1000e_set_gcr(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_icr	e1000e_core.c	/^e1000e_set_icr(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_ics	e1000e_core.c	/^e1000e_set_ics(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_imc	e1000e_core.c	/^e1000e_set_imc(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_ims	e1000e_core.c	/^e1000e_set_ims(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_interrupt_cause	e1000e_core.c	/^e1000e_set_interrupt_cause(E1000ECore *core, uint32_t val)$/;"	f	file:
e1000e_set_itr	e1000e_core.c	/^e1000e_set_itr(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_link_status	e1000e.c	/^e1000e_set_link_status(NetClientState *nc)$/;"	f	file:
e1000e_set_mdic	e1000e_core.c	/^e1000e_set_mdic(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_pbaclr	e1000e_core.c	/^e1000e_set_pbaclr(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_phy_ctrl	e1000e_core.c	/^e1000e_set_phy_ctrl(E1000ECore *core, int index, uint16_t val)$/;"	f	file:
e1000e_set_phy_oem_bits	e1000e_core.c	/^e1000e_set_phy_oem_bits(E1000ECore *core, int index, uint16_t val)$/;"	f	file:
e1000e_set_phy_page	e1000e_core.c	/^e1000e_set_phy_page(E1000ECore *core, int index, uint16_t val)$/;"	f	file:
e1000e_set_psrctl	e1000e_core.c	/^e1000e_set_psrctl(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_rdt	e1000e_core.c	/^e1000e_set_rdt(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_rdtr	e1000e_core.c	/^e1000e_set_rdtr(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_rfctl	e1000e_core.c	/^e1000e_set_rfctl(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_rx_control	e1000e_core.c	/^e1000e_set_rx_control(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_rxcsum	e1000e_core.c	/^e1000e_set_rxcsum(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_rxdctl	e1000e_core.c	/^e1000e_set_rxdctl(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_status	e1000e_core.c	/^e1000e_set_status(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_tctl	e1000e_core.c	/^e1000e_set_tctl(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_tdt	e1000e_core.c	/^e1000e_set_tdt(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_tidv	e1000e_core.c	/^e1000e_set_tidv(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_set_vet	e1000e_core.c	/^e1000e_set_vet(E1000ECore *core, int index, uint32_t val)$/;"	f	file:
e1000e_setup_tx_offloads	e1000e_core.c	/^e1000e_setup_tx_offloads(E1000ECore *core, struct e1000e_tx *tx)$/;"	f	file:
e1000e_start_recv	e1000e_core.c	/^e1000e_start_recv(E1000ECore *core)$/;"	f
e1000e_start_xmit	e1000e_core.c	/^e1000e_start_xmit(E1000ECore *core, const E1000E_TxRing *txr)$/;"	f	file:
e1000e_tx	e1000e_core.h	/^    struct e1000e_tx {$/;"	s	struct:E1000Core
e1000e_tx_pkt_send	e1000e_core.c	/^e1000e_tx_pkt_send(E1000ECore *core, struct e1000e_tx *tx, int queue_index)$/;"	f	file:
e1000e_tx_ring_init	e1000e_core.c	/^e1000e_tx_ring_init(E1000ECore *core, E1000E_TxRing *txr, int idx)$/;"	f	file:
e1000e_tx_wb_interrupt_cause	e1000e_core.c	/^e1000e_tx_wb_interrupt_cause(E1000ECore *core, int queue_idx)$/;"	f	file:
e1000e_txdesc_writeback	e1000e_core.c	/^e1000e_txdesc_writeback(E1000ECore *core, dma_addr_t base,$/;"	f	file:
e1000e_unuse_msix_vectors	e1000e.c	/^e1000e_unuse_msix_vectors(E1000EState *s, int num_vectors)$/;"	f	file:
e1000e_update_flowctl_status	e1000e_core.c	/^static void e1000e_update_flowctl_status(E1000ECore *core)$/;"	f	file:
e1000e_update_interrupt_state	e1000e_core.c	/^e1000e_update_interrupt_state(E1000ECore *core)$/;"	f	file:
e1000e_update_rx_offloads	e1000e_core.c	/^e1000e_update_rx_offloads(E1000ECore *core)$/;"	f	file:
e1000e_update_rx_stats	e1000e_core.c	/^e1000e_update_rx_stats(E1000ECore *core,$/;"	f	file:
e1000e_use_msix_vectors	e1000e.c	/^e1000e_use_msix_vectors(E1000EState *s, int num_vectors)$/;"	f	file:
e1000e_verify_csum_in_sw	e1000e_core.c	/^e1000e_verify_csum_in_sw(E1000ECore *core,$/;"	f	file:
e1000e_vm_state_change	e1000e_core.c	/^e1000e_vm_state_change(void *opaque, int running, RunState state)$/;"	f	file:
e1000e_vmstate	e1000e.c	/^static const VMStateDescription e1000e_vmstate = {$/;"	v	file:
e1000e_vmstate_intr_timer	e1000e.c	/^static const VMStateDescription e1000e_vmstate_intr_timer = {$/;"	v	file:
e1000e_vmstate_tx	e1000e.c	/^static const VMStateDescription e1000e_vmstate_tx = {$/;"	v	file:
e1000e_write_config	e1000e.c	/^static void e1000e_write_config(PCIDevice *pci_dev, uint32_t address,$/;"	f	file:
e1000e_write_ext_rx_descr	e1000e_core.c	/^e1000e_write_ext_rx_descr(E1000ECore *core, uint8_t *desc,$/;"	f	file:
e1000e_write_hdr_to_rx_buffers	e1000e_core.c	/^e1000e_write_hdr_to_rx_buffers(E1000ECore *core,$/;"	f	file:
e1000e_write_lgcy_rx_descr	e1000e_core.c	/^e1000e_write_lgcy_rx_descr(E1000ECore *core, uint8_t *desc,$/;"	f	file:
e1000e_write_packet_to_guest	e1000e_core.c	/^e1000e_write_packet_to_guest(E1000ECore *core, struct NetRxPkt *pkt,$/;"	f	file:
e1000e_write_ps_rx_descr	e1000e_core.c	/^e1000e_write_ps_rx_descr(E1000ECore *core, uint8_t *desc,$/;"	f	file:
e1000e_write_rx_descr	e1000e_core.c	/^e1000e_write_rx_descr(E1000ECore *core, uint8_t *desc,$/;"	f	file:
e1000e_write_to_rx_buffers	e1000e_core.c	/^e1000e_write_to_rx_buffers(E1000ECore *core,$/;"	f	file:
e1000x_core_prepare_eeprom	e1000x_common.c	/^e1000x_core_prepare_eeprom(uint16_t       *eeprom,$/;"	f
e1000x_fcs_len	e1000x_common.h	/^e1000x_fcs_len(uint32_t *mac)$/;"	f
e1000x_grow_8reg_if_not_full	e1000x_common.h	/^e1000x_grow_8reg_if_not_full(uint32_t *mac, int index, int size)$/;"	f
e1000x_hw_rx_enabled	e1000x_common.c	/^bool e1000x_hw_rx_enabled(uint32_t *mac)$/;"	f
e1000x_inc_reg_if_not_full	e1000x_common.h	/^e1000x_inc_reg_if_not_full(uint32_t *mac, int index)$/;"	f
e1000x_increase_size_stats	e1000x_common.c	/^e1000x_increase_size_stats(uint32_t *mac, const int *size_regs, int size)$/;"	f
e1000x_is_oversized	e1000x_common.c	/^bool e1000x_is_oversized(uint32_t *mac, size_t size)$/;"	f
e1000x_is_vlan_packet	e1000x_common.c	/^bool e1000x_is_vlan_packet(const uint8_t *buf, uint16_t vet)$/;"	f
e1000x_is_vlan_txd	e1000x_common.h	/^e1000x_is_vlan_txd(uint32_t txd_lower)$/;"	f
e1000x_read_tx_ctx_descr	e1000x_common.c	/^e1000x_read_tx_ctx_descr(struct e1000_context_desc *d,$/;"	f
e1000x_reset_mac_addr	e1000x_common.c	/^void e1000x_reset_mac_addr(NICState *nic, uint32_t *mac_regs,$/;"	f
e1000x_restart_autoneg	e1000x_common.c	/^void e1000x_restart_autoneg(uint32_t *mac, uint16_t *phy, QEMUTimer *timer)$/;"	f
e1000x_rx_group_filter	e1000x_common.c	/^bool e1000x_rx_group_filter(uint32_t *mac, const uint8_t *buf)$/;"	f
e1000x_rx_ready	e1000x_common.c	/^bool e1000x_rx_ready(PCIDevice *d, uint32_t *mac)$/;"	f
e1000x_rxbufsize	e1000x_common.c	/^e1000x_rxbufsize(uint32_t rctl)$/;"	f
e1000x_txd_props	e1000x_common.h	/^typedef struct e1000x_txd_props {$/;"	s
e1000x_txd_props	e1000x_common.h	/^} e1000x_txd_props;$/;"	t	typeref:struct:e1000x_txd_props
e1000x_update_regs_on_autoneg_done	e1000x_common.c	/^void e1000x_update_regs_on_autoneg_done(uint32_t *mac, uint16_t *phy)$/;"	f
e1000x_update_regs_on_link_down	e1000x_common.h	/^e1000x_update_regs_on_link_down(uint32_t *mac, uint16_t *phy)$/;"	f
e1000x_update_regs_on_link_up	e1000x_common.h	/^e1000x_update_regs_on_link_up(uint32_t *mac, uint16_t *phy)$/;"	f
e1000x_update_rx_total_stats	e1000x_common.c	/^e1000x_update_rx_total_stats(uint32_t *mac,$/;"	f
e1000x_vlan_enabled	e1000x_common.h	/^e1000x_vlan_enabled(uint32_t *mac)$/;"	f
e1000x_vlan_rx_filter_enabled	e1000x_common.h	/^e1000x_vlan_rx_filter_enabled(uint32_t *mac)$/;"	f
e100_compute_mcast_idx	eepro100.c	/^static unsigned e100_compute_mcast_idx(const uint8_t *ep)$/;"	f	file:
e100_devices	eepro100.c	/^static E100PCIDeviceInfo e100_devices[] = {$/;"	v	file:
e100_nic_realize	eepro100.c	/^static void e100_nic_realize(PCIDevice *pci_dev, Error **errp)$/;"	f	file:
e100_pci_reset	eepro100.c	/^static void e100_pci_reset(EEPRO100State * s)$/;"	f	file:
e100_properties	eepro100.c	/^static Property e100_properties[] = {$/;"	v	file:
e100_read_reg2	eepro100.c	/^static uint16_t e100_read_reg2(EEPRO100State *s, E100RegisterOffset addr)$/;"	f	file:
e100_read_reg4	eepro100.c	/^static uint32_t e100_read_reg4(EEPRO100State *s, E100RegisterOffset addr)$/;"	f	file:
e100_reg	eepro100.c	/^static const char * const e100_reg[PCI_IO_SIZE \/ 4] = {$/;"	v	file:
e100_write_reg2	eepro100.c	/^static void e100_write_reg2(EEPRO100State *s, E100RegisterOffset addr,$/;"	f	file:
e100_write_reg4	eepro100.c	/^static void e100_write_reg4(EEPRO100State *s, E100RegisterOffset addr,$/;"	f	file:
e2p_cmd	lan9118.c	/^    uint32_t e2p_cmd;$/;"	m	struct:__anon123	file:
e2p_data	lan9118.c	/^    uint32_t e2p_data;$/;"	m	struct:__anon123	file:
eTSEC	fsl_etsec/etsec.h	/^typedef struct eTSEC {$/;"	s
eTSEC	fsl_etsec/etsec.h	/^} eTSEC;$/;"	t	typeref:struct:eTSEC
eTSEC_RECEIVE	fsl_etsec/etsec.h	157;"	d
eTSEC_Register	fsl_etsec/etsec.h	/^typedef struct eTSEC_Register {$/;"	s
eTSEC_Register	fsl_etsec/etsec.h	/^} eTSEC_Register;$/;"	t	typeref:struct:eTSEC_Register
eTSEC_Register_Access_Type	fsl_etsec/registers.h	/^enum eTSEC_Register_Access_Type {$/;"	g
eTSEC_Register_Definition	fsl_etsec/registers.h	/^typedef struct eTSEC_Register_Definition {$/;"	s
eTSEC_Register_Definition	fsl_etsec/registers.h	/^} eTSEC_Register_Definition;$/;"	t	typeref:struct:eTSEC_Register_Definition
eTSEC_TRANSMIT	fsl_etsec/etsec.h	156;"	d
eTSEC_registers_def	fsl_etsec/registers.c	/^const eTSEC_Register_Definition eTSEC_registers_def[] = {$/;"	v
eTSEC_rxtx_bd	fsl_etsec/etsec.h	/^typedef struct eTSEC_rxtx_bd {$/;"	s
eTSEC_rxtx_bd	fsl_etsec/etsec.h	/^} eTSEC_rxtx_bd;$/;"	t	typeref:struct:eTSEC_rxtx_bd
ecr	mcf_fec.c	/^    uint32_t ecr;$/;"	m	struct:__anon36	file:
ecr	vmxnet3.h	/^    __le32              ecr;$/;"	m	struct:Vmxnet3_DriverShared
eecd_state	e1000.c	/^    } eecd_state;$/;"	m	struct:E1000State_st	typeref:struct:E1000State_st::__anon89	file:
eecs	rtl8139.c	/^    uint8_t eecs;$/;"	m	struct:EEprom9346	file:
eedi	rtl8139.c	/^    uint8_t eedi;$/;"	m	struct:EEprom9346	file:
eedo	rtl8139.c	/^    uint8_t eedo;$/;"	m	struct:EEprom9346	file:
eepro100_acknowledge	eepro100.c	/^static void eepro100_acknowledge(EEPRO100State * s)$/;"	f	file:
eepro100_class_init	eepro100.c	/^static void eepro100_class_init(ObjectClass *klass, void *data)$/;"	f	file:
eepro100_cna_interrupt	eepro100.c	/^static void eepro100_cna_interrupt(EEPRO100State * s)$/;"	f	file:
eepro100_cu_command	eepro100.c	/^static void eepro100_cu_command(EEPRO100State * s, uint8_t val)$/;"	f	file:
eepro100_cx_interrupt	eepro100.c	/^static void eepro100_cx_interrupt(EEPRO100State * s)$/;"	f	file:
eepro100_fr_interrupt	eepro100.c	/^static void eepro100_fr_interrupt(EEPRO100State * s)$/;"	f	file:
eepro100_get_class	eepro100.c	/^static E100PCIDeviceInfo *eepro100_get_class(EEPRO100State *s)$/;"	f	file:
eepro100_get_class_by_name	eepro100.c	/^static E100PCIDeviceInfo *eepro100_get_class_by_name(const char *typename)$/;"	f	file:
eepro100_instance_init	eepro100.c	/^static void eepro100_instance_init(Object *obj)$/;"	f	file:
eepro100_interrupt	eepro100.c	/^static void eepro100_interrupt(EEPRO100State * s, uint8_t status)$/;"	f	file:
eepro100_mdi_default	eepro100.c	/^static const uint16_t eepro100_mdi_default[] = {$/;"	v	file:
eepro100_mdi_interrupt	eepro100.c	/^static void eepro100_mdi_interrupt(EEPRO100State * s)$/;"	f	file:
eepro100_mdi_mask	eepro100.c	/^static const uint16_t eepro100_mdi_mask[] = {$/;"	v	file:
eepro100_ops	eepro100.c	/^static const MemoryRegionOps eepro100_ops = {$/;"	v	file:
eepro100_read	eepro100.c	/^static uint64_t eepro100_read(void *opaque, hwaddr addr,$/;"	f	file:
eepro100_read1	eepro100.c	/^static uint8_t eepro100_read1(EEPRO100State * s, uint32_t addr)$/;"	f	file:
eepro100_read2	eepro100.c	/^static uint16_t eepro100_read2(EEPRO100State * s, uint32_t addr)$/;"	f	file:
eepro100_read4	eepro100.c	/^static uint32_t eepro100_read4(EEPRO100State * s, uint32_t addr)$/;"	f	file:
eepro100_read_eeprom	eepro100.c	/^static uint16_t eepro100_read_eeprom(EEPRO100State * s)$/;"	f	file:
eepro100_read_mdi	eepro100.c	/^static uint32_t eepro100_read_mdi(EEPRO100State * s)$/;"	f	file:
eepro100_read_port	eepro100.c	/^static uint32_t eepro100_read_port(EEPRO100State * s)$/;"	f	file:
eepro100_register_types	eepro100.c	/^static void eepro100_register_types(void)$/;"	f	file:
eepro100_rnr_interrupt	eepro100.c	/^static void eepro100_rnr_interrupt(EEPRO100State * s)$/;"	f	file:
eepro100_ru_command	eepro100.c	/^static void eepro100_ru_command(EEPRO100State * s, uint8_t val)$/;"	f	file:
eepro100_rx_t	eepro100.c	/^} eepro100_rx_t;$/;"	t	typeref:struct:__anon78	file:
eepro100_selftest_t	eepro100.c	/^} eepro100_selftest_t;$/;"	t	typeref:struct:__anon87	file:
eepro100_stats_t	eepro100.c	/^} eepro100_stats_t;$/;"	t	typeref:struct:__anon81	file:
eepro100_swi_interrupt	eepro100.c	/^static void eepro100_swi_interrupt(EEPRO100State * s)$/;"	f	file:
eepro100_tx_t	eepro100.c	/^} eepro100_tx_t;$/;"	t	typeref:struct:__anon77	file:
eepro100_write	eepro100.c	/^static void eepro100_write(void *opaque, hwaddr addr,$/;"	f	file:
eepro100_write1	eepro100.c	/^static void eepro100_write1(EEPRO100State * s, uint32_t addr, uint8_t val)$/;"	f	file:
eepro100_write2	eepro100.c	/^static void eepro100_write2(EEPRO100State * s, uint32_t addr, uint16_t val)$/;"	f	file:
eepro100_write4	eepro100.c	/^static void eepro100_write4(EEPRO100State * s, uint32_t addr, uint32_t val)$/;"	f	file:
eepro100_write_command	eepro100.c	/^static void eepro100_write_command(EEPRO100State * s, uint8_t val)$/;"	f	file:
eepro100_write_eeprom	eepro100.c	/^static void eepro100_write_eeprom(eeprom_t * eeprom, uint8_t val)$/;"	f	file:
eepro100_write_mdi	eepro100.c	/^static void eepro100_write_mdi(EEPRO100State *s)$/;"	f	file:
eepro100_write_port	eepro100.c	/^static void eepro100_write_port(EEPRO100State *s)$/;"	f	file:
eeprom	e1000e_core.h	/^    uint16_t eeprom[E1000E_EEPROM_SIZE];$/;"	m	struct:E1000Core
eeprom	eepro100.c	/^    eeprom_t *eeprom;$/;"	m	struct:__anon84	file:
eeprom	lan9118.c	/^    uint8_t eeprom[128];$/;"	m	struct:__anon123	file:
eeprom	rtl8139.c	/^    EEprom9346 eeprom;$/;"	m	struct:RTL8139State	file:
eeprom_data	e1000.c	/^    uint16_t eeprom_data[64];$/;"	m	struct:E1000State_st	file:
eeprom_id_bit	eepro100.c	/^} eeprom_id_bit;$/;"	t	typeref:enum:__anon86	file:
eeprom_writable	lan9118.c	/^    int32_t eeprom_writable;$/;"	m	struct:__anon123	file:
eesk	rtl8139.c	/^    uint8_t eesk;$/;"	m	struct:EEprom9346	file:
ehdr_buf	net_rx_pkt.c	/^    uint8_t ehdr_buf[sizeof(struct eth_header)];$/;"	m	struct:NetRxPkt	file:
eimr	mcf_fec.c	/^    uint32_t eimr;$/;"	m	struct:__anon36	file:
eir	mcf_fec.c	/^    uint32_t eir;$/;"	m	struct:__anon36	file:
eitr	e1000e_core.h	/^    E1000IntrDelayTimer eitr[E1000E_MSIX_VEC_NUM];$/;"	m	struct:E1000Core
eitr_guest_value	e1000e_core.h	/^    uint32_t eitr_guest_value[E1000E_MSIX_VEC_NUM];$/;"	m	struct:E1000Core
eitr_intr_pending	e1000e_core.h	/^    bool eitr_intr_pending[E1000E_MSIX_VEC_NUM];$/;"	m	struct:E1000Core
emmc	xilinx_axienet.c	/^    uint32_t emmc;$/;"	m	struct:XilinxAXIEnet	file:
emrbr	mcf_fec.c	/^    uint32_t emrbr;$/;"	m	struct:__anon36	file:
enable_interrupt	eepro100.c	/^static void enable_interrupt(EEPRO100State * s)$/;"	f	file:
enabled	e1000e_core.c	/^    bool enabled;$/;"	m	struct:E1000E_RSSInfo_st	file:
enabled	rocker/rocker_fp.c	/^    bool enabled;$/;"	m	struct:fp_port	file:
end	virtio-net.c	/^    size_t end;$/;"	m	struct:VirtIOFeature	file:
endof	virtio-net.c	43;"	d	file:
enet	xilinx_axienet.c	/^    struct XilinxAXIEnet *enet;$/;"	m	struct:XilinxAXIEnetStreamSlave	typeref:struct:XilinxAXIEnetStreamSlave::XilinxAXIEnet	file:
enet_match_addr	xilinx_axienet.c	/^static int enet_match_addr(const uint8_t *buf, uint32_t f0, uint32_t f1)$/;"	f	file:
enet_mem_ops	xgmac.c	/^static const MemoryRegionOps enet_mem_ops = {$/;"	v	file:
enet_ops	xilinx_axienet.c	/^static const MemoryRegionOps enet_ops = {$/;"	v	file:
enet_read	xgmac.c	/^static uint64_t enet_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
enet_read	xilinx_axienet.c	/^static uint64_t enet_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
enet_update_irq	xgmac.c	/^static void enet_update_irq(XgmacState *s)$/;"	f	file:
enet_update_irq	xilinx_axienet.c	/^static void enet_update_irq(XilinxAXIEnet *s)$/;"	f	file:
enet_write	xgmac.c	/^static void enet_write(void *opaque, hwaddr addr,$/;"	f	file:
enet_write	xilinx_axienet.c	/^static void enet_write(void *opaque, hwaddr addr,$/;"	f	file:
eop	vmxnet3.h	/^    u32        eop:1;        \/* End of Packet *\/$/;"	m	struct:Vmxnet3_RxCompDesc
eop	vmxnet3.h	/^    u32 eop:1;      \/* End Of Packet *\/$/;"	m	struct:Vmxnet3_TxDesc
ercv	smc91c111.c	/^    uint16_t ercv;$/;"	m	struct:__anon96	file:
erdsr	mcf_fec.c	/^    uint32_t erdsr;$/;"	m	struct:__anon36	file:
err	vmxnet3.h	/^    u32        err:1;        \/* Error *\/$/;"	m	struct:Vmxnet3_RxCompDesc
err_irq	fsl_etsec/etsec.h	/^    qemu_irq     err_irq;$/;"	m	struct:eTSEC
error	vmxnet3.h	/^    __le32        error;$/;"	m	struct:Vmxnet3_QueueStatus
errors	e1000_regs.h	/^    uint8_t errors;      \/* Descriptor Errors *\/$/;"	m	struct:e1000_rx_desc
etdsr	mcf_fec.c	/^    uint32_t etdsr;$/;"	m	struct:__anon36	file:
eth	rocker/rocker_of_dpa.c	/^    } eth;$/;"	m	struct:of_dpa_flow_key	typeref:struct:of_dpa_flow_key::__anon55	file:
eth_can_rx	xgmac.c	/^static int eth_can_rx(XgmacState *s)$/;"	f	file:
eth_can_rx	xilinx_axienet.c	/^static int eth_can_rx(XilinxAXIEnet *s)$/;"	f	file:
eth_can_rx	xilinx_ethlite.c	/^static int eth_can_rx(NetClientState *nc)$/;"	f	file:
eth_match_groupaddr	etraxfs_eth.c	/^static int eth_match_groupaddr(ETRAXFSEthState *eth, const unsigned char *sa)$/;"	f	file:
eth_ops	etraxfs_eth.c	/^static const MemoryRegionOps eth_ops = {$/;"	v	file:
eth_ops	xilinx_ethlite.c	/^static const MemoryRegionOps eth_ops = {$/;"	v	file:
eth_pulse_irq	xilinx_ethlite.c	/^static inline void eth_pulse_irq(struct xlx_ethlite *s)$/;"	f	file:
eth_read	etraxfs_eth.c	/^eth_read(void *opaque, hwaddr addr, unsigned int size)$/;"	f	file:
eth_read	xilinx_ethlite.c	/^eth_read(void *opaque, hwaddr addr, unsigned int size)$/;"	f	file:
eth_receive	etraxfs_eth.c	/^static ssize_t eth_receive(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
eth_rx	xgmac.c	/^static ssize_t eth_rx(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
eth_rx	xilinx_axienet.c	/^static ssize_t eth_rx(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
eth_rx	xilinx_ethlite.c	/^static ssize_t eth_rx(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
eth_set_link	etraxfs_eth.c	/^static void eth_set_link(NetClientState *nc)$/;"	f	file:
eth_tx_push	etraxfs_eth.c	/^static int eth_tx_push(void *opaque, unsigned char *buf, int len, bool eop)$/;"	f	file:
eth_update_ma	etraxfs_eth.c	/^static void eth_update_ma(ETRAXFSEthState *eth, int ma)$/;"	f	file:
eth_validate_duplex	etraxfs_eth.c	/^static void eth_validate_duplex(ETRAXFSEthState *eth)$/;"	f	file:
eth_write	etraxfs_eth.c	/^eth_write(void *opaque, hwaddr addr,$/;"	f	file:
eth_write	xilinx_ethlite.c	/^eth_write(void *opaque, hwaddr addr,$/;"	f	file:
ether_dhost	e1000.c	/^	unsigned char	ether_dhost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header	file:
ether_dhost	ne2000.c	/^	unsigned char	ether_dhost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header	file:
ether_dhost	pcnet.c	/^	unsigned char	ether_dhost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header	file:
ether_dhost	pcnet.c	/^    uint8_t ether_dhost[6];$/;"	m	struct:qemu_ether_header	file:
ether_dhost	rtl8139.c	/^	unsigned char	ether_dhost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header	file:
ether_header	e1000.c	/^struct ether_header {$/;"	s	file:
ether_header	ne2000.c	/^struct ether_header {$/;"	s	file:
ether_header	pcnet.c	/^struct ether_header {$/;"	s	file:
ether_header	rtl8139.c	/^struct ether_header {$/;"	s	file:
ether_shost	e1000.c	/^	unsigned char	ether_shost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header	file:
ether_shost	ne2000.c	/^	unsigned char	ether_shost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header	file:
ether_shost	pcnet.c	/^	unsigned char	ether_shost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header	file:
ether_shost	pcnet.c	/^    uint8_t ether_shost[6];$/;"	m	struct:qemu_ether_header	file:
ether_shost	rtl8139.c	/^	unsigned char	ether_shost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header	file:
ether_type	e1000.c	/^	unsigned short	ether_type;$/;"	m	struct:ether_header	file:
ether_type	ne2000.c	/^	unsigned short	ether_type;$/;"	m	struct:ether_header	file:
ether_type	pcnet.c	/^	unsigned short	ether_type;$/;"	m	struct:ether_header	file:
ether_type	pcnet.c	/^    uint16_t ether_type;$/;"	m	struct:qemu_ether_header	file:
ether_type	rtl8139.c	/^	unsigned short	ether_type;$/;"	m	struct:ether_header	file:
ethhdr	rocker/rocker_of_dpa.c	/^    struct eth_header *ethhdr;$/;"	m	struct:of_dpa_flow_pkt_fields	typeref:struct:of_dpa_flow_pkt_fields::eth_header	file:
ethhdr_rewrite	rocker/rocker_of_dpa.c	/^    struct eth_header ethhdr_rewrite;$/;"	m	struct:of_dpa_flow_context	typeref:struct:of_dpa_flow_context::eth_header	file:
etraxfs_eth_class_init	etraxfs_eth.c	/^static void etraxfs_eth_class_init(ObjectClass *klass, void *data)$/;"	f	file:
etraxfs_eth_info	etraxfs_eth.c	/^static const TypeInfo etraxfs_eth_info = {$/;"	v	file:
etraxfs_eth_properties	etraxfs_eth.c	/^static Property etraxfs_eth_properties[] = {$/;"	v	file:
etraxfs_eth_register_types	etraxfs_eth.c	/^static void etraxfs_eth_register_types(void)$/;"	f	file:
etsec_class_init	fsl_etsec/etsec.c	/^static void etsec_class_init(ObjectClass *klass, void *data)$/;"	f	file:
etsec_info	fsl_etsec/etsec.c	/^static TypeInfo etsec_info = {$/;"	v	file:
etsec_instance_init	fsl_etsec/etsec.c	/^static void etsec_instance_init(Object *obj)$/;"	f	file:
etsec_miim_link_status	fsl_etsec/miim.c	/^void etsec_miim_link_status(eTSEC *etsec, NetClientState *nc)$/;"	f
etsec_ops	fsl_etsec/etsec.c	/^static const MemoryRegionOps etsec_ops = {$/;"	v	file:
etsec_properties	fsl_etsec/etsec.c	/^static Property etsec_properties[] = {$/;"	v	file:
etsec_read	fsl_etsec/etsec.c	/^static uint64_t etsec_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
etsec_realize	fsl_etsec/etsec.c	/^static void etsec_realize(DeviceState *dev, Error **errp)$/;"	f	file:
etsec_receive	fsl_etsec/etsec.c	/^static ssize_t etsec_receive(NetClientState *nc,$/;"	f	file:
etsec_register_types	fsl_etsec/etsec.c	/^static void etsec_register_types(void)$/;"	f	file:
etsec_reset	fsl_etsec/etsec.c	/^static void etsec_reset(DeviceState *d)$/;"	f	file:
etsec_rx_ring_write	fsl_etsec/rings.c	/^ssize_t etsec_rx_ring_write(eTSEC *etsec, const uint8_t *buf, size_t size)$/;"	f
etsec_set_link_status	fsl_etsec/etsec.c	/^static void etsec_set_link_status(NetClientState *nc)$/;"	f	file:
etsec_timer_hit	fsl_etsec/etsec.c	/^static void etsec_timer_hit(void *opaque)$/;"	f	file:
etsec_walk_rx_ring	fsl_etsec/rings.c	/^void etsec_walk_rx_ring(eTSEC *etsec, int ring_nbr)$/;"	f
etsec_walk_tx_ring	fsl_etsec/rings.c	/^void etsec_walk_tx_ring(eTSEC *etsec, int ring_nbr)$/;"	f
etsec_write	fsl_etsec/etsec.c	/^static void etsec_write(void     *opaque,$/;"	f	file:
etsec_write_miim	fsl_etsec/miim.c	/^void etsec_write_miim(eTSEC          *etsec,$/;"	f
eventIntrIdx	vmxnet3.h	/^    u8        eventIntrIdx;$/;"	m	struct:Vmxnet3_IntrConf
event_int_idx	vmxnet3.c	/^        uint8_t event_int_idx;$/;"	m	struct:__anon101	file:
ext1	vmxnet3.h	/^    u32        ext1:20;$/;"	m	struct:Vmxnet3_TxCompDesc
ext1	vmxnet3.h	/^    u32        ext1:2;$/;"	m	struct:Vmxnet3_RxCompDesc
ext1	vmxnet3.h	/^    u32        ext1;$/;"	m	struct:Vmxnet3_RxDesc
ext1	vmxnet3.h	/^    u32 ext1:1;$/;"	m	struct:Vmxnet3_TxDesc
ext2	vmxnet3.h	/^    __le32        ext2;$/;"	m	struct:Vmxnet3_TxCompDesc
ext2	vmxnet3.h	/^    u32        ext2:1;$/;"	m	struct:Vmxnet3_RxCompDesc
ext2	vmxnet3.h	/^    u32 ext2:1;$/;"	m	struct:Vmxnet3_TxDesc
ext3	vmxnet3.h	/^    __le32        ext3;$/;"	m	struct:Vmxnet3_TxCompDesc
ext_mtable	xilinx_axienet.c	/^    uint32_t ext_mtable[1024];$/;"	m	struct:XilinxAXIEnet	file:
ext_stat	xgmac.c	/^    uint32_t ext_stat;$/;"	m	struct:desc	file:
ext_uaw	xilinx_axienet.c	/^    uint32_t ext_uaw[2];$/;"	m	struct:XilinxAXIEnet	file:
fc_rcv_pause	eepro100.c	/^    uint32_t fc_xmt_pause, fc_rcv_pause, fc_rcv_unsupported;$/;"	m	struct:__anon81	file:
fc_rcv_unsupported	eepro100.c	/^    uint32_t fc_xmt_pause, fc_rcv_pause, fc_rcv_unsupported;$/;"	m	struct:__anon81	file:
fc_xmt_pause	eepro100.c	/^    uint32_t fc_xmt_pause, fc_rcv_pause, fc_rcv_unsupported;$/;"	m	struct:__anon81	file:
fcs	vmxnet3.h	/^    u32        fcs:1;        \/* Frame CRC correct *\/$/;"	m	struct:Vmxnet3_RxCompDesc
feature_sizes	virtio-net.c	/^static VirtIOFeature feature_sizes[] = {$/;"	v	file:
ff_mac	rocker/rocker_of_dpa.c	/^static const MACAddr ff_mac =   { .a = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };$/;"	v	file:
fields	e1000_regs.h	/^        } fields;$/;"	m	union:e1000_context_desc::__anon24	typeref:struct:e1000_context_desc::__anon24::__anon25
fields	e1000_regs.h	/^        } fields;$/;"	m	union:e1000_data_desc::__anon28	typeref:struct:e1000_data_desc::__anon28::__anon29
fields	e1000_regs.h	/^        } fields;$/;"	m	union:e1000_tx_desc::__anon5	typeref:struct:e1000_tx_desc::__anon5::__anon6
fields	rocker/rocker_of_dpa.c	/^    OfDpaFlowPktFields fields;$/;"	m	struct:of_dpa_flow_context	file:
fifo8_pop_word	allwinner_emac.c	/^static uint32_t fifo8_pop_word(Fifo8 *fifo)$/;"	f	file:
fifo8_push_word	allwinner_emac.c	/^static void fifo8_push_word(Fifo8 *fifo, uint32_t val)$/;"	f	file:
fifo_int	lan9118.c	/^    uint32_t fifo_int;$/;"	m	struct:__anon123	file:
fifo_used	lan9118.c	/^    int32_t fifo_used;$/;"	m	struct:__anon122	file:
fill_rx_bd	fsl_etsec/rings.c	/^static void fill_rx_bd(eTSEC          *etsec,$/;"	f	file:
filters	vmxnet3.h	/^    struct Vmxnet3_PM_PktFilter filters[VMXNET3_PM_MAX_FILTERS];$/;"	m	struct:Vmxnet3_PMConf	typeref:struct:Vmxnet3_PMConf::Vmxnet3_PM_PktFilter
first_bd	fsl_etsec/etsec.h	/^    eTSEC_rxtx_bd  first_bd;$/;"	m	struct:eTSEC
flags	e1000_regs.h	/^        } flags;$/;"	m	union:e1000_data_desc::__anon26	typeref:struct:e1000_data_desc::__anon26::__anon27
flags	e1000_regs.h	/^        } flags;$/;"	m	union:e1000_tx_desc::__anon3	typeref:struct:e1000_tx_desc::__anon3::__anon4
flags	fsl_etsec/etsec.h	/^    uint16_t flags;$/;"	m	struct:eTSEC_rxtx_bd
flags	mcf_fec.c	/^    uint16_t flags;$/;"	m	struct:__anon37	file:
flags	rocker/rocker_of_dpa.c	/^                    __be16 flags;    \/* TCP flags *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon58::__anon60::__anon61	file:
flags	rocker/rocker_of_dpa.c	/^                __be16 flags;        \/* TCP flags *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon63::__anon65	file:
flags	virtio-net.c	/^    uint32_t flags;$/;"	m	struct:VirtIOFeature	file:
flash	e1000e.c	/^    MemoryRegion flash;$/;"	m	struct:E1000EState	file:
flash_bar	eepro100.c	/^    MemoryRegion flash_bar;$/;"	m	struct:__anon84	file:
flash_eerd_read	e1000.c	/^flash_eerd_read(E1000State *s, int x)$/;"	f	file:
flow_tbl	rocker/rocker_of_dpa.c	/^    GHashTable *flow_tbl;$/;"	m	struct:of_dpa	file:
flow_tbl_max_size	rocker/rocker_of_dpa.c	/^    unsigned int flow_tbl_max_size;$/;"	m	struct:of_dpa	file:
fmi	xilinx_axienet.c	/^    uint32_t fmi;$/;"	m	struct:XilinxAXIEnet	file:
fp_port	rocker/rocker.c	/^    FpPort *fp_port[ROCKER_FP_PORTS_MAX];$/;"	m	struct:rocker	file:
fp_port	rocker/rocker_fp.c	/^struct fp_port {$/;"	s	file:
fp_port_alloc	rocker/rocker_fp.c	/^FpPort *fp_port_alloc(Rocker *r, char *sw_name,$/;"	f
fp_port_check_world	rocker/rocker_fp.c	/^bool fp_port_check_world(FpPort *port, World *world)$/;"	f
fp_port_cleanup	rocker/rocker_fp.c	/^static void fp_port_cleanup(NetClientState *nc)$/;"	f	file:
fp_port_disable	rocker/rocker_fp.c	/^void fp_port_disable(FpPort *port)$/;"	f
fp_port_eg	rocker/rocker_fp.c	/^int fp_port_eg(FpPort *port, const struct iovec *iov, int iovcnt)$/;"	f
fp_port_enable	rocker/rocker_fp.c	/^void fp_port_enable(FpPort *port)$/;"	f
fp_port_enabled	rocker/rocker_fp.c	/^bool fp_port_enabled(FpPort *port)$/;"	f
fp_port_free	rocker/rocker_fp.c	/^void fp_port_free(FpPort *port)$/;"	f
fp_port_from_pport	rocker/rocker_fp.c	/^bool fp_port_from_pport(uint32_t pport, uint32_t *port)$/;"	f
fp_port_get_info	rocker/rocker_fp.c	/^void fp_port_get_info(FpPort *port, RockerPortList *info)$/;"	f
fp_port_get_learning	rocker/rocker_fp.c	/^uint8_t fp_port_get_learning(FpPort *port)$/;"	f
fp_port_get_link_up	rocker/rocker_fp.c	/^bool fp_port_get_link_up(FpPort *port)$/;"	f
fp_port_get_macaddr	rocker/rocker_fp.c	/^void fp_port_get_macaddr(FpPort *port, MACAddr *macaddr)$/;"	f
fp_port_get_name	rocker/rocker_fp.c	/^char *fp_port_get_name(FpPort *port)$/;"	f
fp_port_get_settings	rocker/rocker_fp.c	/^int fp_port_get_settings(FpPort *port, uint32_t *speed,$/;"	f
fp_port_get_world	rocker/rocker_fp.c	/^World *fp_port_get_world(FpPort *port)$/;"	f
fp_port_info	rocker/rocker_fp.c	/^static NetClientInfo fp_port_info = {$/;"	v	file:
fp_port_receive	rocker/rocker_fp.c	/^static ssize_t fp_port_receive(NetClientState *nc, const uint8_t *buf,$/;"	f	file:
fp_port_receive_iov	rocker/rocker_fp.c	/^static ssize_t fp_port_receive_iov(NetClientState *nc, const struct iovec *iov,$/;"	f	file:
fp_port_reset	rocker/rocker_fp.c	/^void fp_port_reset(FpPort *port)$/;"	f
fp_port_set_learning	rocker/rocker_fp.c	/^void fp_port_set_learning(FpPort *port, uint8_t learning)$/;"	f
fp_port_set_link	rocker/rocker_fp.c	/^static void fp_port_set_link(FpPort *port, bool up)$/;"	f	file:
fp_port_set_link_status	rocker/rocker_fp.c	/^static void fp_port_set_link_status(NetClientState *nc)$/;"	f	file:
fp_port_set_macaddr	rocker/rocker_fp.c	/^void fp_port_set_macaddr(FpPort *port, MACAddr *macaddr)$/;"	f
fp_port_set_settings	rocker/rocker_fp.c	/^int fp_port_set_settings(FpPort *port, uint32_t speed,$/;"	f
fp_port_set_world	rocker/rocker_fp.c	/^void fp_port_set_world(FpPort *port, World *world)$/;"	f
fp_ports	rocker/rocker.c	/^    uint32_t fp_ports;           \/* front-panel port count *\/$/;"	m	struct:rocker	file:
fp_ports_peers	rocker/rocker.c	/^    NICPeers *fp_ports_peers;$/;"	m	struct:rocker	file:
fp_start_macaddr	rocker/rocker.c	/^    MACAddr fp_start_macaddr;    \/* front-panel port 0 mac addr *\/$/;"	m	struct:rocker	file:
frag	rocker/rocker_of_dpa.c	/^        uint8_t frag;                \/* one of FRAG_TYPE_* *\/$/;"	m	struct:of_dpa_flow_key::__anon56	file:
free_timer_start	lan9118.c	/^    uint32_t free_timer_start;$/;"	m	struct:__anon123	file:
frg	vmxnet3.h	/^    u32        frg:1;        \/* IP Fragment *\/$/;"	m	struct:Vmxnet3_RxCompDesc
fs_eth_init	etraxfs_eth.c	/^static int fs_eth_init(SysBusDevice *sbd)$/;"	f	file:
gem_can_receive	cadence_gem.c	/^static int gem_can_receive(NetClientState *nc)$/;"	f	file:
gem_class_init	cadence_gem.c	/^static void gem_class_init(ObjectClass *klass, void *data)$/;"	f	file:
gem_get_rx_desc	cadence_gem.c	/^static void gem_get_rx_desc(CadenceGEMState *s, int q)$/;"	f	file:
gem_info	cadence_gem.c	/^static const TypeInfo gem_info = {$/;"	v	file:
gem_init	cadence_gem.c	/^static void gem_init(Object *obj)$/;"	f	file:
gem_init_register_masks	cadence_gem.c	/^static void gem_init_register_masks(CadenceGEMState *s)$/;"	f	file:
gem_mac_address_filter	cadence_gem.c	/^static int gem_mac_address_filter(CadenceGEMState *s, const uint8_t *packet)$/;"	f	file:
gem_ops	cadence_gem.c	/^static const MemoryRegionOps gem_ops = {$/;"	v	file:
gem_phy_read	cadence_gem.c	/^static uint16_t gem_phy_read(CadenceGEMState *s, unsigned reg_num)$/;"	f	file:
gem_phy_reset	cadence_gem.c	/^static void gem_phy_reset(CadenceGEMState *s)$/;"	f	file:
gem_phy_write	cadence_gem.c	/^static void gem_phy_write(CadenceGEMState *s, unsigned reg_num, uint16_t val)$/;"	f	file:
gem_properties	cadence_gem.c	/^static Property gem_properties[] = {$/;"	v	file:
gem_read	cadence_gem.c	/^static uint64_t gem_read(void *opaque, hwaddr offset, unsigned size)$/;"	f	file:
gem_realize	cadence_gem.c	/^static void gem_realize(DeviceState *dev, Error **errp)$/;"	f	file:
gem_receive	cadence_gem.c	/^static ssize_t gem_receive(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
gem_receive_updatestats	cadence_gem.c	/^static void gem_receive_updatestats(CadenceGEMState *s, const uint8_t *packet,$/;"	f	file:
gem_register_types	cadence_gem.c	/^static void gem_register_types(void)$/;"	f	file:
gem_reset	cadence_gem.c	/^static void gem_reset(DeviceState *d)$/;"	f	file:
gem_set_link	cadence_gem.c	/^static void gem_set_link(NetClientState *nc)$/;"	f	file:
gem_transmit	cadence_gem.c	/^static void gem_transmit(CadenceGEMState *s)$/;"	f	file:
gem_transmit_updatestats	cadence_gem.c	/^static void gem_transmit_updatestats(CadenceGEMState *s, const uint8_t *packet,$/;"	f	file:
gem_update_int_status	cadence_gem.c	/^static void gem_update_int_status(CadenceGEMState *s)$/;"	f	file:
gem_write	cadence_gem.c	/^static void gem_write(void *opaque, hwaddr offset, uint64_t val,$/;"	f	file:
gen	vmxnet3.c	/^    uint8_t gen;$/;"	m	struct:__anon97	file:
gen	vmxnet3.h	/^    u32        gen:1;        \/* Generation bit *\/$/;"	m	struct:Vmxnet3_RxDesc
gen	vmxnet3.h	/^    u32        gen:1;        \/* generation bit *\/$/;"	m	struct:Vmxnet3_RxCompDesc
gen	vmxnet3.h	/^    u32        gen:1;        \/* generation bit *\/$/;"	m	struct:Vmxnet3_TxCompDesc
gen	vmxnet3.h	/^    u32 gen:1;      \/* generation bit *\/$/;"	m	struct:Vmxnet3_TxDesc
get_bit	cadence_gem.c	/^static unsigned get_bit(const uint8_t *mac, unsigned bit)$/;"	f	file:
get_cu_state	eepro100.c	/^static cu_state_t get_cu_state(EEPRO100State * s)$/;"	f	file:
get_eecd	e1000.c	/^get_eecd(E1000State *s, int index)$/;"	f	file:
get_queue_from_screen	cadence_gem.c	/^static int get_queue_from_screen(CadenceGEMState *s, uint8_t *rxbuf_ptr,$/;"	f	file:
get_ru_state	eepro100.c	/^static ru_state_t get_ru_state(EEPRO100State * s)$/;"	f	file:
get_vhost_net	vhost_net.c	/^VHostNetState *get_vhost_net(NetClientState *nc)$/;"	f
get_vlan_table	virtio-net.c	/^static intList *get_vlan_table(VirtIONet *n)$/;"	f	file:
getreg	e1000.c	1193;"	d	file:
gos	vmxnet3.h	/^    struct Vmxnet3_GOSInfo        gos;$/;"	m	struct:Vmxnet3_DriverInfo	typeref:struct:Vmxnet3_DriverInfo::Vmxnet3_GOSInfo
gosBits	vmxnet3.h	/^    u32        gosBits:2;    \/* 32-bit or 64-bit? *\/$/;"	m	struct:Vmxnet3_GOSInfo
gosMisc	vmxnet3.h	/^    u32        gosMisc:10;    \/* other info about gos *\/$/;"	m	struct:Vmxnet3_GOSInfo
gosType	vmxnet3.h	/^    u32        gosType:4;     \/* which guest *\/$/;"	m	struct:Vmxnet3_GOSInfo
gosVer	vmxnet3.h	/^    u32        gosVer:16;     \/* gos version *\/$/;"	m	struct:Vmxnet3_GOSInfo
goto_tbl	rocker/rocker_of_dpa.c	/^    uint32_t goto_tbl;$/;"	m	struct:of_dpa_flow_action	file:
gpio_cfg	lan9118.c	/^    uint32_t gpio_cfg;$/;"	m	struct:__anon123	file:
gpr	smc91c111.c	/^    uint16_t gpr;$/;"	m	struct:__anon96	file:
gpt_cfg	lan9118.c	/^    uint32_t gpt_cfg;$/;"	m	struct:__anon123	file:
group_count	rocker/rocker_of_dpa.c	/^            uint16_t group_count;$/;"	m	struct:of_dpa_group::__anon70::__anon73	file:
group_id	rocker/rocker_of_dpa.c	/^            uint32_t group_id;$/;"	m	struct:of_dpa_group::__anon70::__anon72	file:
group_id	rocker/rocker_of_dpa.c	/^            uint32_t group_id;$/;"	m	struct:of_dpa_group::__anon70::__anon74	file:
group_id	rocker/rocker_of_dpa.c	/^        uint32_t group_id;$/;"	m	struct:of_dpa_flow_action::__anon67	file:
group_ids	rocker/rocker_of_dpa.c	/^            uint32_t *group_ids;$/;"	m	struct:of_dpa_group::__anon70::__anon73	file:
group_tbl	rocker/rocker_of_dpa.c	/^    GHashTable *group_tbl;$/;"	m	struct:of_dpa	file:
group_tbl_max_size	rocker/rocker_of_dpa.c	/^    unsigned int group_tbl_max_size;$/;"	m	struct:of_dpa	file:
h_add_logical_lan_buffer	spapr_llan.c	/^static target_ulong h_add_logical_lan_buffer(PowerPCCPU *cpu,$/;"	f	file:
h_change_logical_lan_mac	spapr_llan.c	/^static target_ulong h_change_logical_lan_mac(PowerPCCPU *cpu,$/;"	f	file:
h_free_logical_lan	spapr_llan.c	/^static target_ulong h_free_logical_lan(PowerPCCPU *cpu,$/;"	f	file:
h_multicast_ctrl	spapr_llan.c	/^static target_ulong h_multicast_ctrl(PowerPCCPU *cpu, sPAPRMachineState *spapr,$/;"	f	file:
h_proto	rocker/rocker_of_dpa.c	/^    __be16 *h_proto;$/;"	m	struct:of_dpa_flow_pkt_fields	file:
h_register_logical_lan	spapr_llan.c	/^static target_ulong h_register_logical_lan(PowerPCCPU *cpu,$/;"	f	file:
h_send_logical_lan	spapr_llan.c	/^static target_ulong h_send_logical_lan(PowerPCCPU *cpu,$/;"	f	file:
hardtime	rocker/rocker_of_dpa.c	/^    uint32_t hardtime;$/;"	m	struct:of_dpa_flow	file:
has_extended_tcb_support	eepro100.c	/^    bool has_extended_tcb_support;$/;"	m	struct:__anon75	file:
has_extended_tcb_support	eepro100.c	/^    bool has_extended_tcb_support;$/;"	m	struct:__anon84	file:
has_virt_hdr	net_rx_pkt.c	/^    bool has_virt_hdr;$/;"	m	struct:NetRxPkt	file:
has_virt_hdr	net_tx_pkt.c	/^    bool has_virt_hdr;$/;"	m	struct:NetTxPkt	file:
has_vnet	e1000e_core.h	/^    bool has_vnet;$/;"	m	struct:E1000Core
hash	e1000e_core.c	/^    uint32_t hash;$/;"	m	struct:E1000E_RSSInfo_st	file:
hashFunc	vmxnet3.h	/^    u16            hashFunc;$/;"	m	struct:UPT1_RSSConf
hashKey	vmxnet3.h	/^    u8            hashKey[UPT1_RSS_MAX_KEY_SIZE];$/;"	m	struct:UPT1_RSSConf
hashKeySize	vmxnet3.h	/^    u16            hashKeySize;$/;"	m	struct:UPT1_RSSConf
hashType	vmxnet3.h	/^    u16            hashType;$/;"	m	struct:UPT1_RSSConf
have_autoneg	e1000.c	/^have_autoneg(E1000State *s)$/;"	f	file:
hdr	xilinx_axienet.c	/^    uint32_t hdr[CONTROL_PAYLOAD_WORDS];$/;"	m	struct:XilinxAXIEnet	file:
hdr_len	e1000_regs.h	/^            uint8_t hdr_len;    \/* Header length *\/$/;"	m	struct:e1000_context_desc::__anon24::__anon25
hdr_len	e1000x_common.h	/^    uint8_t hdr_len;$/;"	m	struct:e1000x_txd_props
hdr_len	net_tx_pkt.c	/^    uint16_t hdr_len;$/;"	m	struct:NetTxPkt	file:
head	rocker/rocker_desc.c	/^    uint32_t head;$/;"	m	struct:desc_ring	file:
header	e1000.c	/^        unsigned char header[256];$/;"	m	struct:E1000State_st::e1000_tx	file:
header_status	e1000_regs.h	/^            uint16_t header_status;$/;"	m	struct:e1000_rx_desc_packet_split::__anon14::__anon19
hi_dword	e1000_regs.h	/^            } hi_dword;$/;"	m	struct:e1000_rx_desc_extended::__anon8::__anon9	typeref:union:e1000_rx_desc_extended::__anon8::__anon9::__anon10
hi_dword	e1000_regs.h	/^            } hi_dword;$/;"	m	struct:e1000_rx_desc_packet_split::__anon14::__anon15	typeref:union:e1000_rx_desc_packet_split::__anon14::__anon15::__anon16
hit	rocker/rocker_of_dpa.c	/^    void (*hit)(OfDpaFlowContext *fc, OfDpaFlow *flow);$/;"	m	struct:of_dpa_flow_tbl_ops	file:
hit_no_goto	rocker/rocker_of_dpa.c	/^    void (*hit_no_goto)(OfDpaFlowContext *fc);$/;"	m	struct:of_dpa_flow_tbl_ops	file:
hits	rocker/rocker_of_dpa.c	/^        uint64_t hits;$/;"	m	struct:of_dpa_flow::__anon69	file:
hlen	vmxnet3.h	/^    u32 hlen:10;    \/* header len *\/$/;"	m	struct:Vmxnet3_TxDesc
hw_cfg	lan9118.c	/^    uint32_t hw_cfg;$/;"	m	struct:__anon123	file:
i	e1000e_core.c	/^    const E1000E_RingInfo *i;$/;"	m	struct:E1000E_RxRing_st	file:
i	e1000e_core.c	/^    const E1000E_RingInfo *i;$/;"	m	struct:E1000E_TxRing_st	file:
i82550	eepro100.c	88;"	d	file:
i82551	eepro100.c	89;"	d	file:
i82557A	eepro100.c	90;"	d	file:
i82557B	eepro100.c	91;"	d	file:
i82557C	eepro100.c	92;"	d	file:
i82558A	eepro100.c	93;"	d	file:
i82558B	eepro100.c	94;"	d	file:
i82559A	eepro100.c	95;"	d	file:
i82559B	eepro100.c	96;"	d	file:
i82559C	eepro100.c	97;"	d	file:
i82559ER	eepro100.c	98;"	d	file:
i82562	eepro100.c	99;"	d	file:
i82801	eepro100.c	100;"	d	file:
id	rocker/rocker_of_dpa.c	/^    uint32_t id;$/;"	m	struct:of_dpa_group	file:
idletime	rocker/rocker_of_dpa.c	/^    uint32_t idletime;$/;"	m	struct:of_dpa_flow	file:
idx	e1000e_core.c	/^    int idx;$/;"	m	struct:E1000E_RingInfo_st	file:
ievent_set	fsl_etsec/rings.c	/^static void ievent_set(eTSEC    *etsec,$/;"	f	file:
ig	rocker/rocker_world.h	/^    world_ig *ig;$/;"	m	struct:world_ops
ih_dst	pcnet.c	/^	struct	in_addr ih_dst;		\/* destination internet address *\/$/;"	m	struct:ipovly	typeref:struct:ipovly::in_addr	file:
ih_len	pcnet.c	/^	u_short	ih_len;			\/* protocol length *\/$/;"	m	struct:ipovly	file:
ih_next	pcnet.c	/^	caddr_t	ih_next;$/;"	m	struct:ipovly	file:
ih_pr	pcnet.c	/^	u_char	ih_pr;			\/* protocol *\/$/;"	m	struct:ipovly	file:
ih_prev	pcnet.c	/^	caddr_t ih_prev;		\/* for protocol sequence q's *\/$/;"	m	struct:ipovly	file:
ih_src	pcnet.c	/^	struct	in_addr ih_src;		\/* source internet address *\/$/;"	m	struct:ipovly	typeref:struct:ipovly::in_addr	file:
ih_x1	pcnet.c	/^	u_char	ih_x1;			\/* (unused) *\/$/;"	m	struct:ipovly	file:
im	stellaris_enet.c	/^    uint32_t im;$/;"	m	struct:__anon125	file:
imr	ne2000.h	/^    uint8_t imr;$/;"	m	struct:NE2000State
imx_default_read	imx_fec.c	/^static uint32_t imx_default_read(IMXFECState *s, uint32_t index)$/;"	f	file:
imx_default_reg_name	imx_fec.c	/^static const char *imx_default_reg_name(IMXFECState *s, uint32_t index)$/;"	f	file:
imx_default_write	imx_fec.c	/^static void imx_default_write(IMXFECState *s, uint32_t index, uint32_t value)$/;"	f	file:
imx_enet_do_tx	imx_fec.c	/^static void imx_enet_do_tx(IMXFECState *s)$/;"	f	file:
imx_enet_info	imx_fec.c	/^static const TypeInfo imx_enet_info = {$/;"	v	file:
imx_enet_init	imx_fec.c	/^static void imx_enet_init(Object *obj)$/;"	f	file:
imx_enet_read	imx_fec.c	/^static uint32_t imx_enet_read(IMXFECState *s, uint32_t index)$/;"	f	file:
imx_enet_read_bd	imx_fec.c	/^static void imx_enet_read_bd(IMXENETBufDesc *bd, dma_addr_t addr)$/;"	f	file:
imx_enet_receive	imx_fec.c	/^static ssize_t imx_enet_receive(NetClientState *nc, const uint8_t *buf,$/;"	f	file:
imx_enet_reg_name	imx_fec.c	/^static const char *imx_enet_reg_name(IMXFECState *s, uint32_t index)$/;"	f	file:
imx_enet_write	imx_fec.c	/^static void imx_enet_write(IMXFECState *s, uint32_t index, uint32_t value)$/;"	f	file:
imx_enet_write_bd	imx_fec.c	/^static void imx_enet_write_bd(IMXENETBufDesc *bd, dma_addr_t addr)$/;"	f	file:
imx_eth_can_receive	imx_fec.c	/^static int imx_eth_can_receive(NetClientState *nc)$/;"	f	file:
imx_eth_class_init	imx_fec.c	/^static void imx_eth_class_init(ObjectClass *klass, void *data)$/;"	f	file:
imx_eth_cleanup	imx_fec.c	/^static void imx_eth_cleanup(NetClientState *nc)$/;"	f	file:
imx_eth_do_tx	imx_fec.c	/^static void imx_eth_do_tx(IMXFECState *s)$/;"	f	file:
imx_eth_enable_rx	imx_fec.c	/^static void imx_eth_enable_rx(IMXFECState *s)$/;"	f	file:
imx_eth_net_info	imx_fec.c	/^static NetClientInfo imx_eth_net_info = {$/;"	v	file:
imx_eth_ops	imx_fec.c	/^static const MemoryRegionOps imx_eth_ops = {$/;"	v	file:
imx_eth_properties	imx_fec.c	/^static Property imx_eth_properties[] = {$/;"	v	file:
imx_eth_read	imx_fec.c	/^static uint64_t imx_eth_read(void *opaque, hwaddr offset, unsigned size)$/;"	f	file:
imx_eth_realize	imx_fec.c	/^static void imx_eth_realize(DeviceState *dev, Error **errp)$/;"	f	file:
imx_eth_receive	imx_fec.c	/^static ssize_t imx_eth_receive(NetClientState *nc, const uint8_t *buf,$/;"	f	file:
imx_eth_reg_name	imx_fec.c	/^static const char *imx_eth_reg_name(IMXFECState *s, uint32_t index)$/;"	f	file:
imx_eth_register_types	imx_fec.c	/^static void imx_eth_register_types(void)$/;"	f	file:
imx_eth_reset	imx_fec.c	/^static void imx_eth_reset(DeviceState *d)$/;"	f	file:
imx_eth_set_link	imx_fec.c	/^static void imx_eth_set_link(NetClientState *nc)$/;"	f	file:
imx_eth_update	imx_fec.c	/^static void imx_eth_update(IMXFECState *s)$/;"	f	file:
imx_eth_write	imx_fec.c	/^static void imx_eth_write(void *opaque, hwaddr offset, uint64_t value,$/;"	f	file:
imx_fec_do_tx	imx_fec.c	/^static void imx_fec_do_tx(IMXFECState *s)$/;"	f	file:
imx_fec_info	imx_fec.c	/^static const TypeInfo imx_fec_info = {$/;"	v	file:
imx_fec_init	imx_fec.c	/^static void imx_fec_init(Object *obj)$/;"	f	file:
imx_fec_read	imx_fec.c	/^static uint32_t imx_fec_read(IMXFECState *s, uint32_t index)$/;"	f	file:
imx_fec_read_bd	imx_fec.c	/^static void imx_fec_read_bd(IMXFECBufDesc *bd, dma_addr_t addr)$/;"	f	file:
imx_fec_receive	imx_fec.c	/^static ssize_t imx_fec_receive(NetClientState *nc, const uint8_t *buf,$/;"	f	file:
imx_fec_reg_name	imx_fec.c	/^static const char *imx_fec_reg_name(IMXFECState *s, uint32_t index)$/;"	f	file:
imx_fec_write	imx_fec.c	/^static void imx_fec_write(IMXFECState *s, uint32_t index, uint32_t value)$/;"	f	file:
imx_fec_write_bd	imx_fec.c	/^static void imx_fec_write_bd(IMXFECBufDesc *bd, dma_addr_t addr)$/;"	f	file:
in_pport	rocker/rocker_of_dpa.c	/^    uint32_t in_pport;               \/* ingress port *\/$/;"	m	struct:of_dpa_flow_key	file:
in_pport	rocker/rocker_of_dpa.c	/^    uint32_t in_pport;$/;"	m	struct:of_dpa_flow_context	file:
inc_tx_bcast_or_mcast_count	e1000.c	/^inc_tx_bcast_or_mcast_count(E1000State *s, const unsigned char *arr)$/;"	f	file:
indTable	vmxnet3.h	/^    u8            indTable[UPT1_RSS_MAX_IND_TABLE_SIZE];$/;"	m	struct:UPT1_RSSConf
indTableSize	vmxnet3.h	/^    u16            indTableSize;$/;"	m	struct:UPT1_RSSConf
index	rocker/rocker_desc.c	/^    int index;$/;"	m	struct:desc_ring	file:
index	rocker/rocker_fp.c	/^    unsigned int index;$/;"	m	struct:fp_port	file:
info	rocker/rocker_desc.c	/^    DescInfo *info;$/;"	m	struct:desc_ring	file:
init	rocker/rocker_world.h	/^    world_init *init;$/;"	m	struct:world_ops
input	rtl8139.c	/^    uint16_t input;$/;"	m	struct:EEprom9346	file:
install_time	rocker/rocker_of_dpa.c	/^        int64_t install_time;$/;"	m	struct:of_dpa_flow::__anon69	file:
int_en	lan9118.c	/^    uint32_t int_en;$/;"	m	struct:__anon123	file:
int_level	smc91c111.c	/^    uint8_t int_level;$/;"	m	struct:__anon96	file:
int_mask	smc91c111.c	/^    uint8_t int_mask;$/;"	m	struct:__anon96	file:
int_stat	eepro100.c	/^    uint8_t int_stat;           \/* PCI interrupt status *\/$/;"	m	struct:__anon84	file:
int_state_info	vmxnet3.c	/^static const VMStateInfo int_state_info = {$/;"	v	file:
int_sts	lan9118.c	/^    uint32_t int_sts;$/;"	m	struct:__anon123	file:
intctl	mipsnet.c	/^    uint32_t intctl;$/;"	m	struct:MIPSnetState	file:
interrupt_states	vmxnet3.c	/^        Vmxnet3IntState interrupt_states[VMXNET3_MAX_INTRS];$/;"	m	struct:__anon101	file:
intrConf	vmxnet3.h	/^    struct Vmxnet3_IntrConf            intrConf;$/;"	m	struct:Vmxnet3_DSDevRead	typeref:struct:Vmxnet3_DSDevRead::Vmxnet3_IntrConf
intrCtrl	vmxnet3.h	/^    __le32        intrCtrl;$/;"	m	struct:Vmxnet3_IntrConf
intrIdx	vmxnet3.h	/^    u8        intrIdx;$/;"	m	struct:Vmxnet3_RxQueueConf
intrIdx	vmxnet3.h	/^    u8        intrIdx;$/;"	m	struct:Vmxnet3_TxQueueConf
intr_idx	vmxnet3.c	/^    uint8_t intr_idx;$/;"	m	struct:__anon98	file:
intr_idx	vmxnet3.c	/^    uint8_t intr_idx;$/;"	m	struct:__anon99	file:
io	e1000.c	/^    MemoryRegion io;$/;"	m	struct:E1000State_st	file:
io	e1000e.c	/^    MemoryRegion io;$/;"	m	struct:E1000EState	file:
io	mipsnet.c	/^    MemoryRegion io;$/;"	m	struct:MIPSnetState	file:
io	ne2000.h	/^    MemoryRegion io;$/;"	m	struct:NE2000State
io_area	fsl_etsec/etsec.h	/^    MemoryRegion  io_area;$/;"	m	struct:eTSEC
io_bar	eepro100.c	/^    MemoryRegion io_bar;$/;"	m	struct:__anon84	file:
io_bar	pcnet-pci.c	/^    MemoryRegion io_bar;$/;"	m	struct:__anon121	file:
io_ops	e1000e.c	/^static const MemoryRegionOps io_ops = {$/;"	v	file:
ioaddr	e1000e.c	/^    uint32_t ioaddr;$/;"	m	struct:E1000EState	file:
iobase	ne2000-isa.c	/^    uint32_t iobase;$/;"	m	struct:ISANE2000State	file:
iomem	mcf_fec.c	/^    MemoryRegion iomem;$/;"	m	struct:__anon36	file:
iomem	xgmac.c	/^    MemoryRegion iomem;$/;"	m	struct:XgmacState	file:
iomem	xilinx_axienet.c	/^    MemoryRegion iomem;$/;"	m	struct:XilinxAXIEnet	file:
iov	rocker/rocker_of_dpa.c	/^    struct iovec *iov;$/;"	m	struct:of_dpa_flow_context	typeref:struct:of_dpa_flow_context::iovec	file:
iovcnt	rocker/rocker_of_dpa.c	/^    int iovcnt;$/;"	m	struct:of_dpa_flow_context	file:
ip	e1000.c	/^struct __attribute__((__packed__)) ip {$/;"	s	file:
ip	e1000x_common.h	/^    int8_t ip;$/;"	m	struct:e1000x_txd_props
ip	ne2000.c	/^struct __attribute__((__packed__)) ip {$/;"	s	file:
ip	pcnet.c	/^struct __attribute__((__packed__)) ip {$/;"	s	file:
ip	rocker/rocker_of_dpa.c	/^    } ip;$/;"	m	struct:of_dpa_flow_key	typeref:struct:of_dpa_flow_key::__anon56	file:
ip	rtl8139.c	/^struct __attribute__((__packed__)) ip {$/;"	s	file:
ip4hdr_info	net_rx_pkt.c	/^    eth_ip4_hdr_info ip4hdr_info;$/;"	m	struct:NetRxPkt	file:
ip6hdr_info	net_rx_pkt.c	/^    eth_ip6_hdr_info ip6hdr_info;$/;"	m	struct:NetRxPkt	file:
ip_checksum	rtl8139.c	/^static uint16_t ip_checksum(void *data, size_t len)$/;"	f	file:
ip_config	e1000_regs.h	/^        uint32_t ip_config;$/;"	m	union:e1000_context_desc::__anon20
ip_dst	e1000.c	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::	file:
ip_dst	ne2000.c	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::	file:
ip_dst	pcnet.c	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::	file:
ip_dst	rtl8139.c	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::	file:
ip_fields	e1000_regs.h	/^        } ip_fields;$/;"	m	union:e1000_context_desc::__anon20	typeref:struct:e1000_context_desc::__anon20::__anon21
ip_id	e1000.c	/^	u_short	ip_id;			\/* identification *\/$/;"	m	struct:ip	file:
ip_id	e1000_regs.h	/^                    uint16_t ip_id;    \/* IP id *\/$/;"	m	struct:e1000_rx_desc_packet_split::__anon14::__anon15::__anon16::__anon17
ip_id	e1000_regs.h	/^                    uint16_t ip_id; \/* IP id *\/$/;"	m	struct:e1000_rx_desc_extended::__anon8::__anon9::__anon10::__anon11
ip_id	ne2000.c	/^	u_short	ip_id;			\/* identification *\/$/;"	m	struct:ip	file:
ip_id	pcnet.c	/^	u_short	ip_id;			\/* identification *\/$/;"	m	struct:ip	file:
ip_id	rtl8139.c	/^	u_short	ip_id;			\/* identification *\/$/;"	m	struct:ip	file:
ip_len	e1000.c	/^	u_short	ip_len;			\/* total length *\/$/;"	m	struct:ip	file:
ip_len	ne2000.c	/^	u_short	ip_len;			\/* total length *\/$/;"	m	struct:ip	file:
ip_len	pcnet.c	/^	u_short	ip_len;			\/* total length *\/$/;"	m	struct:ip	file:
ip_len	rtl8139.c	/^	u_short	ip_len;			\/* total length *\/$/;"	m	struct:ip	file:
ip_off	e1000.c	/^	u_short	ip_off;			\/* fragment offset field *\/$/;"	m	struct:ip	file:
ip_off	ne2000.c	/^	u_short	ip_off;			\/* fragment offset field *\/$/;"	m	struct:ip	file:
ip_off	pcnet.c	/^	u_short	ip_off;			\/* fragment offset field *\/$/;"	m	struct:ip	file:
ip_off	rtl8139.c	/^	u_short	ip_off;			\/* fragment offset field *\/$/;"	m	struct:ip	file:
ip_p	e1000.c	/^	u_char	ip_p;			\/* protocol *\/$/;"	m	struct:ip	file:
ip_p	ne2000.c	/^	u_char	ip_p;			\/* protocol *\/$/;"	m	struct:ip	file:
ip_p	pcnet.c	/^	u_char	ip_p;			\/* protocol *\/$/;"	m	struct:ip	file:
ip_p	rtl8139.c	/^	u_char	ip_p;			\/* protocol *\/$/;"	m	struct:ip	file:
ip_src	e1000.c	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::in_addr	file:
ip_src	ne2000.c	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::in_addr	file:
ip_src	pcnet.c	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::in_addr	file:
ip_src	rtl8139.c	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::in_addr	file:
ip_sum	e1000.c	/^	u_short	ip_sum;			\/* checksum *\/$/;"	m	struct:ip	file:
ip_sum	ne2000.c	/^	u_short	ip_sum;			\/* checksum *\/$/;"	m	struct:ip	file:
ip_sum	pcnet.c	/^	u_short	ip_sum;			\/* checksum *\/$/;"	m	struct:ip	file:
ip_sum	rtl8139.c	/^	u_short	ip_sum;			\/* checksum *\/$/;"	m	struct:ip	file:
ip_tos	e1000.c	/^	u_char	ip_tos;			\/* type of service *\/$/;"	m	struct:ip	file:
ip_tos	ne2000.c	/^	u_char	ip_tos;			\/* type of service *\/$/;"	m	struct:ip	file:
ip_tos	pcnet.c	/^	u_char	ip_tos;			\/* type of service *\/$/;"	m	struct:ip	file:
ip_tos	rtl8139.c	/^	u_char	ip_tos;			\/* type of service *\/$/;"	m	struct:ip	file:
ip_ttl	e1000.c	/^	u_char	ip_ttl;			\/* time to live *\/$/;"	m	struct:ip	file:
ip_ttl	ne2000.c	/^	u_char	ip_ttl;			\/* time to live *\/$/;"	m	struct:ip	file:
ip_ttl	pcnet.c	/^	u_char	ip_ttl;			\/* time to live *\/$/;"	m	struct:ip	file:
ip_ttl	rtl8139.c	/^	u_char	ip_ttl;			\/* time to live *\/$/;"	m	struct:ip	file:
ip_vhl	e1000.c	/^	u_char	ip_vhl;		\/* header length *\/ \/* version *\/$/;"	m	struct:ip	file:
ip_vhl	ne2000.c	/^	u_char	ip_vhl;		\/* header length *\/ \/* version *\/$/;"	m	struct:ip	file:
ip_vhl	pcnet.c	/^	u_char	ip_vhl;		\/* header length *\/ \/* version *\/$/;"	m	struct:ip	file:
ip_vhl	rtl8139.c	/^	u_char	ip_vhl;		\/* header length *\/ \/* version *\/$/;"	m	struct:ip	file:
ipc	vmxnet3.h	/^    u32        ipc:1;        \/* IP Checksum Correct *\/$/;"	m	struct:Vmxnet3_RxCompDesc
ipcse	e1000_regs.h	/^            uint16_t ipcse;     \/* IP checksum end *\/$/;"	m	struct:e1000_context_desc::__anon20::__anon21
ipcse	e1000x_common.h	/^    uint16_t ipcse;$/;"	m	struct:e1000x_txd_props
ipcso	e1000_regs.h	/^            uint8_t ipcso;      \/* IP checksum offset *\/$/;"	m	struct:e1000_context_desc::__anon20::__anon21
ipcso	e1000x_common.h	/^    uint8_t ipcso;$/;"	m	struct:e1000x_txd_props
ipcss	e1000_regs.h	/^            uint8_t ipcss;      \/* IP checksum start *\/$/;"	m	struct:e1000_context_desc::__anon20::__anon21
ipcss	e1000x_common.h	/^    uint8_t ipcss;$/;"	m	struct:e1000x_txd_props
ipovly	pcnet.c	/^struct __attribute__((__packed__)) ipovly {$/;"	s	file:
ipv4	rocker/rocker_of_dpa.c	/^        } ipv4;$/;"	m	union:of_dpa_flow_key::__anon57	typeref:struct:of_dpa_flow_key::__anon57::__anon58	file:
ipv4_addr_is_multicast	rocker/rocker.h	/^static inline bool ipv4_addr_is_multicast(__be32 addr)$/;"	f
ipv4hdr	rocker/rocker_of_dpa.c	/^    struct ip_header *ipv4hdr;$/;"	m	struct:of_dpa_flow_pkt_fields	typeref:struct:of_dpa_flow_pkt_fields::ip_header	file:
ipv6	rocker/rocker_of_dpa.c	/^        } ipv6;$/;"	m	union:of_dpa_flow_key::__anon57	typeref:struct:of_dpa_flow_key::__anon57::__anon63	file:
ipv6_addr	rocker/rocker.h	/^typedef struct ipv6_addr {$/;"	s
ipv6_addr_is_multicast	rocker/rocker.h	/^static inline bool ipv6_addr_is_multicast(const Ipv6Addr *addr)$/;"	f
ipv6_dst_addr	rocker/rocker_of_dpa.c	/^    Ipv6Addr *ipv6_dst_addr;$/;"	m	struct:of_dpa_flow_pkt_fields	file:
ipv6_src_addr	rocker/rocker_of_dpa.c	/^    Ipv6Addr *ipv6_src_addr;$/;"	m	struct:of_dpa_flow_pkt_fields	file:
ipv6hdr	rocker/rocker_of_dpa.c	/^    struct ip6_header *ipv6hdr;$/;"	m	struct:of_dpa_flow_pkt_fields	typeref:struct:of_dpa_flow_pkt_fields::ip6_header	file:
irq	dp8393x.c	/^    qemu_irq irq;$/;"	m	struct:dp8393xState	file:
irq	lan9118.c	/^    qemu_irq irq;$/;"	m	struct:__anon123	file:
irq	mcf_fec.c	/^    qemu_irq *irq;$/;"	m	struct:__anon36	file:
irq	mipsnet.c	/^    qemu_irq irq;$/;"	m	struct:MIPSnetState	file:
irq	ne2000.h	/^    qemu_irq irq;$/;"	m	struct:NE2000State
irq	opencores_eth.c	/^    qemu_irq irq;$/;"	m	struct:OpenEthState	file:
irq	pcnet.h	/^    qemu_irq irq;$/;"	m	struct:PCNetState_st
irq	smc91c111.c	/^    qemu_irq irq;$/;"	m	struct:__anon96	file:
irq	stellaris_enet.c	/^    qemu_irq irq;$/;"	m	struct:__anon125	file:
irq	xilinx_axienet.c	/^    qemu_irq irq;$/;"	m	struct:XilinxAXIEnet	file:
irq	xilinx_ethlite.c	/^    qemu_irq irq;$/;"	m	struct:xlx_ethlite	file:
irq_cfg	lan9118.c	/^    uint32_t irq_cfg;$/;"	m	struct:__anon123	file:
irq_level	dp8393x.c	/^    int irq_level;$/;"	m	struct:dp8393xState	file:
irq_state	mcf_fec.c	/^    uint32_t irq_state;$/;"	m	struct:__anon36	file:
is_asserted	vmxnet3.c	/^    bool is_asserted;$/;"	m	struct:__anon100	file:
is_loopback	net_tx_pkt.c	/^    bool is_loopback;$/;"	m	struct:NetTxPkt	file:
is_masked	vmxnet3.c	/^    bool is_masked;$/;"	m	struct:__anon100	file:
is_pending	vmxnet3.c	/^    bool is_pending;$/;"	m	struct:__anon100	file:
is_version_1	e1000.c	/^static bool is_version_1(void *opaque, int version_id)$/;"	f	file:
is_version_2	pcnet.c	/^static bool is_version_2(void *opaque, int version_id)$/;"	f	file:
isa_ne2000_class_initfn	ne2000-isa.c	/^static void isa_ne2000_class_initfn(ObjectClass *klass, void *data)$/;"	f	file:
isa_ne2000_get_bootindex	ne2000-isa.c	/^static void isa_ne2000_get_bootindex(Object *obj, Visitor *v,$/;"	f	file:
isa_ne2000_instance_init	ne2000-isa.c	/^static void isa_ne2000_instance_init(Object *obj)$/;"	f	file:
isa_ne2000_realizefn	ne2000-isa.c	/^static void isa_ne2000_realizefn(DeviceState *dev, Error **errp)$/;"	f	file:
isa_ne2000_set_bootindex	ne2000-isa.c	/^static void isa_ne2000_set_bootindex(Object *obj, Visitor *v,$/;"	f	file:
isairq	ne2000-isa.c	/^    uint32_t isairq;$/;"	m	struct:ISANE2000State	file:
isip4	net_rx_pkt.c	/^    bool isip4;$/;"	m	struct:NetRxPkt	file:
isip6	net_rx_pkt.c	/^    bool isip6;$/;"	m	struct:NetRxPkt	file:
isopen	spapr_llan.c	/^    bool isopen;$/;"	m	struct:VIOsPAPRVLANDevice	file:
isr	ne2000.h	/^    uint8_t isr;$/;"	m	struct:NE2000State
isr	pcnet.h	/^    int rap, isr, lnkst;$/;"	m	struct:PCNetState_st
istcp	net_rx_pkt.c	/^    bool istcp;$/;"	m	struct:NetRxPkt	file:
isudp	net_rx_pkt.c	/^    bool isudp;$/;"	m	struct:NetRxPkt	file:
it_shift	dp8393x.c	/^    uint8_t it_shift;$/;"	m	struct:dp8393xState	file:
itr	e1000e_core.h	/^    E1000IntrDelayTimer itr;$/;"	m	struct:E1000Core
itr_guest_value	e1000e_core.h	/^    uint32_t itr_guest_value;$/;"	m	struct:E1000Core
itr_intr_pending	e1000e_core.h	/^    bool itr_intr_pending;$/;"	m	struct:E1000Core
kernel_feature_bits	vhost_net.c	/^static const int kernel_feature_bits[] = {$/;"	v	file:
key	rocker/rocker_of_dpa.c	/^    OfDpaFlowKey key;$/;"	m	struct:of_dpa_flow	file:
l2_flood	rocker/rocker_of_dpa.c	/^        } l2_flood;$/;"	m	union:of_dpa_group::__anon70	typeref:struct:of_dpa_group::__anon70::__anon73	file:
l2_hdr	net_tx_pkt.c	/^    uint8_t l2_hdr[ETH_MAX_L2_HDR_LEN];$/;"	m	struct:NetTxPkt	file:
l2_interface	rocker/rocker_of_dpa.c	/^        } l2_interface;$/;"	m	union:of_dpa_group::__anon70	typeref:struct:of_dpa_group::__anon70::__anon71	file:
l2_rewrite	rocker/rocker_of_dpa.c	/^        } l2_rewrite;$/;"	m	union:of_dpa_group::__anon70	typeref:struct:of_dpa_group::__anon70::__anon72	file:
l3_hdr	net_tx_pkt.c	/^    uint8_t l3_hdr[ETH_MAX_IP_DGRAM_LEN];$/;"	m	struct:NetTxPkt	file:
l3_unicast	rocker/rocker_of_dpa.c	/^        } l3_unicast;$/;"	m	union:of_dpa_group::__anon70	typeref:struct:of_dpa_group::__anon70::__anon74	file:
l3hdr_off	net_rx_pkt.c	/^    size_t l3hdr_off;$/;"	m	struct:NetRxPkt	file:
l4hdr_info	net_rx_pkt.c	/^    eth_l4_hdr_info  l4hdr_info;$/;"	m	struct:NetRxPkt	file:
l4hdr_off	net_rx_pkt.c	/^    size_t l4hdr_off;$/;"	m	struct:NetRxPkt	file:
l4proto	net_tx_pkt.c	/^    uint8_t l4proto;$/;"	m	struct:NetTxPkt	file:
l5hdr_off	net_rx_pkt.c	/^    size_t l5hdr_off;$/;"	m	struct:NetRxPkt	file:
label	rocker/rocker_of_dpa.c	/^            __be32 label;            \/* IPv6 flow label *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon63	file:
ladr_match	pcnet.c	/^static inline int ladr_match(PCNetState *s, const uint8_t *buf, int size)$/;"	f	file:
ladrf	pcnet.c	/^    uint16_t ladrf[4];$/;"	m	struct:pcnet_initblk16	file:
ladrf	pcnet.c	/^    uint16_t ladrf[4];$/;"	m	struct:pcnet_initblk32	file:
lan9118_16bit_mem_ops	lan9118.c	/^static const MemoryRegionOps lan9118_16bit_mem_ops = {$/;"	v	file:
lan9118_16bit_mode_read	lan9118.c	/^static uint64_t lan9118_16bit_mode_read(void *opaque, hwaddr offset,$/;"	f	file:
lan9118_16bit_mode_write	lan9118.c	/^static void lan9118_16bit_mode_write(void *opaque, hwaddr offset,$/;"	f	file:
lan9118_class_init	lan9118.c	/^static void lan9118_class_init(ObjectClass *klass, void *data)$/;"	f	file:
lan9118_eeprom_cmd	lan9118.c	/^static void lan9118_eeprom_cmd(lan9118_state *s, int cmd, int addr)$/;"	f	file:
lan9118_filter	lan9118.c	/^static int lan9118_filter(lan9118_state *s, const uint8_t *addr)$/;"	f	file:
lan9118_info	lan9118.c	/^static const TypeInfo lan9118_info = {$/;"	v	file:
lan9118_init	lan9118.c	/^void lan9118_init(NICInfo *nd, uint32_t base, qemu_irq irq)$/;"	f
lan9118_init1	lan9118.c	/^static int lan9118_init1(SysBusDevice *sbd)$/;"	f	file:
lan9118_mac_changed	lan9118.c	/^static void lan9118_mac_changed(lan9118_state *s)$/;"	f	file:
lan9118_mem_ops	lan9118.c	/^static const MemoryRegionOps lan9118_mem_ops = {$/;"	v	file:
lan9118_properties	lan9118.c	/^static Property lan9118_properties[] = {$/;"	v	file:
lan9118_readl	lan9118.c	/^static uint64_t lan9118_readl(void *opaque, hwaddr offset,$/;"	f	file:
lan9118_readw	lan9118.c	/^static uint32_t lan9118_readw(void *opaque, hwaddr offset)$/;"	f	file:
lan9118_receive	lan9118.c	/^static ssize_t lan9118_receive(NetClientState *nc, const uint8_t *buf,$/;"	f	file:
lan9118_register_types	lan9118.c	/^static void lan9118_register_types(void)$/;"	f	file:
lan9118_reload_eeprom	lan9118.c	/^static void lan9118_reload_eeprom(lan9118_state *s)$/;"	f	file:
lan9118_reset	lan9118.c	/^static void lan9118_reset(DeviceState *d)$/;"	f	file:
lan9118_set_link	lan9118.c	/^static void lan9118_set_link(NetClientState *nc)$/;"	f	file:
lan9118_state	lan9118.c	/^} lan9118_state;$/;"	t	typeref:struct:__anon123	file:
lan9118_tick	lan9118.c	/^static void lan9118_tick(void *opaque)$/;"	f	file:
lan9118_update	lan9118.c	/^static void lan9118_update(lan9118_state *s)$/;"	f	file:
lan9118_writel	lan9118.c	/^static void lan9118_writel(void *opaque, hwaddr offset,$/;"	f	file:
lan9118_writew	lan9118.c	/^static void lan9118_writew(void *opaque, hwaddr offset,$/;"	f	file:
lance_class_init	lance.c	/^static void lance_class_init(ObjectClass *klass, void *data)$/;"	f	file:
lance_info	lance.c	/^static const TypeInfo lance_info = {$/;"	v	file:
lance_init	lance.c	/^static int lance_init(SysBusDevice *sbd)$/;"	f	file:
lance_instance_init	lance.c	/^static void lance_instance_init(Object *obj)$/;"	f	file:
lance_mem_ops	lance.c	/^static const MemoryRegionOps lance_mem_ops = {$/;"	v	file:
lance_mem_read	lance.c	/^static uint64_t lance_mem_read(void *opaque, hwaddr addr,$/;"	f	file:
lance_mem_write	lance.c	/^static void lance_mem_write(void *opaque, hwaddr addr,$/;"	f	file:
lance_properties	lance.c	/^static Property lance_properties[] = {$/;"	v	file:
lance_register_types	lance.c	/^static void lance_register_types(void)$/;"	f	file:
lance_reset	lance.c	/^static void lance_reset(DeviceState *dev)$/;"	f	file:
last_clk	milkymist-minimac2.c	/^    int last_clk;$/;"	m	struct:MilkymistMinimac2MdioState	file:
last_command	vmxnet3.c	/^        uint32_t last_command;$/;"	m	struct:__anon101	file:
learning	rocker/rocker_fp.c	/^    uint8_t learning;$/;"	m	struct:fp_port	file:
len	lan9118.c	/^    int32_t len;$/;"	m	struct:__anon122	file:
len	rocker/rocker_hw.h	/^    __le16 len;$/;"	m	struct:rocker_tlv
len	stellaris_enet.c	/^    uint32_t len;$/;"	m	struct:__anon124	file:
len	vmxnet3.h	/^    u32        len:14;       \/* data length *\/$/;"	m	struct:Vmxnet3_RxCompDesc
len	vmxnet3.h	/^    u32        len:14;$/;"	m	struct:Vmxnet3_RxDesc
len	vmxnet3.h	/^    u32 len:14;$/;"	m	struct:Vmxnet3_TxDesc
len_flags	opencores_eth.c	/^    uint32_t len_flags;$/;"	m	struct:desc	file:
length	e1000_regs.h	/^            uint16_t length;    \/* Data buffer length *\/$/;"	m	struct:e1000_data_desc::__anon26::__anon27
length	e1000_regs.h	/^            uint16_t length;    \/* Data buffer length *\/$/;"	m	struct:e1000_tx_desc::__anon3::__anon4
length	e1000_regs.h	/^            uint16_t length;$/;"	m	struct:e1000_rx_desc_extended::__anon8::__anon12
length	e1000_regs.h	/^            uint16_t length[PS_PAGE_BUFFERS];$/;"	m	struct:e1000_rx_desc_packet_split::__anon14::__anon19
length	e1000_regs.h	/^    uint16_t length;     \/* Length of data DMAed into data buffer *\/$/;"	m	struct:e1000_rx_desc
length	fsl_etsec/etsec.h	/^    uint16_t length;$/;"	m	struct:eTSEC_rxtx_bd
length	mcf_fec.c	/^    uint16_t length;$/;"	m	struct:__anon37	file:
length	pcnet.c	/^    int16_t length;$/;"	m	struct:pcnet_TMD	file:
length0	e1000_regs.h	/^            uint16_t length0;      \/* length of buffer 0 *\/$/;"	m	struct:e1000_rx_desc_packet_split::__anon14::__anon18
link	eepro100.c	/^    uint32_t link;              \/* struct RxFD * *\/$/;"	m	struct:__anon78	file:
link	eepro100.c	/^    uint32_t link;              \/* void * *\/$/;"	m	struct:__anon77	file:
link	etraxfs_eth.c	/^    int link;$/;"	m	struct:qemu_phy	file:
link	xilinx_axienet.c	/^    int link;$/;"	m	struct:PHY	file:
link_ok	opencores_eth.c	/^    bool link_ok;$/;"	m	struct:Mii	file:
link_status_and_speed	vmxnet3.c	/^        uint32_t link_status_and_speed;$/;"	m	struct:__anon101	file:
list	rocker/rocker_of_dpa.c	/^    RockerOfDpaFlowList *list;$/;"	m	struct:of_dpa_flow_fill_context	file:
list	rocker/rocker_of_dpa.c	/^    RockerOfDpaGroupList *list;$/;"	m	struct:of_dpa_group_fill_context	file:
lnc_mchash	pcnet.c	/^static inline uint32_t lnc_mchash(const uint8_t *ether_addr)$/;"	f	file:
lnkst	pcnet.h	/^    int rap, isr, lnkst;$/;"	m	struct:PCNetState_st
logout	eepro100.c	69;"	d	file:
logout	eepro100.c	71;"	d	file:
loopback_packet	dp8393x.c	/^    int loopback_packet;$/;"	m	struct:dp8393xState	file:
looptest	pcnet.h	/^    int looptest;$/;"	m	struct:PCNetState_st
lower	e1000_regs.h	/^        } lower;$/;"	m	struct:e1000_rx_desc_extended::__anon8	typeref:struct:e1000_rx_desc_extended::__anon8::__anon9
lower	e1000_regs.h	/^        } lower;$/;"	m	struct:e1000_rx_desc_packet_split::__anon14	typeref:struct:e1000_rx_desc_packet_split::__anon14::__anon15
lower	e1000_regs.h	/^    } lower;$/;"	m	struct:e1000_data_desc	typeref:union:e1000_data_desc::__anon26
lower	e1000_regs.h	/^    } lower;$/;"	m	struct:e1000_tx_desc	typeref:union:e1000_tx_desc::__anon3
lower32	rocker/rocker.c	/^    uint64_t lower32;            \/* lower 32-bit val in 2-part 64-bit access *\/$/;"	m	struct:rocker	file:
lower_setup	e1000_regs.h	/^    } lower_setup;$/;"	m	struct:e1000_context_desc	typeref:union:e1000_context_desc::__anon20
lpm	rocker/rocker_of_dpa.c	/^    uint32_t lpm;$/;"	m	struct:of_dpa_flow	file:
lro_supported	vmxnet3.c	/^        bool lro_supported;$/;"	m	struct:__anon101	file:
mac	e1000e_core.h	/^    uint32_t mac[E1000E_MAC_SIZE];$/;"	m	struct:E1000Core
mac	xen_nic.c	/^    char                  *mac;$/;"	m	struct:XenNetDev	file:
mac_cmd	lan9118.c	/^    uint32_t mac_cmd;$/;"	m	struct:__anon123	file:
mac_cr	lan9118.c	/^    uint32_t mac_cr;$/;"	m	struct:__anon123	file:
mac_data	lan9118.c	/^    uint32_t mac_data;$/;"	m	struct:__anon123	file:
mac_flow	lan9118.c	/^    uint32_t mac_flow;$/;"	m	struct:__anon123	file:
mac_hashh	lan9118.c	/^    uint32_t mac_hashh;$/;"	m	struct:__anon123	file:
mac_hashl	lan9118.c	/^    uint32_t mac_hashl;$/;"	m	struct:__anon123	file:
mac_icr_read	e1000.c	/^mac_icr_read(E1000State *s, int index)$/;"	f	file:
mac_low11_read	e1000.c	/^mac_low11_read(E1000State *s, int index)$/;"	f	file:
mac_low13_read	e1000.c	/^mac_low13_read(E1000State *s, int index)$/;"	f	file:
mac_low16_read	e1000.c	/^mac_low16_read(E1000State *s, int index)$/;"	f	file:
mac_low4_read	e1000.c	/^mac_low4_read(E1000State *s, int index)$/;"	f	file:
mac_mii_acc	lan9118.c	/^    uint32_t mac_mii_acc;$/;"	m	struct:__anon123	file:
mac_mii_data	lan9118.c	/^    uint32_t mac_mii_data;$/;"	m	struct:__anon123	file:
mac_read_clr4	e1000.c	/^mac_read_clr4(E1000State *s, int index)$/;"	f	file:
mac_read_clr8	e1000.c	/^mac_read_clr8(E1000State *s, int index)$/;"	f	file:
mac_readreg	e1000.c	/^mac_readreg(E1000State *s, int index)$/;"	f	file:
mac_reg	e1000.c	/^    uint32_t mac_reg[0x8000];$/;"	m	struct:E1000State_st	file:
mac_reg_access	e1000.c	/^static const uint8_t mac_reg_access[0x8000] = {$/;"	v	file:
mac_reg_access	e1000e_core.c	/^static const uint16_t mac_reg_access[E1000E_MAC_SIZE] = {$/;"	v	file:
mac_reg_init	e1000.c	/^static const uint32_t mac_reg_init[] = {$/;"	v	file:
mac_writereg	e1000.c	/^mac_writereg(E1000State *s, int index, uint32_t val)$/;"	f	file:
macaddr	etraxfs_eth.c	/^    uint8_t macaddr[2][6];$/;"	m	struct:ETRAXFSEthState	file:
macreg_readops	e1000.c	/^static uint32_t (*macreg_readops[])(E1000State *, int) = {$/;"	v	file:
macreg_writeops	e1000.c	/^static void (*macreg_writeops[])(E1000State *, int, uint32_t) = {$/;"	v	file:
maddr	xilinx_axienet.c	/^    uint32_t maddr[4][2];$/;"	m	struct:XilinxAXIEnet	file:
magic	vmxnet3.h	/^    __le32              magic;$/;"	m	struct:Vmxnet3_DriverShared
markflag	e1000.c	1280;"	d	file:
mask	rocker/rocker_of_dpa.c	/^    OfDpaFlowKey mask;$/;"	m	struct:of_dpa_flow	file:
mask	vmxnet3.h	/^    u8        mask[VMXNET3_PM_MAX_MASK_SIZE];$/;"	m	struct:Vmxnet3_PM_PktFilter
maskSize	vmxnet3.h	/^    u8        maskSize;$/;"	m	struct:Vmxnet3_PM_PktFilter
maxNumRxSG	vmxnet3.h	/^    __le16        maxNumRxSG;$/;"	m	struct:Vmxnet3_MiscConf
max_payload_frags	net_tx_pkt.c	/^    uint32_t max_payload_frags;$/;"	m	struct:NetTxPkt	file:
max_queue_num	e1000e_core.h	/^    int max_queue_num;$/;"	m	struct:E1000Core
max_raw_frags	net_tx_pkt.c	/^    uint32_t max_raw_frags;$/;"	m	struct:NetTxPkt	file:
max_rx_frags	vmxnet3.c	/^        uint16_t max_rx_frags;$/;"	m	struct:__anon101	file:
max_tx_frags	vmxnet3.c	/^        uint32_t max_tx_frags;$/;"	m	struct:__anon101	file:
mc	xilinx_axienet.c	/^            uint32_t mc;$/;"	m	struct:XilinxAXIEnet::__anon133::__anon134	file:
mcastBytesRxOK	vmxnet3.h	/^    u64            mcastBytesRxOK;$/;"	m	struct:UPT1_RxStats
mcastBytesTxOK	vmxnet3.h	/^    u64            mcastBytesTxOK;$/;"	m	struct:UPT1_TxStats
mcastPktsRxOK	vmxnet3.h	/^    u64            mcastPktsRxOK;$/;"	m	struct:UPT1_RxStats
mcastPktsTxOK	vmxnet3.h	/^    u64            mcastPktsTxOK;$/;"	m	struct:UPT1_TxStats
mcast_list	vmxnet3.c	/^        MACAddr *mcast_list;$/;"	m	struct:__anon101	file:
mcast_list_buff_size	vmxnet3.c	/^        uint32_t mcast_list_buff_size; \/* needed for live migration. *\/$/;"	m	struct:__anon101	file:
mcast_list_len	vmxnet3.c	/^        uint32_t mcast_list_len;$/;"	m	struct:__anon101	file:
mcf_fec_bd	mcf_fec.c	/^} mcf_fec_bd;$/;"	t	typeref:struct:__anon37	file:
mcf_fec_do_tx	mcf_fec.c	/^static void mcf_fec_do_tx(mcf_fec_state *s)$/;"	f	file:
mcf_fec_enable_rx	mcf_fec.c	/^static void mcf_fec_enable_rx(mcf_fec_state *s)$/;"	f	file:
mcf_fec_have_receive_space	mcf_fec.c	/^static int mcf_fec_have_receive_space(mcf_fec_state *s, size_t want)$/;"	f	file:
mcf_fec_init	mcf_fec.c	/^void mcf_fec_init(MemoryRegion *sysmem, NICInfo *nd,$/;"	f
mcf_fec_irq_map	mcf_fec.c	/^static const uint32_t mcf_fec_irq_map[FEC_NUM_IRQ] = {$/;"	v	file:
mcf_fec_ops	mcf_fec.c	/^static const MemoryRegionOps mcf_fec_ops = {$/;"	v	file:
mcf_fec_read	mcf_fec.c	/^static uint64_t mcf_fec_read(void *opaque, hwaddr addr,$/;"	f	file:
mcf_fec_read_bd	mcf_fec.c	/^static void mcf_fec_read_bd(mcf_fec_bd *bd, uint32_t addr)$/;"	f	file:
mcf_fec_read_mdio	mcf_fec.c	/^static uint64_t mcf_fec_read_mdio(mcf_fec_state *s)$/;"	f	file:
mcf_fec_receive	mcf_fec.c	/^static ssize_t mcf_fec_receive(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
mcf_fec_reset	mcf_fec.c	/^static void mcf_fec_reset(mcf_fec_state *s)$/;"	f	file:
mcf_fec_state	mcf_fec.c	/^} mcf_fec_state;$/;"	t	typeref:struct:__anon36	file:
mcf_fec_update	mcf_fec.c	/^static void mcf_fec_update(mcf_fec_state *s)$/;"	f	file:
mcf_fec_write	mcf_fec.c	/^static void mcf_fec_write(void *opaque, hwaddr addr,$/;"	f	file:
mcf_fec_write_bd	mcf_fec.c	/^static void mcf_fec_write_bd(mcf_fec_bd *bd, uint32_t addr)$/;"	f	file:
mci_irq	xgmac.c	/^    qemu_irq mci_irq;$/;"	m	struct:XgmacState	file:
mcr	xilinx_axienet.c	/^            uint32_t mcr;$/;"	m	struct:XilinxAXIEnet::__anon133::__anon134	file:
mctl	stellaris_enet.c	/^    uint32_t mctl;$/;"	m	struct:__anon125	file:
mdc	etraxfs_eth.c	/^    int mdc;$/;"	m	struct:qemu_mdio	file:
mdc	xilinx_axienet.c	/^    int mdc;$/;"	m	struct:MDIOBus	file:
mdi_op_name	eepro100.c	/^static const char * const mdi_op_name[] = {$/;"	v	file:
mdi_reg_name	eepro100.c	/^static const char * const mdi_reg_name[] = {$/;"	v	file:
mdimem	eepro100.c	/^    uint16_t mdimem[32];$/;"	m	struct:__anon84	file:
mdio	etraxfs_eth.c	/^    int mdio;$/;"	m	struct:qemu_mdio	file:
mdio	milkymist-minimac2.c	/^    MilkymistMinimac2MdioState mdio;$/;"	m	struct:MilkymistMinimac2State	file:
mdio	xilinx_axienet.c	/^    int mdio;$/;"	m	struct:MDIOBus	file:
mdio_attach	etraxfs_eth.c	/^mdio_attach(struct qemu_mdio *bus, struct qemu_phy *phy, unsigned int addr)$/;"	f	file:
mdio_attach	xilinx_axienet.c	/^mdio_attach(struct MDIOBus *bus, struct PHY *phy, unsigned int addr)$/;"	f	file:
mdio_bus	etraxfs_eth.c	/^    struct qemu_mdio mdio_bus;$/;"	m	struct:ETRAXFSEthState	typeref:struct:ETRAXFSEthState::qemu_mdio	file:
mdio_bus	xilinx_axienet.c	/^    struct MDIOBus mdio_bus;$/;"	m	struct:TEMAC	typeref:struct:TEMAC::MDIOBus	file:
mdio_cycle	etraxfs_eth.c	/^static void mdio_cycle(struct qemu_mdio *bus)$/;"	f	file:
mdio_detach	etraxfs_eth.c	/^mdio_detach(struct qemu_mdio *bus, struct qemu_phy *phy, unsigned int addr)$/;"	f	file:
mdio_detach	xilinx_axienet.c	/^mdio_detach(struct MDIOBus *bus, struct PHY *phy, unsigned int addr)$/;"	f	file:
mdio_read_req	etraxfs_eth.c	/^static void mdio_read_req(struct qemu_mdio *bus)$/;"	f	file:
mdio_read_req	xilinx_axienet.c	/^static uint16_t mdio_read_req(struct MDIOBus *bus, unsigned int addr,$/;"	f	file:
mdio_state	milkymist-minimac2.c	/^enum mdio_state {$/;"	g	file:
mdio_write_req	etraxfs_eth.c	/^static void mdio_write_req(struct qemu_mdio *bus)$/;"	f	file:
mdio_write_req	xilinx_axienet.c	/^static void mdio_write_req(struct MDIOBus *bus, unsigned int addr,$/;"	f	file:
mdv	stellaris_enet.c	/^    uint32_t mdv;$/;"	m	struct:__anon125	file:
mem	eepro100.c	/^    uint8_t mem[PCI_MEM_SIZE] __attribute__((aligned(8)));$/;"	m	struct:__anon84	file:
mem	ne2000.h	/^    uint8_t mem[NE2000_MEM_SIZE];$/;"	m	struct:NE2000State
mfTableLen	vmxnet3.h	/^    __le16        mfTableLen;   \/* size of the multicast filter table *\/$/;"	m	struct:Vmxnet3_RxFilterConf
mfTablePA	vmxnet3.h	/^    __le64        mfTablePA;    \/* PA of the multicast filters table *\/$/;"	m	struct:Vmxnet3_RxFilterConf
middle	e1000_regs.h	/^        } middle;$/;"	m	struct:e1000_rx_desc_packet_split::__anon14	typeref:struct:e1000_rx_desc_packet_split::__anon14::__anon18
mii	opencores_eth.c	/^    Mii mii;$/;"	m	struct:OpenEthState	file:
mii	xilinx_axienet.c	/^    } mii;$/;"	m	struct:XilinxAXIEnet	typeref:union:XilinxAXIEnet::__anon133	file:
mii_read_host	opencores_eth.c	/^static uint16_t mii_read_host(Mii *s, unsigned idx)$/;"	f	file:
mii_reset	allwinner_emac.c	/^static void mii_reset(RTL8201CPState *mii, bool link_ok)$/;"	f	file:
mii_reset	opencores_eth.c	/^static void mii_reset(Mii *s)$/;"	f	file:
mii_ro	opencores_eth.c	/^static void mii_ro(Mii *s, uint16_t v)$/;"	f	file:
mii_set_link	allwinner_emac.c	/^static void mii_set_link(RTL8201CPState *mii, bool link_ok)$/;"	f	file:
mii_set_link	opencores_eth.c	/^static void mii_set_link(Mii *s, bool link_ok)$/;"	f	file:
mii_write_bmcr	opencores_eth.c	/^static void mii_write_bmcr(Mii *s, uint16_t v)$/;"	f	file:
mii_write_host	opencores_eth.c	/^static void mii_write_host(Mii *s, unsigned idx, uint16_t v)$/;"	f	file:
miim_read_cycle	fsl_etsec/miim.c	/^static void miim_read_cycle(eTSEC *etsec)$/;"	f	file:
miim_write_cycle	fsl_etsec/miim.c	/^static void miim_write_cycle(eTSEC *etsec)$/;"	f	file:
milkymist_minimac2_class_init	milkymist-minimac2.c	/^static void milkymist_minimac2_class_init(ObjectClass *klass, void *data)$/;"	f	file:
milkymist_minimac2_info	milkymist-minimac2.c	/^static const TypeInfo milkymist_minimac2_info = {$/;"	v	file:
milkymist_minimac2_init	milkymist-minimac2.c	/^static int milkymist_minimac2_init(SysBusDevice *sbd)$/;"	f	file:
milkymist_minimac2_properties	milkymist-minimac2.c	/^static Property milkymist_minimac2_properties[] = {$/;"	v	file:
milkymist_minimac2_register_types	milkymist-minimac2.c	/^static void milkymist_minimac2_register_types(void)$/;"	f	file:
milkymist_minimac2_reset	milkymist-minimac2.c	/^static void milkymist_minimac2_reset(DeviceState *d)$/;"	f	file:
minimac2_can_rx	milkymist-minimac2.c	/^static int minimac2_can_rx(MilkymistMinimac2State *s)$/;"	f	file:
minimac2_mdio_read_reg	milkymist-minimac2.c	/^static uint16_t minimac2_mdio_read_reg(MilkymistMinimac2State *s,$/;"	f	file:
minimac2_mdio_write_reg	milkymist-minimac2.c	/^static void minimac2_mdio_write_reg(MilkymistMinimac2State *s,$/;"	f	file:
minimac2_ops	milkymist-minimac2.c	/^static const MemoryRegionOps minimac2_ops = {$/;"	v	file:
minimac2_read	milkymist-minimac2.c	/^minimac2_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
minimac2_rx	milkymist-minimac2.c	/^static ssize_t minimac2_rx(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
minimac2_tx	milkymist-minimac2.c	/^static void minimac2_tx(MilkymistMinimac2State *s)$/;"	f	file:
minimac2_update_mdio	milkymist-minimac2.c	/^static void minimac2_update_mdio(MilkymistMinimac2State *s)$/;"	f	file:
minimac2_write	milkymist-minimac2.c	/^minimac2_write(void *opaque, hwaddr addr, uint64_t value,$/;"	f	file:
mipsnet_buffer_full	mipsnet.c	/^static int mipsnet_buffer_full(MIPSnetState *s)$/;"	f	file:
mipsnet_can_receive	mipsnet.c	/^static int mipsnet_can_receive(NetClientState *nc)$/;"	f	file:
mipsnet_class_init	mipsnet.c	/^static void mipsnet_class_init(ObjectClass *klass, void *data)$/;"	f	file:
mipsnet_info	mipsnet.c	/^static const TypeInfo mipsnet_info = {$/;"	v	file:
mipsnet_ioport_ops	mipsnet.c	/^static const MemoryRegionOps mipsnet_ioport_ops = {$/;"	v	file:
mipsnet_ioport_read	mipsnet.c	/^static uint64_t mipsnet_ioport_read(void *opaque, hwaddr addr,$/;"	f	file:
mipsnet_ioport_write	mipsnet.c	/^static void mipsnet_ioport_write(void *opaque, hwaddr addr,$/;"	f	file:
mipsnet_properties	mipsnet.c	/^static Property mipsnet_properties[] = {$/;"	v	file:
mipsnet_receive	mipsnet.c	/^static ssize_t mipsnet_receive(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
mipsnet_register_types	mipsnet.c	/^static void mipsnet_register_types(void)$/;"	f	file:
mipsnet_reset	mipsnet.c	/^static void mipsnet_reset(MIPSnetState *s)$/;"	f	file:
mipsnet_sysbus_init	mipsnet.c	/^static int mipsnet_sysbus_init(SysBusDevice *sbd)$/;"	f	file:
mipsnet_sysbus_reset	mipsnet.c	/^static void mipsnet_sysbus_reset(DeviceState *dev)$/;"	f	file:
mipsnet_update_irq	mipsnet.c	/^static void mipsnet_update_irq(MIPSnetState *s)$/;"	f	file:
misc	pcnet.c	/^    uint32_t misc;$/;"	m	struct:pcnet_TMD	file:
misc	vmxnet3.h	/^    struct Vmxnet3_MiscConf            misc;$/;"	m	struct:Vmxnet3_DSDevRead	typeref:struct:Vmxnet3_DSDevRead::Vmxnet3_MiscConf
miss	rocker/rocker_of_dpa.c	/^    void (*miss)(OfDpaFlowContext *fc);$/;"	m	struct:of_dpa_flow_tbl_ops	file:
missing	eepro100.c	83;"	d	file:
mit_ide	e1000.c	/^    uint32_t mit_ide;          \/* Tracks E1000_TXD_CMD_IDE bit. *\/$/;"	m	struct:E1000State_st	file:
mit_irq_level	e1000.c	/^    bool mit_irq_level;        \/* Tracks interrupt pin level. *\/$/;"	m	struct:E1000State_st	file:
mit_timer	e1000.c	/^    QEMUTimer *mit_timer;      \/* Mitigation timer. *\/$/;"	m	struct:E1000State_st	file:
mit_timer_on	e1000.c	/^    bool mit_timer_on;         \/* Mitigation timer is running. *\/$/;"	m	struct:E1000State_st	file:
mit_update_delay	e1000.c	/^mit_update_delay(uint32_t *curr, uint32_t value)$/;"	f	file:
mmfr	mcf_fec.c	/^    uint32_t mmfr;$/;"	m	struct:__anon36	file:
mmio	dp8393x.c	/^    MemoryRegion mmio;$/;"	m	struct:dp8393xState	file:
mmio	e1000.c	/^    MemoryRegion mmio;$/;"	m	struct:E1000State_st	file:
mmio	e1000e.c	/^    MemoryRegion mmio;$/;"	m	struct:E1000EState	file:
mmio	etraxfs_eth.c	/^    MemoryRegion mmio;$/;"	m	struct:ETRAXFSEthState	file:
mmio	lan9118.c	/^    MemoryRegion mmio;$/;"	m	struct:__anon123	file:
mmio	pcnet.h	/^    MemoryRegion mmio;$/;"	m	struct:PCNetState_st
mmio	rocker/rocker.c	/^    MemoryRegion mmio;$/;"	m	struct:rocker	file:
mmio	smc91c111.c	/^    MemoryRegion mmio;$/;"	m	struct:__anon96	file:
mmio	stellaris_enet.c	/^    MemoryRegion mmio;$/;"	m	struct:__anon125	file:
mmio	xilinx_ethlite.c	/^    MemoryRegion mmio;$/;"	m	struct:xlx_ethlite	file:
mmio_bar	eepro100.c	/^    MemoryRegion mmio_bar;$/;"	m	struct:__anon84	file:
mmio_ops	e1000e.c	/^static const MemoryRegionOps mmio_ops = {$/;"	v	file:
modLevels	vmxnet3.h	/^    u8        modLevels[VMXNET3_MAX_INTRS];    \/* moderation level for$/;"	m	struct:Vmxnet3_IntrConf
mode	pcnet.c	/^    uint16_t mode;$/;"	m	struct:pcnet_initblk16	file:
mode	pcnet.c	/^    uint16_t mode;$/;"	m	struct:pcnet_initblk32	file:
mode	rtl8139.c	/^    int      mode;$/;"	m	struct:EEprom9346	file:
mode_16bit	lan9118.c	/^    uint32_t mode_16bit;$/;"	m	struct:__anon123	file:
mrd	xilinx_axienet.c	/^            uint32_t mrd;$/;"	m	struct:XilinxAXIEnet::__anon133::__anon134	file:
mrq	e1000_regs.h	/^            uint32_t mrq;           \/* Multiple Rx Queues *\/$/;"	m	struct:e1000_rx_desc_extended::__anon8::__anon9
mrq	e1000_regs.h	/^            uint32_t mrq;          \/* Multiple Rx Queues *\/$/;"	m	struct:e1000_rx_desc_packet_split::__anon14::__anon15
mrxd	stellaris_enet.c	/^    uint32_t mrxd;$/;"	m	struct:__anon125	file:
mscr	mcf_fec.c	/^    uint32_t mscr;$/;"	m	struct:__anon36	file:
msg_length	pcnet.c	/^    uint32_t msg_length;$/;"	m	struct:pcnet_RMD	file:
msix	e1000e.c	/^    MemoryRegion msix;$/;"	m	struct:E1000EState	file:
msix_bar	rocker/rocker.c	/^    MemoryRegion msix_bar;$/;"	m	struct:rocker	file:
msix_bar	vmxnet3.c	/^        MemoryRegion msix_bar;$/;"	m	struct:__anon101	file:
msix_used	vmxnet3.c	/^        bool msix_used;$/;"	m	struct:__anon101	file:
msix_vector	rocker/rocker_desc.c	/^    unsigned msix_vector;$/;"	m	struct:desc_ring	file:
mss	e1000_regs.h	/^            uint16_t mss;       \/* Maximum segment size *\/$/;"	m	struct:e1000_context_desc::__anon24::__anon25
mss	e1000x_common.h	/^    uint16_t mss;$/;"	m	struct:e1000x_txd_props
msscof	vmxnet3.h	/^    u32 msscof:14;  \/* MSS, checksum offset, flags *\/$/;"	m	struct:Vmxnet3_TxDesc
mtu	vmxnet3.c	/^        uint32_t mtu;$/;"	m	struct:__anon101	file:
mtu	vmxnet3.h	/^    __le32        mtu;$/;"	m	struct:Vmxnet3_MiscConf
mtxd	stellaris_enet.c	/^    uint32_t mtxd;$/;"	m	struct:__anon125	file:
mult	eepro100.c	/^    uint8_t mult[8];$/;"	m	struct:__anon84	file:
mult	ne2000.h	/^    uint8_t mult[8]; \/* multicast mask array *\/$/;"	m	struct:NE2000State
mult	rtl8139.c	/^    uint8_t mult[8]; \/* multicast mask array *\/$/;"	m	struct:RTL8139State	file:
mwd	xilinx_axienet.c	/^            uint32_t mwd;$/;"	m	struct:XilinxAXIEnet::__anon133::__anon134	file:
name	e1000.c	/^    const char *name;$/;"	m	struct:E1000Info	file:
name	eepro100.c	/^    const char *name;$/;"	m	struct:__anon75	file:
name	fsl_etsec/etsec.h	/^    const char *name;$/;"	m	struct:eTSEC_Register
name	fsl_etsec/registers.h	/^    const char                      *name;$/;"	m	struct:eTSEC_Register_Definition
name	rocker/rocker.c	/^    char *name;                  \/* switch name *\/$/;"	m	struct:rocker	file:
name	rocker/rocker_fp.c	/^    char *name;$/;"	m	struct:fp_port	file:
name	rocker/rocker_world.h	/^    const char *name;$/;"	m	struct:world_ops
nc	vhost_net.c	/^    NetClientState *nc;$/;"	m	struct:vhost_net	file:
nd	rocker/rocker_of_dpa.c	/^            } nd;$/;"	m	struct:of_dpa_flow_key::__anon57::__anon63	typeref:struct:of_dpa_flow_key::__anon57::__anon63::__anon66	file:
ne2000	ne2000-isa.c	/^    NE2000State ne2000;$/;"	m	struct:ISANE2000State	file:
ne2000	ne2000.c	/^    NE2000State ne2000;$/;"	m	struct:PCINE2000State	file:
ne2000_asic_ioport_read	ne2000.c	/^static uint32_t ne2000_asic_ioport_read(void *opaque, uint32_t addr)$/;"	f	file:
ne2000_asic_ioport_readl	ne2000.c	/^static uint32_t ne2000_asic_ioport_readl(void *opaque, uint32_t addr)$/;"	f	file:
ne2000_asic_ioport_write	ne2000.c	/^static void ne2000_asic_ioport_write(void *opaque, uint32_t addr, uint32_t val)$/;"	f	file:
ne2000_asic_ioport_writel	ne2000.c	/^static void ne2000_asic_ioport_writel(void *opaque, uint32_t addr, uint32_t val)$/;"	f	file:
ne2000_buffer_full	ne2000.c	/^static int ne2000_buffer_full(NE2000State *s)$/;"	f	file:
ne2000_class_init	ne2000.c	/^static void ne2000_class_init(ObjectClass *klass, void *data)$/;"	f	file:
ne2000_dma_update	ne2000.c	/^static inline void ne2000_dma_update(NE2000State *s, int len)$/;"	f	file:
ne2000_info	ne2000.c	/^static const TypeInfo ne2000_info = {$/;"	v	file:
ne2000_instance_init	ne2000.c	/^static void ne2000_instance_init(Object *obj)$/;"	f	file:
ne2000_ioport_read	ne2000.c	/^static uint32_t ne2000_ioport_read(void *opaque, uint32_t addr)$/;"	f	file:
ne2000_ioport_write	ne2000.c	/^static void ne2000_ioport_write(void *opaque, uint32_t addr, uint32_t val)$/;"	f	file:
ne2000_isa_info	ne2000-isa.c	/^static const TypeInfo ne2000_isa_info = {$/;"	v	file:
ne2000_isa_properties	ne2000-isa.c	/^static Property ne2000_isa_properties[] = {$/;"	v	file:
ne2000_isa_register_types	ne2000-isa.c	/^static void ne2000_isa_register_types(void)$/;"	f	file:
ne2000_mem_readb	ne2000.c	/^static inline uint32_t ne2000_mem_readb(NE2000State *s, uint32_t addr)$/;"	f	file:
ne2000_mem_readl	ne2000.c	/^static inline uint32_t ne2000_mem_readl(NE2000State *s, uint32_t addr)$/;"	f	file:
ne2000_mem_readw	ne2000.c	/^static inline uint32_t ne2000_mem_readw(NE2000State *s, uint32_t addr)$/;"	f	file:
ne2000_mem_writeb	ne2000.c	/^static inline void ne2000_mem_writeb(NE2000State *s, uint32_t addr,$/;"	f	file:
ne2000_mem_writel	ne2000.c	/^static inline void ne2000_mem_writel(NE2000State *s, uint32_t addr,$/;"	f	file:
ne2000_mem_writew	ne2000.c	/^static inline void ne2000_mem_writew(NE2000State *s, uint32_t addr,$/;"	f	file:
ne2000_ops	ne2000.c	/^static const MemoryRegionOps ne2000_ops = {$/;"	v	file:
ne2000_post_load	ne2000.c	/^static int ne2000_post_load(void* opaque, int version_id)$/;"	f	file:
ne2000_properties	ne2000.c	/^static Property ne2000_properties[] = {$/;"	v	file:
ne2000_read	ne2000.c	/^static uint64_t ne2000_read(void *opaque, hwaddr addr,$/;"	f	file:
ne2000_receive	ne2000.c	/^ssize_t ne2000_receive(NetClientState *nc, const uint8_t *buf, size_t size_)$/;"	f
ne2000_register_types	ne2000.c	/^static void ne2000_register_types(void)$/;"	f	file:
ne2000_reset	ne2000.c	/^void ne2000_reset(NE2000State *s)$/;"	f
ne2000_reset_ioport_read	ne2000.c	/^static uint32_t ne2000_reset_ioport_read(void *opaque, uint32_t addr)$/;"	f	file:
ne2000_reset_ioport_write	ne2000.c	/^static void ne2000_reset_ioport_write(void *opaque, uint32_t addr, uint32_t val)$/;"	f	file:
ne2000_setup_io	ne2000.c	/^void ne2000_setup_io(NE2000State *s, DeviceState *dev, unsigned size)$/;"	f
ne2000_update_irq	ne2000.c	/^static void ne2000_update_irq(NE2000State *s)$/;"	f	file:
ne2000_write	ne2000.c	/^static void ne2000_write(void *opaque, hwaddr addr,$/;"	f	file:
need_flush	fsl_etsec/etsec.h	/^    bool need_flush;$/;"	m	struct:eTSEC
need_flush	xilinx_axienet.c	/^    bool need_flush;$/;"	m	struct:XilinxAXIEnet	file:
needs_vlan	vmxnet3.c	/^        bool needs_vlan;$/;"	m	struct:__anon101	file:
net_aw_emac_info	allwinner_emac.c	/^static NetClientInfo net_aw_emac_info = {$/;"	v	file:
net_connect	xen_nic.c	/^static int net_connect(struct XenDevice *xendev)$/;"	f	file:
net_disconnect	xen_nic.c	/^static void net_disconnect(struct XenDevice *xendev)$/;"	f	file:
net_dp83932_info	dp8393x.c	/^static NetClientInfo net_dp83932_info = {$/;"	v	file:
net_e1000_info	e1000.c	/^static NetClientInfo net_e1000_info = {$/;"	v	file:
net_e1000e_info	e1000e.c	/^static NetClientInfo net_e1000e_info = {$/;"	v	file:
net_eepro100_info	eepro100.c	/^static NetClientInfo net_eepro100_info = {$/;"	v	file:
net_etraxfs_info	etraxfs_eth.c	/^static NetClientInfo net_etraxfs_info = {$/;"	v	file:
net_etsec_info	fsl_etsec/etsec.c	/^static NetClientInfo net_etsec_info = {$/;"	v	file:
net_event	xen_nic.c	/^static void net_event(struct XenDevice *xendev)$/;"	f	file:
net_free	xen_nic.c	/^static int net_free(struct XenDevice *xendev)$/;"	f	file:
net_gem_info	cadence_gem.c	/^static NetClientInfo net_gem_info = {$/;"	v	file:
net_init	xen_nic.c	/^static int net_init(struct XenDevice *xendev)$/;"	f	file:
net_lan9118_info	lan9118.c	/^static NetClientInfo net_lan9118_info = {$/;"	v	file:
net_lance_info	lance.c	/^static NetClientInfo net_lance_info = {$/;"	v	file:
net_mcf_fec_info	mcf_fec.c	/^static NetClientInfo net_mcf_fec_info = {$/;"	v	file:
net_milkymist_minimac2_info	milkymist-minimac2.c	/^static NetClientInfo net_milkymist_minimac2_info = {$/;"	v	file:
net_mipsnet_info	mipsnet.c	/^static NetClientInfo net_mipsnet_info = {$/;"	v	file:
net_ne2000_info	ne2000.c	/^static NetClientInfo net_ne2000_info = {$/;"	v	file:
net_ne2000_isa_info	ne2000-isa.c	/^static NetClientInfo net_ne2000_isa_info = {$/;"	v	file:
net_open_eth_info	opencores_eth.c	/^static NetClientInfo net_open_eth_info = {$/;"	v	file:
net_pci_pcnet_info	pcnet-pci.c	/^static NetClientInfo net_pci_pcnet_info = {$/;"	v	file:
net_rtl8139_info	rtl8139.c	/^static NetClientInfo net_rtl8139_info = {$/;"	v	file:
net_rx_packet	xen_nic.c	/^static ssize_t net_rx_packet(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
net_rx_pkt_attach_data	net_rx_pkt.h	/^net_rx_pkt_attach_data(struct NetRxPkt *pkt, const void *data,$/;"	f
net_rx_pkt_attach_iovec	net_rx_pkt.c	/^void net_rx_pkt_attach_iovec(struct NetRxPkt *pkt,$/;"	f
net_rx_pkt_attach_iovec_ex	net_rx_pkt.c	/^void net_rx_pkt_attach_iovec_ex(struct NetRxPkt *pkt,$/;"	f
net_rx_pkt_calc_rss_hash	net_rx_pkt.c	/^net_rx_pkt_calc_rss_hash(struct NetRxPkt *pkt,$/;"	f
net_rx_pkt_dump	net_rx_pkt.c	/^void net_rx_pkt_dump(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_fix_l4_csum	net_rx_pkt.c	/^bool net_rx_pkt_fix_l4_csum(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_get_iovec	net_rx_pkt.c	/^struct iovec *net_rx_pkt_get_iovec(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_get_iovec_len	net_rx_pkt.c	/^uint16_t net_rx_pkt_get_iovec_len(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_get_ip4_info	net_rx_pkt.c	/^eth_ip4_hdr_info *net_rx_pkt_get_ip4_info(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_get_ip6_info	net_rx_pkt.c	/^eth_ip6_hdr_info *net_rx_pkt_get_ip6_info(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_get_ip_id	net_rx_pkt.c	/^uint16_t net_rx_pkt_get_ip_id(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_get_l3_hdr_offset	net_rx_pkt.c	/^size_t net_rx_pkt_get_l3_hdr_offset(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_get_l4_hdr_offset	net_rx_pkt.c	/^size_t net_rx_pkt_get_l4_hdr_offset(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_get_l4_info	net_rx_pkt.c	/^eth_l4_hdr_info *net_rx_pkt_get_l4_info(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_get_l5_hdr_offset	net_rx_pkt.c	/^size_t net_rx_pkt_get_l5_hdr_offset(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_get_packet_type	net_rx_pkt.c	/^eth_pkt_types_e net_rx_pkt_get_packet_type(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_get_protocols	net_rx_pkt.c	/^void net_rx_pkt_get_protocols(struct NetRxPkt *pkt,$/;"	f
net_rx_pkt_get_total_len	net_rx_pkt.c	/^size_t net_rx_pkt_get_total_len(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_get_vhdr	net_rx_pkt.c	/^struct virtio_net_hdr *net_rx_pkt_get_vhdr(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_get_vlan_tag	net_rx_pkt.c	/^uint16_t net_rx_pkt_get_vlan_tag(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_has_tcp_data	net_rx_pkt.c	/^bool net_rx_pkt_has_tcp_data(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_has_virt_hdr	net_rx_pkt.c	/^bool net_rx_pkt_has_virt_hdr(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_init	net_rx_pkt.c	/^void net_rx_pkt_init(struct NetRxPkt **pkt, bool has_virt_hdr)$/;"	f
net_rx_pkt_iovec_realloc	net_rx_pkt.c	/^net_rx_pkt_iovec_realloc(struct NetRxPkt *pkt,$/;"	f	file:
net_rx_pkt_is_tcp_ack	net_rx_pkt.c	/^bool net_rx_pkt_is_tcp_ack(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_is_vlan_stripped	net_rx_pkt.c	/^bool net_rx_pkt_is_vlan_stripped(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_pull_data	net_rx_pkt.c	/^net_rx_pkt_pull_data(struct NetRxPkt *pkt,$/;"	f	file:
net_rx_pkt_set_packet_type	net_rx_pkt.c	/^void net_rx_pkt_set_packet_type(struct NetRxPkt *pkt,$/;"	f
net_rx_pkt_set_protocols	net_rx_pkt.c	/^void net_rx_pkt_set_protocols(struct NetRxPkt *pkt, const void *data,$/;"	f
net_rx_pkt_set_vhdr	net_rx_pkt.c	/^void net_rx_pkt_set_vhdr(struct NetRxPkt *pkt,$/;"	f
net_rx_pkt_set_vhdr_iovec	net_rx_pkt.c	/^void net_rx_pkt_set_vhdr_iovec(struct NetRxPkt *pkt,$/;"	f
net_rx_pkt_uninit	net_rx_pkt.c	/^void net_rx_pkt_uninit(struct NetRxPkt *pkt)$/;"	f
net_rx_pkt_validate_l3_csum	net_rx_pkt.c	/^bool net_rx_pkt_validate_l3_csum(struct NetRxPkt *pkt, bool *csum_valid)$/;"	f
net_rx_pkt_validate_l4_csum	net_rx_pkt.c	/^bool net_rx_pkt_validate_l4_csum(struct NetRxPkt *pkt, bool *csum_valid)$/;"	f
net_rx_response	xen_nic.c	/^static void net_rx_response(struct XenNetDev *netdev,$/;"	f	file:
net_smc91c111_info	smc91c111.c	/^static NetClientInfo net_smc91c111_info = {$/;"	v	file:
net_spapr_vlan_info	spapr_llan.c	/^static NetClientInfo net_spapr_vlan_info = {$/;"	v	file:
net_stellaris_enet_info	stellaris_enet.c	/^static NetClientInfo net_stellaris_enet_info = {$/;"	v	file:
net_tx_error	xen_nic.c	/^static void net_tx_error(struct XenNetDev *netdev, netif_tx_request_t *txp, RING_IDX end)$/;"	f	file:
net_tx_packets	xen_nic.c	/^static void net_tx_packets(struct XenNetDev *netdev)$/;"	f	file:
net_tx_pkt_add_raw_fragment	net_tx_pkt.c	/^bool net_tx_pkt_add_raw_fragment(struct NetTxPkt *pkt, hwaddr pa,$/;"	f
net_tx_pkt_build_vheader	net_tx_pkt.c	/^void net_tx_pkt_build_vheader(struct NetTxPkt *pkt, bool tso_enable,$/;"	f
net_tx_pkt_calculate_hdr_len	net_tx_pkt.c	/^static void net_tx_pkt_calculate_hdr_len(struct NetTxPkt *pkt)$/;"	f	file:
net_tx_pkt_do_sw_csum	net_tx_pkt.c	/^static void net_tx_pkt_do_sw_csum(struct NetTxPkt *pkt)$/;"	f	file:
net_tx_pkt_do_sw_fragmentation	net_tx_pkt.c	/^static bool net_tx_pkt_do_sw_fragmentation(struct NetTxPkt *pkt,$/;"	f	file:
net_tx_pkt_dump	net_tx_pkt.c	/^void net_tx_pkt_dump(struct NetTxPkt *pkt)$/;"	f
net_tx_pkt_fetch_fragment	net_tx_pkt.c	/^static size_t net_tx_pkt_fetch_fragment(struct NetTxPkt *pkt,$/;"	f	file:
net_tx_pkt_get_gso_type	net_tx_pkt.c	/^static uint8_t net_tx_pkt_get_gso_type(struct NetTxPkt *pkt,$/;"	f	file:
net_tx_pkt_get_packet_type	net_tx_pkt.c	/^eth_pkt_types_e net_tx_pkt_get_packet_type(struct NetTxPkt *pkt)$/;"	f
net_tx_pkt_get_total_len	net_tx_pkt.c	/^size_t net_tx_pkt_get_total_len(struct NetTxPkt *pkt)$/;"	f
net_tx_pkt_get_vhdr	net_tx_pkt.c	/^struct virtio_net_hdr *net_tx_pkt_get_vhdr(struct NetTxPkt *pkt)$/;"	f
net_tx_pkt_has_fragments	net_tx_pkt.c	/^bool net_tx_pkt_has_fragments(struct NetTxPkt *pkt)$/;"	f
net_tx_pkt_init	net_tx_pkt.c	/^void net_tx_pkt_init(struct NetTxPkt **pkt, PCIDevice *pci_dev,$/;"	f
net_tx_pkt_parse	net_tx_pkt.c	/^bool net_tx_pkt_parse(struct NetTxPkt *pkt)$/;"	f
net_tx_pkt_parse_headers	net_tx_pkt.c	/^static bool net_tx_pkt_parse_headers(struct NetTxPkt *pkt)$/;"	f	file:
net_tx_pkt_rebuild_payload	net_tx_pkt.c	/^static void net_tx_pkt_rebuild_payload(struct NetTxPkt *pkt)$/;"	f	file:
net_tx_pkt_reset	net_tx_pkt.c	/^void net_tx_pkt_reset(struct NetTxPkt *pkt)$/;"	f
net_tx_pkt_send	net_tx_pkt.c	/^bool net_tx_pkt_send(struct NetTxPkt *pkt, NetClientState *nc)$/;"	f
net_tx_pkt_send_loopback	net_tx_pkt.c	/^bool net_tx_pkt_send_loopback(struct NetTxPkt *pkt, NetClientState *nc)$/;"	f
net_tx_pkt_sendv	net_tx_pkt.c	/^static inline void net_tx_pkt_sendv(struct NetTxPkt *pkt,$/;"	f	file:
net_tx_pkt_setup_vlan_header	net_tx_pkt.h	/^net_tx_pkt_setup_vlan_header(struct NetTxPkt *pkt, uint16_t vlan)$/;"	f
net_tx_pkt_setup_vlan_header_ex	net_tx_pkt.c	/^void net_tx_pkt_setup_vlan_header_ex(struct NetTxPkt *pkt,$/;"	f
net_tx_pkt_uninit	net_tx_pkt.c	/^void net_tx_pkt_uninit(struct NetTxPkt *pkt)$/;"	f
net_tx_pkt_update_ip_checksums	net_tx_pkt.c	/^void net_tx_pkt_update_ip_checksums(struct NetTxPkt *pkt)$/;"	f
net_tx_pkt_update_ip_hdr_checksum	net_tx_pkt.c	/^void net_tx_pkt_update_ip_hdr_checksum(struct NetTxPkt *pkt)$/;"	f
net_tx_response	xen_nic.c	/^static void net_tx_response(struct XenNetDev *netdev, netif_tx_request_t *txp, int8_t st)$/;"	f	file:
net_virtio_info	virtio-net.c	/^static NetClientInfo net_virtio_info = {$/;"	v	file:
net_vmxnet3_info	vmxnet3.c	/^static NetClientInfo net_vmxnet3_info = {$/;"	v	file:
net_xen_info	xen_nic.c	/^static NetClientInfo net_xen_info = {$/;"	v	file:
net_xgmac_enet_info	xgmac.c	/^static NetClientInfo net_xgmac_enet_info = {$/;"	v	file:
net_xilinx_enet_info	xilinx_axienet.c	/^static NetClientInfo net_xilinx_enet_info = {$/;"	v	file:
net_xilinx_ethlite_info	xilinx_ethlite.c	/^static NetClientInfo net_xilinx_ethlite_info = {$/;"	v	file:
new_vlan_id	rocker/rocker_of_dpa.c	/^        __be16 new_vlan_id;$/;"	m	struct:of_dpa_flow_action::__anon68	file:
next	vmxnet3.c	/^    size_t next;$/;"	m	struct:__anon97	file:
next_packet	stellaris_enet.c	/^    uint32_t next_packet;$/;"	m	struct:__anon125	file:
nic	dp8393x.c	/^    NICState *nic;$/;"	m	struct:dp8393xState	file:
nic	e1000.c	/^    NICState *nic;$/;"	m	struct:E1000State_st	file:
nic	e1000e.c	/^    NICState *nic;$/;"	m	struct:E1000EState	file:
nic	eepro100.c	/^    NICState *nic;$/;"	m	struct:__anon84	file:
nic	etraxfs_eth.c	/^    NICState *nic;$/;"	m	struct:ETRAXFSEthState	file:
nic	fsl_etsec/etsec.h	/^    NICState *nic;$/;"	m	struct:eTSEC
nic	lan9118.c	/^    NICState *nic;$/;"	m	struct:__anon123	file:
nic	mcf_fec.c	/^    NICState *nic;$/;"	m	struct:__anon36	file:
nic	milkymist-minimac2.c	/^    NICState *nic;$/;"	m	struct:MilkymistMinimac2State	file:
nic	mipsnet.c	/^    NICState *nic;$/;"	m	struct:MIPSnetState	file:
nic	ne2000.h	/^    NICState *nic;$/;"	m	struct:NE2000State
nic	opencores_eth.c	/^    NICState *nic;$/;"	m	struct:OpenEthState	file:
nic	pcnet.h	/^    NICState *nic;$/;"	m	struct:PCNetState_st
nic	rocker/rocker_fp.c	/^    NICState *nic;$/;"	m	struct:fp_port	file:
nic	rtl8139.c	/^    NICState *nic;$/;"	m	struct:RTL8139State	file:
nic	smc91c111.c	/^    NICState *nic;$/;"	m	struct:__anon96	file:
nic	spapr_llan.c	/^    NICState *nic;$/;"	m	struct:VIOsPAPRVLANDevice	file:
nic	stellaris_enet.c	/^    NICState *nic;$/;"	m	struct:__anon125	file:
nic	vmxnet3.c	/^        NICState *nic;$/;"	m	struct:__anon101	file:
nic	xen_nic.c	/^    NICState              *nic;$/;"	m	struct:XenNetDev	file:
nic	xgmac.c	/^    NICState *nic;$/;"	m	struct:XgmacState	file:
nic	xilinx_axienet.c	/^    NICState *nic;$/;"	m	struct:XilinxAXIEnet	file:
nic	xilinx_ethlite.c	/^    NICState *nic;$/;"	m	struct:xlx_ethlite	file:
nic_dump	eepro100.c	/^static const char *nic_dump(const uint8_t * buf, unsigned size)$/;"	f	file:
nic_receive	eepro100.c	/^static ssize_t nic_receive(NetClientState *nc, const uint8_t * buf, size_t size)$/;"	f	file:
nic_reset	eepro100.c	/^static void nic_reset(void *opaque)$/;"	f	file:
nic_selective_reset	eepro100.c	/^static void nic_selective_reset(EEPRO100State * s)$/;"	f	file:
nicconf	spapr_llan.c	/^    NICConf nicconf;$/;"	m	struct:VIOsPAPRVLANDevice	file:
np	stellaris_enet.c	/^    uint32_t np;$/;"	m	struct:__anon125	file:
numFilters	vmxnet3.h	/^    u8        numFilters;$/;"	m	struct:Vmxnet3_PMConf
numIntrs	vmxnet3.h	/^    u8        numIntrs;      \/* # of interrupts *\/$/;"	m	struct:Vmxnet3_IntrConf
numRxQueues	vmxnet3.h	/^    u8        numRxQueues;$/;"	m	struct:Vmxnet3_MiscConf
numTxQueues	vmxnet3.h	/^    u8        numTxQueues;$/;"	m	struct:Vmxnet3_MiscConf
of_dpa	rocker/rocker_of_dpa.c	/^    OfDpa *of_dpa;$/;"	m	struct:of_dpa_flow_context	file:
of_dpa	rocker/rocker_of_dpa.c	/^typedef struct of_dpa {$/;"	s	file:
of_dpa_acl_action_write	rocker/rocker_of_dpa.c	/^static void of_dpa_acl_action_write(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_acl_build_match	rocker/rocker_of_dpa.c	/^static void of_dpa_acl_build_match(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_acl_hit	rocker/rocker_of_dpa.c	/^static void of_dpa_acl_hit(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_apply_actions	rocker/rocker_of_dpa.c	/^static void of_dpa_apply_actions(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_bridging_action_write	rocker/rocker_of_dpa.c	/^static void of_dpa_bridging_action_write(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_bridging_build_match	rocker/rocker_of_dpa.c	/^static void of_dpa_bridging_build_match(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_bridging_learn	rocker/rocker_of_dpa.c	/^static void of_dpa_bridging_learn(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_bridging_miss	rocker/rocker_of_dpa.c	/^static void of_dpa_bridging_miss(OfDpaFlowContext *fc)$/;"	f	file:
of_dpa_cmd	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd(World *world, struct desc_info *info,$/;"	f	file:
of_dpa_cmd_add_acl	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_add_acl(OfDpaFlow *flow, RockerTlv **flow_tlvs)$/;"	f	file:
of_dpa_cmd_add_acl_ip	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_add_acl_ip(OfDpaFlowKey *key, OfDpaFlowKey *mask,$/;"	f	file:
of_dpa_cmd_add_bridging	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_add_bridging(OfDpaFlow *flow, RockerTlv **flow_tlvs)$/;"	f	file:
of_dpa_cmd_add_ig_port	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_add_ig_port(OfDpaFlow *flow, RockerTlv **flow_tlvs)$/;"	f	file:
of_dpa_cmd_add_l2_flood	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_add_l2_flood(OfDpa *of_dpa, OfDpaGroup *group,$/;"	f	file:
of_dpa_cmd_add_l2_interface	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_add_l2_interface(OfDpaGroup *group,$/;"	f	file:
of_dpa_cmd_add_l2_rewrite	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_add_l2_rewrite(OfDpa *of_dpa, OfDpaGroup *group,$/;"	f	file:
of_dpa_cmd_add_l3_unicast	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_add_l3_unicast(OfDpaGroup *group, RockerTlv **group_tlvs)$/;"	f	file:
of_dpa_cmd_add_multicast_routing	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_add_multicast_routing(OfDpaFlow *flow,$/;"	f	file:
of_dpa_cmd_add_term_mac	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_add_term_mac(OfDpaFlow *flow, RockerTlv **flow_tlvs)$/;"	f	file:
of_dpa_cmd_add_unicast_routing	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_add_unicast_routing(OfDpaFlow *flow,$/;"	f	file:
of_dpa_cmd_add_vlan	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_add_vlan(OfDpaFlow *flow, RockerTlv **flow_tlvs)$/;"	f	file:
of_dpa_cmd_flow_add	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_flow_add(OfDpa *of_dpa, uint64_t cookie,$/;"	f	file:
of_dpa_cmd_flow_add_mod	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_flow_add_mod(OfDpa *of_dpa, OfDpaFlow *flow,$/;"	f	file:
of_dpa_cmd_flow_del	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_flow_del(OfDpa *of_dpa, uint64_t cookie)$/;"	f	file:
of_dpa_cmd_flow_get_stats	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_flow_get_stats(OfDpa *of_dpa, uint64_t cookie,$/;"	f	file:
of_dpa_cmd_flow_mod	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_flow_mod(OfDpa *of_dpa, uint64_t cookie,$/;"	f	file:
of_dpa_cmd_group_add	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_group_add(OfDpa *of_dpa, uint32_t group_id,$/;"	f	file:
of_dpa_cmd_group_del	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_group_del(OfDpa *of_dpa, uint32_t group_id)$/;"	f	file:
of_dpa_cmd_group_do	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_group_do(OfDpa *of_dpa, uint32_t group_id,$/;"	f	file:
of_dpa_cmd_group_get_stats	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_group_get_stats(OfDpa *of_dpa, uint32_t group_id,$/;"	f	file:
of_dpa_cmd_group_mod	rocker/rocker_of_dpa.c	/^static int of_dpa_cmd_group_mod(OfDpa *of_dpa, uint32_t group_id,$/;"	f	file:
of_dpa_drop	rocker/rocker_of_dpa.c	/^static void of_dpa_drop(OfDpaFlowContext *fc)$/;"	f	file:
of_dpa_eg	rocker/rocker_of_dpa.c	/^static void of_dpa_eg(OfDpaFlowContext *fc)$/;"	f	file:
of_dpa_flow	rocker/rocker_of_dpa.c	/^typedef struct of_dpa_flow {$/;"	s	file:
of_dpa_flow_action	rocker/rocker_of_dpa.c	/^typedef struct of_dpa_flow_action {$/;"	s	file:
of_dpa_flow_add	rocker/rocker_of_dpa.c	/^static int of_dpa_flow_add(OfDpa *of_dpa, OfDpaFlow *flow)$/;"	f	file:
of_dpa_flow_alloc	rocker/rocker_of_dpa.c	/^static OfDpaFlow *of_dpa_flow_alloc(uint64_t cookie)$/;"	f	file:
of_dpa_flow_cmd	rocker/rocker_of_dpa.c	/^static int of_dpa_flow_cmd(OfDpa *of_dpa, struct desc_info *info,$/;"	f	file:
of_dpa_flow_context	rocker/rocker_of_dpa.c	/^typedef struct of_dpa_flow_context {$/;"	s	file:
of_dpa_flow_del	rocker/rocker_of_dpa.c	/^static void of_dpa_flow_del(OfDpa *of_dpa, OfDpaFlow *flow)$/;"	f	file:
of_dpa_flow_fill	rocker/rocker_of_dpa.c	/^static void of_dpa_flow_fill(void *cookie, void *value, void *user_data)$/;"	f	file:
of_dpa_flow_fill_context	rocker/rocker_of_dpa.c	/^struct of_dpa_flow_fill_context {$/;"	s	file:
of_dpa_flow_find	rocker/rocker_of_dpa.c	/^static OfDpaFlow *of_dpa_flow_find(OfDpa *of_dpa, uint64_t cookie)$/;"	f	file:
of_dpa_flow_ig_tbl	rocker/rocker_of_dpa.c	/^static void of_dpa_flow_ig_tbl(OfDpaFlowContext *fc, uint32_t tbl_id)$/;"	f	file:
of_dpa_flow_key	rocker/rocker_of_dpa.c	/^typedef struct of_dpa_flow_key {$/;"	s	file:
of_dpa_flow_key_dump	rocker/rocker_of_dpa.c	/^static void of_dpa_flow_key_dump(OfDpaFlowKey *key, OfDpaFlowKey *mask)$/;"	f	file:
of_dpa_flow_key_dump	rocker/rocker_of_dpa.c	303;"	d	file:
of_dpa_flow_match	rocker/rocker_of_dpa.c	/^static OfDpaFlow *of_dpa_flow_match(OfDpa *of_dpa, OfDpaFlowMatch *match)$/;"	f	file:
of_dpa_flow_match	rocker/rocker_of_dpa.c	/^typedef struct of_dpa_flow_match {$/;"	s	file:
of_dpa_flow_pkt_fields	rocker/rocker_of_dpa.c	/^typedef struct of_dpa_flow_pkt_fields {$/;"	s	file:
of_dpa_flow_pkt_hdr_reset	rocker/rocker_of_dpa.c	/^static void of_dpa_flow_pkt_hdr_reset(OfDpaFlowContext *fc)$/;"	f	file:
of_dpa_flow_pkt_hdr_rewrite	rocker/rocker_of_dpa.c	/^static void of_dpa_flow_pkt_hdr_rewrite(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_flow_pkt_insert_vlan	rocker/rocker_of_dpa.c	/^static void of_dpa_flow_pkt_insert_vlan(OfDpaFlowContext *fc, __be16 vlan_id)$/;"	f	file:
of_dpa_flow_pkt_parse	rocker/rocker_of_dpa.c	/^static void of_dpa_flow_pkt_parse(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_flow_pkt_strip_vlan	rocker/rocker_of_dpa.c	/^static void of_dpa_flow_pkt_strip_vlan(OfDpaFlowContext *fc)$/;"	f	file:
of_dpa_flow_tbl_ops	rocker/rocker_of_dpa.c	/^typedef struct of_dpa_flow_tbl_ops {$/;"	s	file:
of_dpa_group	rocker/rocker_of_dpa.c	/^typedef struct of_dpa_group {$/;"	s	file:
of_dpa_group_add	rocker/rocker_of_dpa.c	/^static int of_dpa_group_add(OfDpa *of_dpa, OfDpaGroup *group)$/;"	f	file:
of_dpa_group_alloc	rocker/rocker_of_dpa.c	/^static OfDpaGroup *of_dpa_group_alloc(uint32_t id)$/;"	f	file:
of_dpa_group_cmd	rocker/rocker_of_dpa.c	/^static int of_dpa_group_cmd(OfDpa *of_dpa, struct desc_info *info,$/;"	f	file:
of_dpa_group_del	rocker/rocker_of_dpa.c	/^static int of_dpa_group_del(OfDpa *of_dpa, OfDpaGroup *group)$/;"	f	file:
of_dpa_group_fill	rocker/rocker_of_dpa.c	/^static void of_dpa_group_fill(void *key, void *value, void *user_data)$/;"	f	file:
of_dpa_group_fill_context	rocker/rocker_of_dpa.c	/^struct of_dpa_group_fill_context {$/;"	s	file:
of_dpa_group_find	rocker/rocker_of_dpa.c	/^static OfDpaGroup *of_dpa_group_find(OfDpa *of_dpa,$/;"	f	file:
of_dpa_ig	rocker/rocker_of_dpa.c	/^static ssize_t of_dpa_ig(World *world, uint32_t pport,$/;"	f	file:
of_dpa_ig_port_build_match	rocker/rocker_of_dpa.c	/^static void of_dpa_ig_port_build_match(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_ig_port_miss	rocker/rocker_of_dpa.c	/^static void of_dpa_ig_port_miss(OfDpaFlowContext *fc)$/;"	f	file:
of_dpa_init	rocker/rocker_of_dpa.c	/^static int of_dpa_init(World *world)$/;"	f	file:
of_dpa_mask2prefix	rocker/rocker_of_dpa.c	/^static int of_dpa_mask2prefix(__be32 mask)$/;"	f	file:
of_dpa_multicast_routing_action_write	rocker/rocker_of_dpa.c	/^of_dpa_multicast_routing_action_write(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_multicast_routing_build_match	rocker/rocker_of_dpa.c	/^of_dpa_multicast_routing_build_match(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_multicast_routing_miss	rocker/rocker_of_dpa.c	/^static void of_dpa_multicast_routing_miss(OfDpaFlowContext *fc)$/;"	f	file:
of_dpa_ops	rocker/rocker_of_dpa.c	/^static WorldOps of_dpa_ops = {$/;"	v	file:
of_dpa_output_l2_flood	rocker/rocker_of_dpa.c	/^static void of_dpa_output_l2_flood(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_output_l2_interface	rocker/rocker_of_dpa.c	/^static void of_dpa_output_l2_interface(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_output_l2_rewrite	rocker/rocker_of_dpa.c	/^static void of_dpa_output_l2_rewrite(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_output_l3_unicast	rocker/rocker_of_dpa.c	/^static void of_dpa_output_l3_unicast(OfDpaFlowContext *fc, OfDpaGroup *group)$/;"	f	file:
of_dpa_tbl_ops	rocker/rocker_of_dpa.c	/^static OfDpaFlowTblOps of_dpa_tbl_ops[] = {$/;"	v	file:
of_dpa_term_mac_build_match	rocker/rocker_of_dpa.c	/^static void of_dpa_term_mac_build_match(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_term_mac_miss	rocker/rocker_of_dpa.c	/^static void of_dpa_term_mac_miss(OfDpaFlowContext *fc)$/;"	f	file:
of_dpa_unicast_routing_action_write	rocker/rocker_of_dpa.c	/^static void of_dpa_unicast_routing_action_write(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_unicast_routing_build_match	rocker/rocker_of_dpa.c	/^static void of_dpa_unicast_routing_build_match(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_unicast_routing_miss	rocker/rocker_of_dpa.c	/^static void of_dpa_unicast_routing_miss(OfDpaFlowContext *fc)$/;"	f	file:
of_dpa_uninit	rocker/rocker_of_dpa.c	/^static void of_dpa_uninit(World *world)$/;"	f	file:
of_dpa_vlan_build_match	rocker/rocker_of_dpa.c	/^static void of_dpa_vlan_build_match(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_vlan_insert	rocker/rocker_of_dpa.c	/^static void of_dpa_vlan_insert(OfDpaFlowContext *fc,$/;"	f	file:
of_dpa_world_alloc	rocker/rocker_of_dpa.c	/^World *of_dpa_world_alloc(Rocker *r)$/;"	f
offload_mode	vmxnet3.c	/^        uint32_t offload_mode;$/;"	m	struct:__anon101	file:
offset	fsl_etsec/registers.h	/^    uint32_t                         offset;$/;"	m	struct:eTSEC_Register_Definition
offset	lan9118.c	/^    int32_t offset;$/;"	m	struct:__anon122	file:
old_eecd	e1000.c	/^        uint32_t old_eecd;$/;"	m	struct:E1000State_st::__anon89	file:
om	vmxnet3.h	/^    u32 om:2;       \/* offload mode *\/$/;"	m	struct:Vmxnet3_TxDesc
ones_complement_sum	rtl8139.c	/^static uint16_t ones_complement_sum(uint8_t *data, size_t len)$/;"	f	file:
opc	etraxfs_eth.c	/^    unsigned int opc;$/;"	m	struct:qemu_mdio	file:
opc	xilinx_axienet.c	/^    unsigned int opc;$/;"	m	struct:MDIOBus	file:
open_eth_can_receive	opencores_eth.c	/^static int open_eth_can_receive(NetClientState *nc)$/;"	f	file:
open_eth_check_start_xmit	opencores_eth.c	/^static void open_eth_check_start_xmit(OpenEthState *s)$/;"	f	file:
open_eth_class_init	opencores_eth.c	/^static void open_eth_class_init(ObjectClass *klass, void *data)$/;"	f	file:
open_eth_desc_ops	opencores_eth.c	/^static const MemoryRegionOps open_eth_desc_ops = {$/;"	v	file:
open_eth_desc_read	opencores_eth.c	/^static uint64_t open_eth_desc_read(void *opaque,$/;"	f	file:
open_eth_desc_write	opencores_eth.c	/^static void open_eth_desc_write(void *opaque,$/;"	f	file:
open_eth_info	opencores_eth.c	/^static const TypeInfo open_eth_info = {$/;"	v	file:
open_eth_int_mask_host_write	opencores_eth.c	/^static void open_eth_int_mask_host_write(OpenEthState *s, uint32_t val)$/;"	f	file:
open_eth_int_source_host_write	opencores_eth.c	/^static void open_eth_int_source_host_write(OpenEthState *s, uint32_t val)$/;"	f	file:
open_eth_int_source_write	opencores_eth.c	/^static void open_eth_int_source_write(OpenEthState *s,$/;"	f	file:
open_eth_mii_command_host_write	opencores_eth.c	/^static void open_eth_mii_command_host_write(OpenEthState *s, uint32_t val)$/;"	f	file:
open_eth_mii_tx_host_write	opencores_eth.c	/^static void open_eth_mii_tx_host_write(OpenEthState *s, uint32_t val)$/;"	f	file:
open_eth_moder_host_write	opencores_eth.c	/^static void open_eth_moder_host_write(OpenEthState *s, uint32_t val)$/;"	f	file:
open_eth_notify_can_receive	opencores_eth.c	/^static void open_eth_notify_can_receive(OpenEthState *s)$/;"	f	file:
open_eth_properties	opencores_eth.c	/^static Property open_eth_properties[] = {$/;"	v	file:
open_eth_receive	opencores_eth.c	/^static ssize_t open_eth_receive(NetClientState *nc,$/;"	f	file:
open_eth_reg_ops	opencores_eth.c	/^static const MemoryRegionOps open_eth_reg_ops = {$/;"	v	file:
open_eth_reg_read	opencores_eth.c	/^static uint64_t open_eth_reg_read(void *opaque,$/;"	f	file:
open_eth_reg_write	opencores_eth.c	/^static void open_eth_reg_write(void *opaque,$/;"	f	file:
open_eth_register_types	opencores_eth.c	/^static void open_eth_register_types(void)$/;"	f	file:
open_eth_reset	opencores_eth.c	/^static void open_eth_reset(void *opaque)$/;"	f	file:
open_eth_ro	opencores_eth.c	/^static void open_eth_ro(OpenEthState *s, uint32_t val)$/;"	f	file:
open_eth_set_link_status	opencores_eth.c	/^static void open_eth_set_link_status(NetClientState *nc)$/;"	f	file:
open_eth_start_xmit	opencores_eth.c	/^static void open_eth_start_xmit(OpenEthState *s, desc *tx)$/;"	f	file:
open_eth_tx_bd_num_host_write	opencores_eth.c	/^static void open_eth_tx_bd_num_host_write(OpenEthState *s, uint32_t val)$/;"	f	file:
open_eth_update_irq	opencores_eth.c	/^static void open_eth_update_irq(OpenEthState *s,$/;"	f	file:
ops	rocker/rocker_world.c	/^    WorldOps *ops;$/;"	m	struct:world	file:
out_pport	rocker/rocker_of_dpa.c	/^            uint32_t out_pport;$/;"	m	struct:of_dpa_group::__anon70::__anon71	file:
out_pport	rocker/rocker_of_dpa.c	/^        uint32_t out_pport;$/;"	m	struct:of_dpa_flow_action::__anon68	file:
output	rtl8139.c	/^    uint16_t output;$/;"	m	struct:EEprom9346	file:
owner	e1000e_core.h	/^    PCIDevice *owner;$/;"	m	struct:E1000Core
owner_nic	e1000e_core.h	/^    NICState *owner_nic;$/;"	m	struct:E1000Core
owner_start_recv	e1000e_core.h	/^    void (*owner_start_recv)(PCIDevice *d);$/;"	m	struct:E1000Core
pa	vmxnet3.c	/^    hwaddr pa;$/;"	m	struct:__anon97	file:
packet_num	smc91c111.c	/^    int packet_num;$/;"	m	struct:__anon96	file:
packet_type	net_rx_pkt.c	/^    eth_pkt_types_e packet_type;$/;"	m	struct:NetRxPkt	file:
packet_type	net_tx_pkt.c	/^    eth_pkt_types_e packet_type;$/;"	m	struct:NetTxPkt	file:
pad	lan9118.c	/^    int32_t pad;$/;"	m	struct:__anon122	file:
pad	vmxnet3.h	/^    __le32              pad;$/;"	m	struct:Vmxnet3_DriverShared
pad	vmxnet3.h	/^    u8        pad[5];$/;"	m	struct:Vmxnet3_PMConf
pad	vmxnet3.h	/^    u8        pad[6];$/;"	m	struct:Vmxnet3_PM_PktFilter
padding	allwinner_emac.c	/^static uint8_t padding[60];$/;"	v	file:
padr	pcnet.c	/^    uint16_t padr[3];$/;"	m	struct:pcnet_initblk16	file:
padr	pcnet.c	/^    uint16_t padr[3];$/;"	m	struct:pcnet_initblk32	file:
padr_bcast	pcnet.c	/^static inline int padr_bcast(PCNetState *s, const uint8_t *buf, int size)$/;"	f	file:
padr_match	pcnet.c	/^static inline int padr_match(PCNetState *s, const uint8_t *buf, int size)$/;"	f	file:
parent	xilinx_axienet.c	/^    Object parent;$/;"	m	struct:XilinxAXIEnetStreamSlave	file:
parent	xilinx_axienet.c	/^    void *parent;$/;"	m	struct:TEMAC	file:
parent_class	e1000.c	/^    PCIDeviceClass parent_class;$/;"	m	struct:E1000BaseClass	file:
parent_class	vmxnet3.c	/^    PCIDeviceClass parent_class;$/;"	m	struct:VMXNET3Class	file:
parent_dc_realize	vmxnet3.c	/^    DeviceRealize parent_dc_realize;$/;"	m	struct:VMXNET3Class	file:
parent_lance_reset	lance.c	/^static void parent_lance_reset(void *opaque, int irq, int level)$/;"	f	file:
parent_obj	dp8393x.c	/^    SysBusDevice parent_obj;$/;"	m	struct:dp8393xState	file:
parent_obj	e1000.c	/^    PCIDevice parent_obj;$/;"	m	struct:E1000State_st	file:
parent_obj	e1000e.c	/^    PCIDevice parent_obj;$/;"	m	struct:E1000EState	file:
parent_obj	etraxfs_eth.c	/^    SysBusDevice parent_obj;$/;"	m	struct:ETRAXFSEthState	file:
parent_obj	lan9118.c	/^    SysBusDevice parent_obj;$/;"	m	struct:__anon123	file:
parent_obj	lance.c	/^    SysBusDevice parent_obj;$/;"	m	struct:__anon105	file:
parent_obj	milkymist-minimac2.c	/^    SysBusDevice parent_obj;$/;"	m	struct:MilkymistMinimac2State	file:
parent_obj	mipsnet.c	/^    SysBusDevice parent_obj;$/;"	m	struct:MIPSnetState	file:
parent_obj	ne2000-isa.c	/^    ISADevice parent_obj;$/;"	m	struct:ISANE2000State	file:
parent_obj	opencores_eth.c	/^    SysBusDevice parent_obj;$/;"	m	struct:OpenEthState	file:
parent_obj	pcnet-pci.c	/^    PCIDevice parent_obj;$/;"	m	struct:__anon121	file:
parent_obj	rocker/rocker.c	/^    PCIDevice parent_obj;$/;"	m	struct:rocker	file:
parent_obj	rtl8139.c	/^    PCIDevice parent_obj;$/;"	m	struct:RTL8139State	file:
parent_obj	smc91c111.c	/^    SysBusDevice parent_obj;$/;"	m	struct:__anon96	file:
parent_obj	stellaris_enet.c	/^    SysBusDevice parent_obj;$/;"	m	struct:__anon125	file:
parent_obj	vmxnet3.c	/^        PCIDevice parent_obj;$/;"	m	struct:__anon101	file:
parent_obj	xgmac.c	/^    SysBusDevice parent_obj;$/;"	m	struct:XgmacState	file:
parent_obj	xilinx_ethlite.c	/^    SysBusDevice parent_obj;$/;"	m	struct:xlx_ethlite	file:
pattern	vmxnet3.h	/^    u8        pattern[VMXNET3_PM_MAX_PATTERN_SIZE];$/;"	m	struct:Vmxnet3_PM_PktFilter
patternSize	vmxnet3.h	/^    u8        patternSize;$/;"	m	struct:Vmxnet3_PM_PktFilter
paylen	e1000x_common.h	/^    uint32_t paylen;$/;"	m	struct:e1000x_txd_props
payload_frags	net_tx_pkt.c	/^    uint32_t payload_frags;$/;"	m	struct:NetTxPkt	file:
payload_len	net_tx_pkt.c	/^    uint32_t payload_len;$/;"	m	struct:NetTxPkt	file:
pci_dev	net_tx_pkt.c	/^    PCIDevice *pci_dev;$/;"	m	struct:NetTxPkt	file:
pci_e1000_realize	e1000.c	/^static void pci_e1000_realize(PCIDevice *pci_dev, Error **errp)$/;"	f	file:
pci_e1000_uninit	e1000.c	/^pci_e1000_uninit(PCIDevice *dev)$/;"	f	file:
pci_ne2000_exit	ne2000.c	/^static void pci_ne2000_exit(PCIDevice *pci_dev)$/;"	f	file:
pci_ne2000_realize	ne2000.c	/^static void pci_ne2000_realize(PCIDevice *pci_dev, Error **errp)$/;"	f	file:
pci_nic_uninit	eepro100.c	/^static void pci_nic_uninit(PCIDevice *pci_dev)$/;"	f	file:
pci_pcnet_realize	pcnet-pci.c	/^static void pci_pcnet_realize(PCIDevice *pci_dev, Error **errp)$/;"	f	file:
pci_pcnet_register_types	pcnet-pci.c	/^static void pci_pcnet_register_types(void)$/;"	f	file:
pci_pcnet_uninit	pcnet-pci.c	/^static void pci_pcnet_uninit(PCIDevice *dev)$/;"	f	file:
pci_physical_memory_read	pcnet-pci.c	/^static void pci_physical_memory_read(void *dma_opaque, hwaddr addr,$/;"	f	file:
pci_physical_memory_write	pcnet-pci.c	/^static void pci_physical_memory_write(void *dma_opaque, hwaddr addr,$/;"	f	file:
pci_reset	pcnet-pci.c	/^static void pci_reset(DeviceState *dev)$/;"	f	file:
pci_rocker_init	rocker/rocker.c	/^static int pci_rocker_init(PCIDevice *dev)$/;"	f	file:
pci_rocker_uninit	rocker/rocker.c	/^static void pci_rocker_uninit(PCIDevice *dev)$/;"	f	file:
pci_rtl8139_realize	rtl8139.c	/^static void pci_rtl8139_realize(PCIDevice *dev, Error **errp)$/;"	f	file:
pci_rtl8139_uninit	rtl8139.c	/^static void pci_rtl8139_uninit(PCIDevice *dev)$/;"	f	file:
pcnet_RMD	pcnet.c	/^struct pcnet_RMD {$/;"	s	file:
pcnet_TMD	pcnet.c	/^struct pcnet_TMD {$/;"	s	file:
pcnet_aprom_readb	pcnet-pci.c	/^static uint32_t pcnet_aprom_readb(void *opaque, uint32_t addr)$/;"	f	file:
pcnet_aprom_writeb	pcnet-pci.c	/^static void pcnet_aprom_writeb(void *opaque, uint32_t addr, uint32_t val)$/;"	f	file:
pcnet_bcr_readw	pcnet.c	/^uint32_t pcnet_bcr_readw(PCNetState *s, uint32_t rap)$/;"	f
pcnet_bcr_writew	pcnet.c	/^static void pcnet_bcr_writew(PCNetState *s, uint32_t rap, uint32_t val)$/;"	f	file:
pcnet_class_init	pcnet-pci.c	/^static void pcnet_class_init(ObjectClass *klass, void *data)$/;"	f	file:
pcnet_common_init	pcnet.c	/^void pcnet_common_init(DeviceState *dev, PCNetState *s, NetClientInfo *info)$/;"	f
pcnet_csr_readw	pcnet.c	/^static uint32_t pcnet_csr_readw(PCNetState *s, uint32_t rap)$/;"	f	file:
pcnet_csr_writew	pcnet.c	/^static void pcnet_csr_writew(PCNetState *s, uint32_t rap, uint32_t new_value)$/;"	f	file:
pcnet_get_next_poll_time	pcnet.c	/^static inline int64_t pcnet_get_next_poll_time(PCNetState *s, int64_t current_time)$/;"	f	file:
pcnet_h_reset	pcnet.c	/^void pcnet_h_reset(void *opaque)$/;"	f
pcnet_info	pcnet-pci.c	/^static const TypeInfo pcnet_info = {$/;"	v	file:
pcnet_init	pcnet.c	/^static void pcnet_init(PCNetState *s)$/;"	f	file:
pcnet_initblk16	pcnet.c	/^struct pcnet_initblk16 {$/;"	s	file:
pcnet_initblk32	pcnet.c	/^struct pcnet_initblk32 {$/;"	s	file:
pcnet_instance_init	pcnet-pci.c	/^static void pcnet_instance_init(Object *obj)$/;"	f	file:
pcnet_io_ops	pcnet-pci.c	/^static const MemoryRegionOps pcnet_io_ops = {$/;"	v	file:
pcnet_ioport_read	pcnet-pci.c	/^static uint64_t pcnet_ioport_read(void *opaque, hwaddr addr,$/;"	f	file:
pcnet_ioport_readl	pcnet.c	/^uint32_t pcnet_ioport_readl(void *opaque, uint32_t addr)$/;"	f
pcnet_ioport_readw	pcnet.c	/^uint32_t pcnet_ioport_readw(void *opaque, uint32_t addr)$/;"	f
pcnet_ioport_write	pcnet-pci.c	/^static void pcnet_ioport_write(void *opaque, hwaddr addr,$/;"	f	file:
pcnet_ioport_writel	pcnet.c	/^void pcnet_ioport_writel(void *opaque, uint32_t addr, uint32_t val)$/;"	f
pcnet_ioport_writew	pcnet.c	/^void pcnet_ioport_writew(void *opaque, uint32_t addr, uint32_t val)$/;"	f
pcnet_mmio_ops	pcnet-pci.c	/^static const MemoryRegionOps pcnet_mmio_ops = {$/;"	v	file:
pcnet_mmio_readb	pcnet-pci.c	/^static uint32_t pcnet_mmio_readb(void *opaque, hwaddr addr)$/;"	f	file:
pcnet_mmio_readl	pcnet-pci.c	/^static uint32_t pcnet_mmio_readl(void *opaque, hwaddr addr)$/;"	f	file:
pcnet_mmio_readw	pcnet-pci.c	/^static uint32_t pcnet_mmio_readw(void *opaque, hwaddr addr)$/;"	f	file:
pcnet_mmio_writeb	pcnet-pci.c	/^static void pcnet_mmio_writeb(void *opaque, hwaddr addr, uint32_t val)$/;"	f	file:
pcnet_mmio_writel	pcnet-pci.c	/^static void pcnet_mmio_writel(void *opaque, hwaddr addr, uint32_t val)$/;"	f	file:
pcnet_mmio_writew	pcnet-pci.c	/^static void pcnet_mmio_writew(void *opaque, hwaddr addr, uint32_t val)$/;"	f	file:
pcnet_poll	pcnet.c	/^static void pcnet_poll(PCNetState *s)$/;"	f	file:
pcnet_poll_timer	pcnet.c	/^static void pcnet_poll_timer(void *opaque)$/;"	f	file:
pcnet_properties	pcnet-pci.c	/^static Property pcnet_properties[] = {$/;"	v	file:
pcnet_rdra_addr	pcnet.c	/^static inline hwaddr pcnet_rdra_addr(PCNetState *s, int idx)$/;"	f	file:
pcnet_rdte_poll	pcnet.c	/^static void pcnet_rdte_poll(PCNetState *s)$/;"	f	file:
pcnet_receive	pcnet.c	/^ssize_t pcnet_receive(NetClientState *nc, const uint8_t *buf, size_t size_)$/;"	f
pcnet_rmd_load	pcnet.c	/^static inline void pcnet_rmd_load(PCNetState *s, struct pcnet_RMD *rmd,$/;"	f	file:
pcnet_rmd_store	pcnet.c	/^static inline void pcnet_rmd_store(PCNetState *s, struct pcnet_RMD *rmd,$/;"	f	file:
pcnet_s_reset	pcnet.c	/^static void pcnet_s_reset(PCNetState *s)$/;"	f	file:
pcnet_set_link_status	pcnet.c	/^void pcnet_set_link_status(NetClientState *nc)$/;"	f
pcnet_start	pcnet.c	/^static void pcnet_start(PCNetState *s)$/;"	f	file:
pcnet_stop	pcnet.c	/^static void pcnet_stop(PCNetState *s)$/;"	f	file:
pcnet_tdte_poll	pcnet.c	/^static int pcnet_tdte_poll(PCNetState *s)$/;"	f	file:
pcnet_tmd_load	pcnet.c	/^static inline void pcnet_tmd_load(PCNetState *s, struct pcnet_TMD *tmd,$/;"	f	file:
pcnet_tmd_store	pcnet.c	/^static inline void pcnet_tmd_store(PCNetState *s, const struct pcnet_TMD *tmd,$/;"	f	file:
pcnet_transmit	pcnet.c	/^static void pcnet_transmit(PCNetState *s)$/;"	f	file:
pcnet_update_irq	pcnet.c	/^static void pcnet_update_irq(PCNetState *s)$/;"	f	file:
peer_attach	virtio-net.c	/^static int peer_attach(VirtIONet *n, int index)$/;"	f	file:
peer_detach	virtio-net.c	/^static int peer_detach(VirtIONet *n, int index)$/;"	f	file:
peer_has_ufo	virtio-net.c	/^static int peer_has_ufo(VirtIONet *n)$/;"	f	file:
peer_has_vhdr	vmxnet3.c	/^        bool peer_has_vhdr;$/;"	m	struct:__anon101	file:
peer_has_vnet_hdr	virtio-net.c	/^static int peer_has_vnet_hdr(VirtIONet *n)$/;"	f	file:
peer_test_vnet_hdr	virtio-net.c	/^static void peer_test_vnet_hdr(VirtIONet *n)$/;"	f	file:
perm_mac	spapr_llan.c	/^    MACAddr perm_mac;$/;"	m	struct:VIOsPAPRVLANDevice	file:
perm_mac	vmxnet3.c	/^        MACAddr perm_mac;$/;"	m	struct:__anon101	file:
permanent_mac	e1000e_core.h	/^    uint8_t permanent_mac[ETH_ALEN];$/;"	m	struct:E1000Core
phy	e1000e_core.h	/^    uint16_t phy[E1000E_PHY_PAGES][E1000E_PHY_PAGE_SIZE];$/;"	m	struct:E1000Core
phy	etraxfs_eth.c	/^    struct qemu_phy phy;$/;"	m	struct:ETRAXFSEthState	typeref:struct:ETRAXFSEthState::qemu_phy	file:
phy	xilinx_axienet.c	/^    struct PHY phy;$/;"	m	struct:TEMAC	typeref:struct:TEMAC::PHY	file:
phy_addr	milkymist-minimac2.c	/^    uint8_t phy_addr;$/;"	m	struct:MilkymistMinimac2MdioState	file:
phy_advertise	lan9118.c	/^    uint32_t phy_advertise;$/;"	m	struct:__anon123	file:
phy_control	fsl_etsec/etsec.h	/^    uint16_t phy_control;$/;"	m	struct:eTSEC
phy_control	lan9118.c	/^    uint32_t phy_control;$/;"	m	struct:__anon123	file:
phy_id2	e1000.c	/^    uint16_t   phy_id2;$/;"	m	struct:E1000Info	file:
phy_id2	e1000.c	/^    uint16_t phy_id2;$/;"	m	struct:E1000BaseClass	file:
phy_int	lan9118.c	/^    uint32_t phy_int;$/;"	m	struct:__anon123	file:
phy_int_mask	lan9118.c	/^    uint32_t phy_int_mask;$/;"	m	struct:__anon123	file:
phy_model	milkymist-minimac2.c	/^    char *phy_model;$/;"	m	struct:MilkymistMinimac2State	file:
phy_reg	e1000.c	/^    uint16_t phy_reg[0x20];$/;"	m	struct:E1000State_st	file:
phy_reg_init	e1000.c	/^static const uint16_t phy_reg_init[] = {$/;"	v	file:
phy_regcap	e1000.c	/^static const char phy_regcap[0x20] = {$/;"	v	file:
phy_regs	milkymist-minimac2.c	/^    uint16_t phy_regs[R_PHY_MAX];$/;"	m	struct:MilkymistMinimac2State	file:
phy_reset	imx_fec.c	/^static void phy_reset(IMXFECState *s)$/;"	f	file:
phy_reset	lan9118.c	/^static void phy_reset(lan9118_state *s)$/;"	f	file:
phy_status	fsl_etsec/etsec.h	/^    uint16_t phy_status;$/;"	m	struct:eTSEC
phy_status	lan9118.c	/^    uint32_t phy_status;$/;"	m	struct:__anon123	file:
phy_update_irq	imx_fec.c	/^static void phy_update_irq(IMXFECState *s)$/;"	f	file:
phy_update_irq	lan9118.c	/^static void phy_update_irq(lan9118_state *s)$/;"	f	file:
phy_update_link	cadence_gem.c	/^static void phy_update_link(CadenceGEMState *s)$/;"	f	file:
phy_update_link	imx_fec.c	/^static void phy_update_link(IMXFECState *s)$/;"	f	file:
phy_update_link	lan9118.c	/^static void phy_update_link(lan9118_state *s)$/;"	f	file:
phyaddr	etraxfs_eth.c	/^    unsigned int phyaddr;$/;"	m	struct:ETRAXFSEthState	file:
phyc	xilinx_axienet.c	/^    uint32_t phyc;$/;"	m	struct:XilinxAXIEnet	file:
phyreg_writeops	e1000.c	/^static void (*phyreg_writeops[])(E1000State *, int, uint16_t) = {$/;"	v	file:
phys	ne2000.h	/^    uint8_t phys[6]; \/* mac address *\/$/;"	m	struct:NE2000State
phys	rtl8139.c	/^    uint8_t phys[8]; \/* mac address *\/$/;"	m	struct:RTL8139State	file:
phys_mem_read	pcnet.h	/^    void (*phys_mem_read)(void *dma_opaque, hwaddr addr,$/;"	m	struct:PCNetState_st
phys_mem_write	pcnet.h	/^    void (*phys_mem_write)(void *dma_opaque, hwaddr addr,$/;"	m	struct:PCNetState_st
pktsRxError	vmxnet3.h	/^    u64            pktsRxError;$/;"	m	struct:UPT1_RxStats
pktsRxOutOfBuf	vmxnet3.h	/^    u64            pktsRxOutOfBuf;$/;"	m	struct:UPT1_RxStats
pktsTxDiscard	vmxnet3.h	/^    u64            pktsTxDiscard;$/;"	m	struct:UPT1_TxStats
pktsTxError	vmxnet3.h	/^    u64            pktsTxError;$/;"	m	struct:UPT1_TxStats
pluginConfDesc	vmxnet3.h	/^    struct Vmxnet3_VariableLenConfDesc    pluginConfDesc;$/;"	m	struct:Vmxnet3_DSDevRead	typeref:struct:Vmxnet3_DSDevRead::Vmxnet3_VariableLenConfDesc
pmConfDesc	vmxnet3.h	/^    struct Vmxnet3_VariableLenConfDesc    pmConfDesc;$/;"	m	struct:Vmxnet3_DSDevRead	typeref:struct:Vmxnet3_DSDevRead::Vmxnet3_VariableLenConfDesc
pmt_ctrl	lan9118.c	/^    uint32_t pmt_ctrl;$/;"	m	struct:__anon123	file:
pmt_irq	xgmac.c	/^    qemu_irq pmt_irq;$/;"	m	struct:XgmacState	file:
poll_timer	pcnet.h	/^    QEMUTimer *poll_timer;$/;"	m	struct:PCNetState_st
pop_vlan	rocker/rocker_of_dpa.c	/^            uint8_t pop_vlan;$/;"	m	struct:of_dpa_group::__anon70::__anon71	file:
popts	e1000_regs.h	/^            uint8_t popts;      \/* Packet Options *\/$/;"	m	struct:e1000_data_desc::__anon28::__anon29
power_management	eepro100.c	/^    bool power_management;$/;"	m	struct:__anon75	file:
pport	rocker/rocker_fp.c	/^    uint32_t pport;$/;"	m	struct:fp_port	file:
preamble_sfd	milkymist-minimac2.c	/^static const uint8_t preamble_sfd[] = {$/;"	v	file:
print_bd	fsl_etsec/rings.c	/^static void print_bd(eTSEC_rxtx_bd bd, int mode, uint32_t index)$/;"	f	file:
print_gem_tx_desc	cadence_gem.c	/^static inline void print_gem_tx_desc(unsigned *desc, uint8_t queue)$/;"	f	file:
print_rx_bd_flags	fsl_etsec/rings.c	/^static void print_rx_bd_flags(uint16_t flags)$/;"	f	file:
print_tx_bd_flags	fsl_etsec/rings.c	/^static void print_tx_bd_flags(uint16_t flags)$/;"	f	file:
priority	rocker/rocker_of_dpa.c	/^    uint32_t priority;$/;"	m	struct:of_dpa_flow	file:
process_tx_bd	fsl_etsec/rings.c	/^static void process_tx_bd(eTSEC         *etsec,$/;"	f	file:
process_tx_desc	e1000.c	/^process_tx_desc(E1000State *s, struct e1000_tx_desc *dp)$/;"	f	file:
process_tx_fcb	fsl_etsec/rings.c	/^static void process_tx_fcb(eTSEC *etsec)$/;"	f	file:
prom	dp8393x.c	/^    MemoryRegion prom;$/;"	m	struct:dp8393xState	file:
prom	pcnet.h	/^    uint8_t prom[16];$/;"	m	struct:PCNetState_st
prom9346_decode_command	rtl8139.c	/^static void prom9346_decode_command(EEprom9346 *eeprom, uint8_t command)$/;"	f	file:
prom9346_get_wire	rtl8139.c	/^static int prom9346_get_wire(RTL8139State *s)$/;"	f	file:
prom9346_set_wire	rtl8139.c	/^static void prom9346_set_wire(RTL8139State *s, int eecs, int eesk, int eedi)$/;"	f	file:
prom9346_shift_clock	rtl8139.c	/^static void prom9346_shift_clock(EEprom9346 *eeprom)$/;"	f	file:
props	e1000.c	/^        e1000x_txd_props props;$/;"	m	struct:E1000State_st::e1000_tx	file:
props	e1000e_core.h	/^        e1000x_txd_props props;$/;"	m	struct:E1000Core::e1000e_tx
proto	rocker/rocker_of_dpa.c	/^        uint8_t proto;               \/* IP protocol or ARP opcode *\/$/;"	m	struct:of_dpa_flow_key::__anon56	file:
ptimer	fsl_etsec/etsec.h	/^    struct ptimer_state *ptimer;$/;"	m	struct:eTSEC	typeref:struct:eTSEC::ptimer_state
ptr	smc91c111.c	/^    uint16_t ptr;$/;"	m	struct:__anon96	file:
putreg	e1000.c	1248;"	d	file:
putsum	e1000.c	/^putsum(uint8_t *data, uint32_t n, uint32_t sloc, uint32_t css, uint32_t cse)$/;"	f	file:
qdev_e1000_reset	e1000.c	/^static void qdev_e1000_reset(DeviceState *dev)$/;"	f	file:
qdev_open_eth_reset	opencores_eth.c	/^static void qdev_open_eth_reset(DeviceState *dev)$/;"	f	file:
qemu_ether_header	pcnet.c	/^struct qemu_ether_header {$/;"	s	file:
qemu_mdio	etraxfs_eth.c	/^struct qemu_mdio$/;"	s	file:
qemu_phy	etraxfs_eth.c	/^struct qemu_phy$/;"	s	file:
qmp_query_rocker	rocker/qmp-norocker.c	/^RockerSwitch *qmp_query_rocker(const char *name, Error **errp)$/;"	f
qmp_query_rocker	rocker/rocker.c	/^RockerSwitch *qmp_query_rocker(const char *name, Error **errp)$/;"	f
qmp_query_rocker_of_dpa_flows	rocker/qmp-norocker.c	/^RockerOfDpaFlowList *qmp_query_rocker_of_dpa_flows(const char *name,$/;"	f
qmp_query_rocker_of_dpa_flows	rocker/rocker_of_dpa.c	/^RockerOfDpaFlowList *qmp_query_rocker_of_dpa_flows(const char *name,$/;"	f
qmp_query_rocker_of_dpa_groups	rocker/qmp-norocker.c	/^RockerOfDpaGroupList *qmp_query_rocker_of_dpa_groups(const char *name,$/;"	f
qmp_query_rocker_of_dpa_groups	rocker/rocker_of_dpa.c	/^RockerOfDpaGroupList *qmp_query_rocker_of_dpa_groups(const char *name,$/;"	f
qmp_query_rocker_ports	rocker/qmp-norocker.c	/^RockerPortList *qmp_query_rocker_ports(const char *name, Error **errp)$/;"	f
qmp_query_rocker_ports	rocker/rocker.c	/^RockerPortList *qmp_query_rocker_ports(const char *name, Error **errp)$/;"	f
queue	e1000e_core.c	/^    uint32_t queue;$/;"	m	struct:E1000E_RSSInfo_st	file:
queueDescLen	vmxnet3.h	/^    __le32        queueDescLen; \/* queue desc. table len in bytes *\/$/;"	m	struct:Vmxnet3_MiscConf
queueDescPA	vmxnet3.h	/^    __le64        queueDescPA;  \/* queue descriptor table PA *\/$/;"	m	struct:Vmxnet3_MiscConf
qword	vmxnet3.h	/^    __le64                qword[2];$/;"	m	union:Vmxnet3_GenericDesc
r	rocker/rocker_desc.c	/^    Rocker *r;$/;"	m	struct:desc_ring	file:
r	rocker/rocker_fp.c	/^    Rocker *r;$/;"	m	struct:fp_port	file:
r	rocker/rocker_world.c	/^    Rocker *r;$/;"	m	struct:world	file:
radv	e1000e_core.h	/^    E1000IntrDelayTimer radv;$/;"	m	struct:E1000Core
raid	e1000e_core.h	/^    E1000IntrDelayTimer raid;$/;"	m	struct:E1000Core
rap	pcnet.h	/^    int rap, isr, lnkst;$/;"	m	struct:PCNetState_st
raw	net_tx_pkt.c	/^    struct iovec *raw;$/;"	m	struct:NetTxPkt	typeref:struct:NetTxPkt::iovec	file:
raw_frags	net_tx_pkt.c	/^    uint32_t raw_frags;$/;"	m	struct:NetTxPkt	file:
rbadr	pcnet.c	/^    uint32_t rbadr;$/;"	m	struct:pcnet_RMD	file:
rcd	vmxnet3.h	/^    struct Vmxnet3_RxCompDesc    rcd;$/;"	m	union:Vmxnet3_GenericDesc	typeref:struct:Vmxnet3_GenericDesc::Vmxnet3_RxCompDesc
rcnt	ne2000.h	/^    uint16_t rcnt;$/;"	m	struct:NE2000State
rcr	mcf_fec.c	/^    uint32_t rcr;$/;"	m	struct:__anon36	file:
rcr	smc91c111.c	/^    uint16_t rcr;$/;"	m	struct:__anon96	file:
rctl	stellaris_enet.c	/^    uint32_t rctl;$/;"	m	struct:__anon125	file:
rcv_tco_frames	eepro100.c	/^    uint16_t xmt_tco_frames, rcv_tco_frames;$/;"	m	struct:__anon81	file:
rcw	xilinx_axienet.c	/^    uint32_t rcw[2];$/;"	m	struct:XilinxAXIEnet	file:
rdra	pcnet.c	/^    uint32_t rdra;$/;"	m	struct:pcnet_initblk16	file:
rdra	pcnet.c	/^    uint32_t rdra;$/;"	m	struct:pcnet_initblk32	file:
rdra	pcnet.h	/^    uint32_t rdra, tdra;$/;"	m	struct:PCNetState_st
rdtr	e1000e_core.h	/^    E1000IntrDelayTimer rdtr;$/;"	m	struct:E1000Core
read	e1000_regs.h	/^    } read;$/;"	m	union:e1000_rx_desc_extended	typeref:struct:e1000_rx_desc_extended::__anon7
read	e1000_regs.h	/^    } read;$/;"	m	union:e1000_rx_desc_packet_split	typeref:struct:e1000_rx_desc_packet_split::__anon13
read	etraxfs_eth.c	/^    unsigned int (*read)(struct qemu_phy *phy, unsigned int req);$/;"	m	struct:qemu_phy	file:
read	xilinx_axienet.c	/^    unsigned int (*read)(struct PHY *phy, unsigned int req);$/;"	m	struct:PHY	file:
read_buffer_descriptor	fsl_etsec/rings.c	/^static void read_buffer_descriptor(eTSEC         *etsec,$/;"	f	file:
read_cb	eepro100.c	/^static void read_cb(EEPRO100State *s)$/;"	f	file:
read_long	lan9118.c	/^    uint32_t read_long;$/;"	m	struct:__anon123	file:
read_word_n	lan9118.c	/^    uint32_t read_word_n;$/;"	m	struct:__anon123	file:
read_word_prev_offset	lan9118.c	/^    uint32_t read_word_prev_offset;$/;"	m	struct:__anon123	file:
reading	e1000.c	/^        uint16_t reading;$/;"	m	struct:E1000State_st::__anon89	file:
receive_filter	e1000.c	/^receive_filter(E1000State *s, const uint8_t *buf, int size)$/;"	f	file:
receive_filter	virtio-net.c	/^static int receive_filter(VirtIONet *n, const uint8_t *buf, int size)$/;"	f	file:
receive_header	virtio-net.c	/^static void receive_header(VirtIONet *n, const struct iovec *iov, int iov_cnt,$/;"	f	file:
refresh_time	rocker/rocker_of_dpa.c	/^        int64_t refresh_time;$/;"	m	struct:of_dpa_flow::__anon69	file:
reg2name	eepro100.c	/^static const char *reg2name(uint8_t reg)$/;"	f	file:
reg_addr	milkymist-minimac2.c	/^    uint8_t reg_addr;$/;"	m	struct:MilkymistMinimac2MdioState	file:
reg_io	opencores_eth.c	/^    MemoryRegion reg_io;$/;"	m	struct:OpenEthState	file:
reg_names	dp8393x.c	/^static const char* reg_names[] = {$/;"	v	file:
regname	eepro100.c	/^static char *regname(uint32_t addr)$/;"	f	file:
regname	rocker/rocker.c	925;"	d	file:
regs	dp8393x.c	/^    uint16_t regs[0x40];$/;"	m	struct:dp8393xState	file:
regs	etraxfs_eth.c	/^    uint32_t regs[32];$/;"	m	struct:qemu_phy	file:
regs	etraxfs_eth.c	/^    uint32_t regs[FS_ETH_MAX_REGS];$/;"	m	struct:ETRAXFSEthState	file:
regs	fsl_etsec/etsec.h	/^    eTSEC_Register regs[ETSEC_REG_NUMBER];$/;"	m	struct:eTSEC
regs	milkymist-minimac2.c	/^    uint32_t regs[R_MAX];$/;"	m	struct:MilkymistMinimac2State	file:
regs	opencores_eth.c	/^    uint16_t regs[MII_REG_MAX];$/;"	m	struct:Mii	file:
regs	opencores_eth.c	/^    uint32_t regs[REG_MAX];$/;"	m	struct:OpenEthState	file:
regs	xgmac.c	/^    uint32_t regs[R_MAX];$/;"	m	struct:XgmacState	file:
regs	xilinx_axienet.c	/^        uint32_t regs[4];$/;"	m	union:XilinxAXIEnet::__anon133	file:
regs	xilinx_axienet.c	/^    uint32_t regs[32];$/;"	m	struct:PHY	file:
regs	xilinx_axienet.c	/^    uint32_t regs[R_MAX];$/;"	m	struct:XilinxAXIEnet	file:
regs	xilinx_ethlite.c	/^    uint32_t regs[R_MAX];$/;"	m	struct:xlx_ethlite	file:
regs_region	milkymist-minimac2.c	/^    MemoryRegion regs_region;$/;"	m	struct:MilkymistMinimac2State	file:
req	etraxfs_eth.c	/^    unsigned int req;$/;"	m	struct:qemu_mdio	file:
req	xilinx_axienet.c	/^    unsigned int req;$/;"	m	struct:MDIOBus	file:
res	pcnet.c	/^    uint32_t res;$/;"	m	struct:pcnet_RMD	file:
res	pcnet.c	/^    uint32_t res;$/;"	m	struct:pcnet_TMD	file:
res	xgmac.c	/^    uint32_t res[3];$/;"	m	struct:desc	file:
reserved	e1000_regs.h	/^        uint64_t reserved;$/;"	m	struct:e1000_rx_desc_extended::__anon7
reserved	e1000_regs.h	/^        uint64_t reserved;$/;"	m	struct:e1000_rx_desc_packet_split::__anon14
reserved	eepro100.c	/^    uint32_t reserved[4];$/;"	m	struct:__anon81	file:
reserved	vmxnet3.h	/^    __le32              reserved[5];$/;"	m	struct:Vmxnet3_DriverShared
reserved	vmxnet3.h	/^    __le32        reserved[2];$/;"	m	struct:Vmxnet3_IntrConf
reserved	vmxnet3.h	/^    __le32        reserved[4];$/;"	m	struct:Vmxnet3_MiscConf
reserved	vmxnet3.h	/^    __le64        reserved;$/;"	m	struct:Vmxnet3_RxQueueConf
reserved	vmxnet3.h	/^    __le64        reserved;$/;"	m	struct:Vmxnet3_RxQueueCtrl
reserved	vmxnet3.h	/^    __le64        reserved;$/;"	m	struct:Vmxnet3_TxQueueConf
reserved	vmxnet3.h	/^    __le64        reserved;$/;"	m	struct:Vmxnet3_TxQueueCtrl
reset	fsl_etsec/registers.h	/^    uint32_t                         reset;$/;"	m	struct:eTSEC_Register_Definition
revision	e1000.c	/^    uint8_t    revision;$/;"	m	struct:E1000Info	file:
revision	eepro100.c	/^    uint8_t revision;$/;"	m	struct:__anon75	file:
rfsr	mcf_fec.c	/^    uint32_t rfsr;$/;"	m	struct:__anon36	file:
ring	rocker/rocker_desc.c	/^    DescRing *ring;$/;"	m	struct:desc_info	file:
ring_pump	rocker/rocker_desc.c	/^static bool ring_pump(DescRing *ring)$/;"	f	file:
rings	rocker/rocker.c	/^    DescRing **rings;$/;"	m	struct:rocker	file:
ris	stellaris_enet.c	/^    uint32_t ris;$/;"	m	struct:__anon125	file:
rlen	pcnet.c	/^    uint8_t rlen;$/;"	m	struct:pcnet_initblk32	file:
rocker	rocker/rocker.c	/^struct rocker {$/;"	s	file:
rocker_addr_is_desc_reg	rocker/rocker.c	/^static bool rocker_addr_is_desc_reg(Rocker *r, hwaddr addr)$/;"	f	file:
rocker_class_init	rocker/rocker.c	/^static void rocker_class_init(ObjectClass *klass, void *data)$/;"	f	file:
rocker_control	rocker/rocker.c	/^static void rocker_control(Rocker *r, uint32_t val)$/;"	f	file:
rocker_desc	rocker/rocker_hw.h	/^typedef struct rocker_desc {$/;"	s
rocker_event_link_changed	rocker/rocker.c	/^int rocker_event_link_changed(Rocker *r, uint32_t pport, bool link_up)$/;"	f
rocker_event_mac_vlan_seen	rocker/rocker.c	/^int rocker_event_mac_vlan_seen(Rocker *r, uint32_t pport, uint8_t *addr,$/;"	f
rocker_find	rocker/rocker.c	/^Rocker *rocker_find(const char *name)$/;"	f
rocker_fp_ports	rocker/rocker.c	/^uint32_t rocker_fp_ports(Rocker *r)$/;"	f
rocker_get_pport_by_tx_ring	rocker/rocker.c	/^static uint32_t rocker_get_pport_by_tx_ring(Rocker *r,$/;"	f	file:
rocker_get_rx_ring_by_pport	rocker/rocker.c	/^static DescRing *rocker_get_rx_ring_by_pport(Rocker *r,$/;"	f	file:
rocker_get_world	rocker/rocker.c	/^World *rocker_get_world(Rocker *r, enum rocker_world_type type)$/;"	f
rocker_info	rocker/rocker.c	/^static const TypeInfo rocker_info = {$/;"	v	file:
rocker_int64_equal	rocker/rocker_of_dpa.c	/^static gboolean rocker_int64_equal(gconstpointer v1, gconstpointer v2)$/;"	f	file:
rocker_int64_hash	rocker/rocker_of_dpa.c	/^static guint rocker_int64_hash(gconstpointer v)$/;"	f	file:
rocker_io_readl	rocker/rocker.c	/^static uint32_t rocker_io_readl(void *opaque, hwaddr addr)$/;"	f	file:
rocker_io_readq	rocker/rocker.c	/^static uint64_t rocker_io_readq(void *opaque, hwaddr addr)$/;"	f	file:
rocker_io_writel	rocker/rocker.c	/^static void rocker_io_writel(void *opaque, hwaddr addr, uint32_t val)$/;"	f	file:
rocker_io_writeq	rocker/rocker.c	/^static void rocker_io_writeq(void *opaque, hwaddr addr, uint64_t val)$/;"	f	file:
rocker_mmio_ops	rocker/rocker.c	/^static const MemoryRegionOps rocker_mmio_ops = {$/;"	v	file:
rocker_mmio_read	rocker/rocker.c	/^static uint64_t rocker_mmio_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
rocker_mmio_write	rocker/rocker.c	/^static void rocker_mmio_write(void *opaque, hwaddr addr, uint64_t val,$/;"	f	file:
rocker_msix_init	rocker/rocker.c	/^static int rocker_msix_init(Rocker *r)$/;"	f	file:
rocker_msix_irq	rocker/rocker.c	/^static void rocker_msix_irq(Rocker *r, unsigned vector)$/;"	f	file:
rocker_msix_uninit	rocker/rocker.c	/^static void rocker_msix_uninit(Rocker *r)$/;"	f	file:
rocker_msix_vectors_unuse	rocker/rocker.c	/^static void rocker_msix_vectors_unuse(Rocker *r,$/;"	f	file:
rocker_msix_vectors_use	rocker/rocker.c	/^static int rocker_msix_vectors_use(Rocker *r,$/;"	f	file:
rocker_of_dpa_group_type	rocker/rocker_hw.h	/^enum rocker_of_dpa_group_type {$/;"	g
rocker_of_dpa_overlay_type	rocker/rocker_hw.h	/^enum rocker_of_dpa_overlay_type {$/;"	g
rocker_of_dpa_table_id	rocker/rocker_hw.h	/^enum rocker_of_dpa_table_id {$/;"	g
rocker_pci_ring_count	rocker/rocker.c	/^static int rocker_pci_ring_count(Rocker *r)$/;"	f	file:
rocker_port_eg	rocker/rocker.c	/^int rocker_port_eg(Rocker *r, uint32_t pport,$/;"	f
rocker_port_phys_enable_read	rocker/rocker.c	/^static uint64_t rocker_port_phys_enable_read(Rocker *r)$/;"	f	file:
rocker_port_phys_enable_write	rocker/rocker.c	/^static void rocker_port_phys_enable_write(Rocker *r, uint64_t new)$/;"	f	file:
rocker_port_phys_link_status	rocker/rocker.c	/^static uint64_t rocker_port_phys_link_status(Rocker *r)$/;"	f	file:
rocker_properties	rocker/rocker.c	/^static Property rocker_properties[] = {$/;"	v	file:
rocker_reg_name	rocker/rocker.c	/^static const char *rocker_reg_name(void *opaque, hwaddr addr)$/;"	f	file:
rocker_register_types	rocker/rocker.c	/^static void rocker_register_types(void)$/;"	f	file:
rocker_reset	rocker/rocker.c	/^static void rocker_reset(DeviceState *dev)$/;"	f	file:
rocker_test_dma_ctrl	rocker/rocker.c	/^static void rocker_test_dma_ctrl(Rocker *r, uint32_t val)$/;"	f	file:
rocker_tlv	rocker/rocker_hw.h	/^typedef struct rocker_tlv {$/;"	s
rocker_tlv_data	rocker/rocker_tlv.h	/^static inline void *rocker_tlv_data(const RockerTlv *tlv)$/;"	f
rocker_tlv_for_each	rocker/rocker_tlv.h	49;"	d
rocker_tlv_for_each_nested	rocker/rocker_tlv.h	54;"	d
rocker_tlv_get_le16	rocker/rocker_tlv.h	/^static inline uint16_t rocker_tlv_get_le16(const RockerTlv *tlv)$/;"	f
rocker_tlv_get_le32	rocker/rocker_tlv.h	/^static inline uint32_t rocker_tlv_get_le32(const RockerTlv *tlv)$/;"	f
rocker_tlv_get_le64	rocker/rocker_tlv.h	/^static inline uint64_t rocker_tlv_get_le64(const RockerTlv *tlv)$/;"	f
rocker_tlv_get_u16	rocker/rocker_tlv.h	/^static inline uint16_t rocker_tlv_get_u16(const RockerTlv *tlv)$/;"	f
rocker_tlv_get_u32	rocker/rocker_tlv.h	/^static inline uint32_t rocker_tlv_get_u32(const RockerTlv *tlv)$/;"	f
rocker_tlv_get_u64	rocker/rocker_tlv.h	/^static inline uint64_t rocker_tlv_get_u64(const RockerTlv *tlv)$/;"	f
rocker_tlv_get_u8	rocker/rocker_tlv.h	/^static inline uint8_t rocker_tlv_get_u8(const RockerTlv *tlv)$/;"	f
rocker_tlv_len	rocker/rocker_tlv.h	/^static inline int rocker_tlv_len(const RockerTlv *tlv)$/;"	f
rocker_tlv_nest_cancel	rocker/rocker_tlv.h	/^static inline void rocker_tlv_nest_cancel(char *buf, int *buf_pos,$/;"	f
rocker_tlv_nest_end	rocker/rocker_tlv.h	/^static inline void rocker_tlv_nest_end(char *buf, int *buf_pos,$/;"	f
rocker_tlv_nest_start	rocker/rocker_tlv.h	/^static inline RockerTlv *rocker_tlv_nest_start(char *buf, int *buf_pos,$/;"	f
rocker_tlv_next	rocker/rocker_tlv.h	/^static inline RockerTlv *rocker_tlv_next(const RockerTlv *tlv, int *remaining)$/;"	f
rocker_tlv_ok	rocker/rocker_tlv.h	/^static inline int rocker_tlv_ok(const RockerTlv *tlv, int remaining)$/;"	f
rocker_tlv_padlen	rocker/rocker_tlv.h	/^static inline int rocker_tlv_padlen(int payload)$/;"	f
rocker_tlv_parse	rocker/rocker_tlv.h	/^static inline void rocker_tlv_parse(RockerTlv **tb, int maxtype,$/;"	f
rocker_tlv_parse_nested	rocker/rocker_tlv.h	/^static inline void rocker_tlv_parse_nested(RockerTlv **tb, int maxtype,$/;"	f
rocker_tlv_put	rocker/rocker_tlv.h	/^static inline void rocker_tlv_put(char *buf, int *buf_pos,$/;"	f
rocker_tlv_put_iov	rocker/rocker_tlv.h	/^static inline void rocker_tlv_put_iov(char *buf, int *buf_pos,$/;"	f
rocker_tlv_put_le16	rocker/rocker_tlv.h	/^static inline void rocker_tlv_put_le16(char *buf, int *buf_pos,$/;"	f
rocker_tlv_put_le32	rocker/rocker_tlv.h	/^static inline void rocker_tlv_put_le32(char *buf, int *buf_pos,$/;"	f
rocker_tlv_put_le64	rocker/rocker_tlv.h	/^static inline void rocker_tlv_put_le64(char *buf, int *buf_pos,$/;"	f
rocker_tlv_put_u16	rocker/rocker_tlv.h	/^static inline void rocker_tlv_put_u16(char *buf, int *buf_pos,$/;"	f
rocker_tlv_put_u32	rocker/rocker_tlv.h	/^static inline void rocker_tlv_put_u32(char *buf, int *buf_pos,$/;"	f
rocker_tlv_put_u64	rocker/rocker_tlv.h	/^static inline void rocker_tlv_put_u64(char *buf, int *buf_pos,$/;"	f
rocker_tlv_put_u8	rocker/rocker_tlv.h	/^static inline void rocker_tlv_put_u8(char *buf, int *buf_pos,$/;"	f
rocker_tlv_size	rocker/rocker_tlv.h	/^static inline int rocker_tlv_size(int payload)$/;"	f
rocker_tlv_start	rocker/rocker_tlv.h	/^static inline RockerTlv *rocker_tlv_start(char *buf, int buf_pos)$/;"	f
rocker_tlv_total_size	rocker/rocker_tlv.h	/^static inline int rocker_tlv_total_size(int payload)$/;"	f
rocker_tlv_type	rocker/rocker_tlv.h	/^static inline int rocker_tlv_type(const RockerTlv *tlv)$/;"	f
rocker_vmsd	rocker/rocker.c	/^static const VMStateDescription rocker_vmsd = {$/;"	v	file:
rocker_world_type	rocker/rocker_world.h	/^enum rocker_world_type {$/;"	g
rocker_world_type_by_name	rocker/rocker.c	/^static World *rocker_world_type_by_name(Rocker *r, const char *name)$/;"	f	file:
rqID	vmxnet3.h	/^    u32        rqID:10;      \/* rx queue\/ring ID *\/$/;"	m	struct:Vmxnet3_RxCompDesc
rsar	ne2000.h	/^    uint32_t rsar;$/;"	m	struct:NE2000State
rsr	ne2000.h	/^    uint8_t rsr;$/;"	m	struct:NE2000State
rss	e1000_regs.h	/^                uint32_t rss;          \/* RSS Hash *\/$/;"	m	union:e1000_rx_desc_packet_split::__anon14::__anon15::__anon16
rss	e1000_regs.h	/^                uint32_t rss;       \/* RSS Hash *\/$/;"	m	union:e1000_rx_desc_extended::__anon8::__anon9::__anon10
rssConfDesc	vmxnet3.h	/^    struct Vmxnet3_VariableLenConfDesc    rssConfDesc;$/;"	m	struct:Vmxnet3_DSDevRead	typeref:struct:Vmxnet3_DSDevRead::Vmxnet3_VariableLenConfDesc
rssHash	vmxnet3.h	/^    __le32        rssHash;      \/* RSS hash value *\/$/;"	m	struct:Vmxnet3_RxCompDesc
rssType	vmxnet3.h	/^    u32        rssType:4;    \/* RSS hash type used *\/$/;"	m	struct:Vmxnet3_RxCompDesc
rsvd	rocker/rocker_hw.h	/^    __le16 rsvd;$/;"	m	struct:rocker_tlv
rsvd	rocker/rocker_hw.h	/^    __le16 rsvd[5];   \/* pad to 32 bytes *\/$/;"	m	struct:rocker_desc
rsvd	vmxnet3.h	/^    u32        rsvd:15;$/;"	m	struct:Vmxnet3_RxDesc
rsvd	vmxnet3.h	/^    u32        rsvd:24;$/;"	m	struct:Vmxnet3_TxCompDesc
rsvd	vmxnet3.h	/^    u32 rsvd:1;$/;"	m	struct:Vmxnet3_TxDesc
rtl8139_BasicModeCtrl_read	rtl8139.c	/^static uint32_t rtl8139_BasicModeCtrl_read(RTL8139State *s)$/;"	f	file:
rtl8139_BasicModeCtrl_write	rtl8139.c	/^static void rtl8139_BasicModeCtrl_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_BasicModeStatus_read	rtl8139.c	/^static uint32_t rtl8139_BasicModeStatus_read(RTL8139State *s)$/;"	f	file:
rtl8139_BasicModeStatus_write	rtl8139.c	/^static void rtl8139_BasicModeStatus_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_CSCR_read	rtl8139.c	/^static uint16_t rtl8139_CSCR_read(RTL8139State *s)$/;"	f	file:
rtl8139_Cfg9346_read	rtl8139.c	/^static uint32_t rtl8139_Cfg9346_read(RTL8139State *s)$/;"	f	file:
rtl8139_Cfg9346_write	rtl8139.c	/^static void rtl8139_Cfg9346_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_ChipCmd_read	rtl8139.c	/^static uint32_t rtl8139_ChipCmd_read(RTL8139State *s)$/;"	f	file:
rtl8139_ChipCmd_write	rtl8139.c	/^static void rtl8139_ChipCmd_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_Config0_read	rtl8139.c	/^static uint32_t rtl8139_Config0_read(RTL8139State *s)$/;"	f	file:
rtl8139_Config0_write	rtl8139.c	/^static void rtl8139_Config0_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_Config1_read	rtl8139.c	/^static uint32_t rtl8139_Config1_read(RTL8139State *s)$/;"	f	file:
rtl8139_Config1_write	rtl8139.c	/^static void rtl8139_Config1_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_Config3_read	rtl8139.c	/^static uint32_t rtl8139_Config3_read(RTL8139State *s)$/;"	f	file:
rtl8139_Config3_write	rtl8139.c	/^static void rtl8139_Config3_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_Config4_read	rtl8139.c	/^static uint32_t rtl8139_Config4_read(RTL8139State *s)$/;"	f	file:
rtl8139_Config4_write	rtl8139.c	/^static void rtl8139_Config4_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_Config5_read	rtl8139.c	/^static uint32_t rtl8139_Config5_read(RTL8139State *s)$/;"	f	file:
rtl8139_Config5_write	rtl8139.c	/^static void rtl8139_Config5_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_CpCmd_read	rtl8139.c	/^static uint32_t rtl8139_CpCmd_read(RTL8139State *s)$/;"	f	file:
rtl8139_CpCmd_write	rtl8139.c	/^static void rtl8139_CpCmd_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_IntrMask_read	rtl8139.c	/^static uint32_t rtl8139_IntrMask_read(RTL8139State *s)$/;"	f	file:
rtl8139_IntrMask_write	rtl8139.c	/^static void rtl8139_IntrMask_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_IntrMitigate_read	rtl8139.c	/^static uint32_t rtl8139_IntrMitigate_read(RTL8139State *s)$/;"	f	file:
rtl8139_IntrMitigate_write	rtl8139.c	/^static void rtl8139_IntrMitigate_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_IntrStatus_read	rtl8139.c	/^static uint32_t rtl8139_IntrStatus_read(RTL8139State *s)$/;"	f	file:
rtl8139_IntrStatus_write	rtl8139.c	/^static void rtl8139_IntrStatus_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_MultiIntr_read	rtl8139.c	/^static uint32_t rtl8139_MultiIntr_read(RTL8139State *s)$/;"	f	file:
rtl8139_MultiIntr_write	rtl8139.c	/^static void rtl8139_MultiIntr_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_RxBufAddr_read	rtl8139.c	/^static uint32_t rtl8139_RxBufAddr_read(RTL8139State *s)$/;"	f	file:
rtl8139_RxBufPtr_read	rtl8139.c	/^static uint32_t rtl8139_RxBufPtr_read(RTL8139State *s)$/;"	f	file:
rtl8139_RxBufPtr_write	rtl8139.c	/^static void rtl8139_RxBufPtr_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_RxBuf_read	rtl8139.c	/^static uint32_t rtl8139_RxBuf_read(RTL8139State *s)$/;"	f	file:
rtl8139_RxBuf_write	rtl8139.c	/^static void rtl8139_RxBuf_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_RxBufferEmpty	rtl8139.c	/^static int rtl8139_RxBufferEmpty(RTL8139State *s)$/;"	f	file:
rtl8139_RxConfig_read	rtl8139.c	/^static uint32_t rtl8139_RxConfig_read(RTL8139State *s)$/;"	f	file:
rtl8139_RxConfig_write	rtl8139.c	/^static void rtl8139_RxConfig_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_RxWrap	rtl8139.c	/^static int rtl8139_RxWrap(RTL8139State *s)$/;"	f	file:
rtl8139_TSAD_read	rtl8139.c	/^static uint16_t rtl8139_TSAD_read(RTL8139State *s)$/;"	f	file:
rtl8139_TxAddr_read	rtl8139.c	/^static uint32_t rtl8139_TxAddr_read(RTL8139State *s, uint32_t txAddrOffset)$/;"	f	file:
rtl8139_TxAddr_write	rtl8139.c	/^static void rtl8139_TxAddr_write(RTL8139State *s, uint32_t txAddrOffset, uint32_t val)$/;"	f	file:
rtl8139_TxConfig_read	rtl8139.c	/^static uint32_t rtl8139_TxConfig_read(RTL8139State *s)$/;"	f	file:
rtl8139_TxConfig_write	rtl8139.c	/^static void rtl8139_TxConfig_write(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_TxConfig_writeb	rtl8139.c	/^static void rtl8139_TxConfig_writeb(RTL8139State *s, uint32_t val)$/;"	f	file:
rtl8139_TxStatus_TxAddr_read	rtl8139.c	/^static uint32_t rtl8139_TxStatus_TxAddr_read(RTL8139State *s, uint32_t regs[],$/;"	f	file:
rtl8139_TxStatus_write	rtl8139.c	/^static void rtl8139_TxStatus_write(RTL8139State *s, uint32_t txRegOffset, uint32_t val)$/;"	f	file:
rtl8139_addr64	rtl8139.c	/^static inline dma_addr_t rtl8139_addr64(uint32_t low, uint32_t high)$/;"	f	file:
rtl8139_can_receive	rtl8139.c	/^static int rtl8139_can_receive(NetClientState *nc)$/;"	f	file:
rtl8139_class_init	rtl8139.c	/^static void rtl8139_class_init(ObjectClass *klass, void *data)$/;"	f	file:
rtl8139_config_writable	rtl8139.c	/^static int rtl8139_config_writable(RTL8139State *s)$/;"	f	file:
rtl8139_cp_receiver_enabled	rtl8139.c	/^static int rtl8139_cp_receiver_enabled(RTL8139State *s)$/;"	f	file:
rtl8139_cp_rx_valid	rtl8139.c	/^static bool rtl8139_cp_rx_valid(RTL8139State *s)$/;"	f	file:
rtl8139_cp_transmitter_enabled	rtl8139.c	/^static int rtl8139_cp_transmitter_enabled(RTL8139State *s)$/;"	f	file:
rtl8139_cplus_transmit	rtl8139.c	/^static void rtl8139_cplus_transmit(RTL8139State *s)$/;"	f	file:
rtl8139_cplus_transmit_one	rtl8139.c	/^static int rtl8139_cplus_transmit_one(RTL8139State *s)$/;"	f	file:
rtl8139_do_receive	rtl8139.c	/^static ssize_t rtl8139_do_receive(NetClientState *nc, const uint8_t *buf, size_t size_, int do_interrupt)$/;"	f	file:
rtl8139_hotplug_ready_needed	rtl8139.c	/^static bool rtl8139_hotplug_ready_needed(void *opaque)$/;"	f	file:
rtl8139_info	rtl8139.c	/^static const TypeInfo rtl8139_info = {$/;"	v	file:
rtl8139_instance_init	rtl8139.c	/^static void rtl8139_instance_init(Object *obj)$/;"	f	file:
rtl8139_io_ops	rtl8139.c	/^static const MemoryRegionOps rtl8139_io_ops = {$/;"	v	file:
rtl8139_io_readb	rtl8139.c	/^static uint32_t rtl8139_io_readb(void *opaque, uint8_t addr)$/;"	f	file:
rtl8139_io_readl	rtl8139.c	/^static uint32_t rtl8139_io_readl(void *opaque, uint8_t addr)$/;"	f	file:
rtl8139_io_readw	rtl8139.c	/^static uint32_t rtl8139_io_readw(void *opaque, uint8_t addr)$/;"	f	file:
rtl8139_io_writeb	rtl8139.c	/^static void rtl8139_io_writeb(void *opaque, uint8_t addr, uint32_t val)$/;"	f	file:
rtl8139_io_writel	rtl8139.c	/^static void rtl8139_io_writel(void *opaque, uint8_t addr, uint32_t val)$/;"	f	file:
rtl8139_io_writew	rtl8139.c	/^static void rtl8139_io_writew(void *opaque, uint8_t addr, uint32_t val)$/;"	f	file:
rtl8139_ioport_read	rtl8139.c	/^static uint64_t rtl8139_ioport_read(void *opaque, hwaddr addr,$/;"	f	file:
rtl8139_ioport_write	rtl8139.c	/^static void rtl8139_ioport_write(void *opaque, hwaddr addr,$/;"	f	file:
rtl8139_mmio_io_addr_dummy	rtl8139.c	/^    int rtl8139_mmio_io_addr_dummy;$/;"	m	struct:RTL8139State	file:
rtl8139_mmio_ops	rtl8139.c	/^static const MemoryRegionOps rtl8139_mmio_ops = {$/;"	v	file:
rtl8139_mmio_readb	rtl8139.c	/^static uint32_t rtl8139_mmio_readb(void *opaque, hwaddr addr)$/;"	f	file:
rtl8139_mmio_readl	rtl8139.c	/^static uint32_t rtl8139_mmio_readl(void *opaque, hwaddr addr)$/;"	f	file:
rtl8139_mmio_readw	rtl8139.c	/^static uint32_t rtl8139_mmio_readw(void *opaque, hwaddr addr)$/;"	f	file:
rtl8139_mmio_writeb	rtl8139.c	/^static void rtl8139_mmio_writeb(void *opaque, hwaddr addr, uint32_t val)$/;"	f	file:
rtl8139_mmio_writel	rtl8139.c	/^static void rtl8139_mmio_writel(void *opaque, hwaddr addr, uint32_t val)$/;"	f	file:
rtl8139_mmio_writew	rtl8139.c	/^static void rtl8139_mmio_writew(void *opaque, hwaddr addr, uint32_t val)$/;"	f	file:
rtl8139_post_load	rtl8139.c	/^static int rtl8139_post_load(void *opaque, int version_id)$/;"	f	file:
rtl8139_pre_save	rtl8139.c	/^static void rtl8139_pre_save(void *opaque)$/;"	f	file:
rtl8139_properties	rtl8139.c	/^static Property rtl8139_properties[] = {$/;"	v	file:
rtl8139_receive	rtl8139.c	/^static ssize_t rtl8139_receive(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
rtl8139_receiver_enabled	rtl8139.c	/^static int rtl8139_receiver_enabled(RTL8139State *s)$/;"	f	file:
rtl8139_register_types	rtl8139.c	/^static void rtl8139_register_types(void)$/;"	f	file:
rtl8139_reset	rtl8139.c	/^static void rtl8139_reset(DeviceState *d)$/;"	f	file:
rtl8139_reset_rxring	rtl8139.c	/^static void rtl8139_reset_rxring(RTL8139State *s, uint32_t bufferSize)$/;"	f	file:
rtl8139_set_link_status	rtl8139.c	/^static void rtl8139_set_link_status(NetClientState *nc)$/;"	f	file:
rtl8139_set_next_tctr_time	rtl8139.c	/^static void rtl8139_set_next_tctr_time(RTL8139State *s)$/;"	f	file:
rtl8139_timer	rtl8139.c	/^static void rtl8139_timer(void *opaque)$/;"	f	file:
rtl8139_transfer_frame	rtl8139.c	/^static void rtl8139_transfer_frame(RTL8139State *s, uint8_t *buf, int size,$/;"	f	file:
rtl8139_transmit	rtl8139.c	/^static void rtl8139_transmit(RTL8139State *s)$/;"	f	file:
rtl8139_transmit_one	rtl8139.c	/^static int rtl8139_transmit_one(RTL8139State *s, int descriptor)$/;"	f	file:
rtl8139_transmitter_enabled	rtl8139.c	/^static int rtl8139_transmitter_enabled(RTL8139State *s)$/;"	f	file:
rtl8139_update_irq	rtl8139.c	/^static void rtl8139_update_irq(RTL8139State *s)$/;"	f	file:
rtl8139_write_buffer	rtl8139.c	/^static void rtl8139_write_buffer(RTL8139State *s, const void *buf, int size)$/;"	f	file:
ru_base	eepro100.c	/^    uint32_t ru_base;           \/* RU base address *\/$/;"	m	struct:__anon84	file:
ru_idle	eepro100.c	/^    ru_idle = 0,$/;"	e	enum:__anon83	file:
ru_no_resources	eepro100.c	/^    ru_no_resources = 2,$/;"	e	enum:__anon83	file:
ru_offset	eepro100.c	/^    uint32_t ru_offset;         \/* RU address offset *\/$/;"	m	struct:__anon84	file:
ru_ready	eepro100.c	/^    ru_ready = 4$/;"	e	enum:__anon83	file:
ru_state_t	eepro100.c	/^} ru_state_t;$/;"	t	typeref:enum:__anon83	file:
ru_suspended	eepro100.c	/^    ru_suspended = 1,$/;"	e	enum:__anon83	file:
running	e1000e_core.h	/^    bool running;$/;"	m	struct:E1000IntrDelayTimer_st
rx	stellaris_enet.c	/^    StellarisEnetRxFrame rx[31];$/;"	m	struct:__anon125	file:
rx	xgmac.c	/^    uint64_t rx;$/;"	m	struct:RxTxStats	file:
rx	xilinx_axienet.c	/^        uint64_t rx;$/;"	m	struct:XilinxAXIEnet::__anon135	file:
rx0_buf	milkymist-minimac2.c	/^    uint8_t *rx0_buf;$/;"	m	struct:MilkymistMinimac2State	file:
rx1_buf	milkymist-minimac2.c	/^    uint8_t *rx1_buf;$/;"	m	struct:MilkymistMinimac2State	file:
rxFilterConf	vmxnet3.h	/^    struct Vmxnet3_RxFilterConf        rxFilterConf;$/;"	m	struct:Vmxnet3_DSDevRead	typeref:struct:Vmxnet3_DSDevRead::Vmxnet3_RxFilterConf
rxMode	vmxnet3.h	/^    __le32        rxMode;       \/* VMXNET3_RXM_xxx *\/$/;"	m	struct:Vmxnet3_RxFilterConf
rxRingBasePA	vmxnet3.h	/^    __le64        rxRingBasePA[2];$/;"	m	struct:Vmxnet3_RxQueueConf
rxRingSize	vmxnet3.h	/^    __le32        rxRingSize[2];   \/* # of rx desc *\/$/;"	m	struct:Vmxnet3_RxQueueConf
rx_alignment_errors	eepro100.c	/^    uint32_t rx_good_frames, rx_crc_errors, rx_alignment_errors,$/;"	m	struct:__anon81	file:
rx_bcast	xgmac.c	/^    uint64_t rx_bcast;$/;"	m	struct:RxTxStats	file:
rx_bcast	xilinx_axienet.c	/^        uint64_t rx_bcast;$/;"	m	struct:XilinxAXIEnet::__anon135	file:
rx_buf_addr	eepro100.c	/^    uint32_t rx_buf_addr;       \/* void * *\/$/;"	m	struct:__anon78	file:
rx_buffer	fsl_etsec/etsec.h	/^    uint8_t       *rx_buffer;$/;"	m	struct:eTSEC
rx_buffer	mipsnet.c	/^    uint8_t rx_buffer[MAX_ETH_FRAME_SIZE];$/;"	m	struct:MIPSnetState	file:
rx_buffer_len	fsl_etsec/etsec.h	/^    uint32_t       rx_buffer_len;$/;"	m	struct:eTSEC
rx_bufs	spapr_llan.c	/^    uint32_t add_buf_ptr, use_buf_ptr, rx_bufs;$/;"	m	struct:VIOsPAPRVLANDevice	file:
rx_bytes	xgmac.c	/^    uint64_t rx_bytes;$/;"	m	struct:RxTxStats	file:
rx_bytes	xilinx_axienet.c	/^        uint64_t rx_bytes;$/;"	m	struct:XilinxAXIEnet::__anon135	file:
rx_cdt_errors	eepro100.c	/^             rx_resource_errors, rx_overrun_errors, rx_cdt_errors,$/;"	m	struct:__anon81	file:
rx_cfg	lan9118.c	/^    uint32_t rx_cfg;$/;"	m	struct:__anon123	file:
rx_control_dev	xilinx_axienet.c	/^    XilinxAXIEnetStreamSlave rx_control_dev;$/;"	m	struct:XilinxAXIEnet	file:
rx_count	mipsnet.c	/^    uint32_t rx_count;$/;"	m	struct:MIPSnetState	file:
rx_crc_errors	eepro100.c	/^    uint32_t rx_good_frames, rx_crc_errors, rx_alignment_errors,$/;"	m	struct:__anon81	file:
rx_data_dev	xilinx_axienet.c	/^    XilinxAXIEnetStreamSlave rx_data_dev;$/;"	m	struct:XilinxAXIEnet	file:
rx_desc	opencores_eth.c	/^    unsigned rx_desc;$/;"	m	struct:OpenEthState	file:
rx_desc	opencores_eth.c	/^static desc *rx_desc(OpenEthState *s)$/;"	f	file:
rx_desc_base	e1000.c	/^static uint64_t rx_desc_base(E1000State *s)$/;"	f	file:
rx_desc_buf_size	e1000e_core.h	/^    uint32_t rx_desc_buf_size;$/;"	m	struct:E1000Core
rx_desc_get_buffer	cadence_gem.c	/^static inline unsigned rx_desc_get_buffer(unsigned *desc)$/;"	f	file:
rx_desc_get_ownership	cadence_gem.c	/^static inline unsigned rx_desc_get_ownership(unsigned *desc)$/;"	f	file:
rx_desc_get_wrap	cadence_gem.c	/^static inline unsigned rx_desc_get_wrap(unsigned *desc)$/;"	f	file:
rx_desc_len	e1000e_core.h	/^    uint8_t rx_desc_len;$/;"	m	struct:E1000Core
rx_desc_set_broadcast	cadence_gem.c	/^static inline void rx_desc_set_broadcast(unsigned *desc)$/;"	f	file:
rx_desc_set_eof	cadence_gem.c	/^static inline void rx_desc_set_eof(unsigned *desc)$/;"	f	file:
rx_desc_set_length	cadence_gem.c	/^static inline void rx_desc_set_length(unsigned *desc, unsigned len)$/;"	f	file:
rx_desc_set_multicast_hash	cadence_gem.c	/^static inline void rx_desc_set_multicast_hash(unsigned *desc)$/;"	f	file:
rx_desc_set_ownership	cadence_gem.c	/^static inline void rx_desc_set_ownership(unsigned *desc)$/;"	f	file:
rx_desc_set_sar	cadence_gem.c	/^static inline void rx_desc_set_sar(unsigned *desc, int sar_idx)$/;"	f	file:
rx_desc_set_sof	cadence_gem.c	/^static inline void rx_desc_set_sof(unsigned *desc)$/;"	f	file:
rx_desc_set_unicast_hash	cadence_gem.c	/^static inline void rx_desc_set_unicast_hash(unsigned *desc)$/;"	f	file:
rx_descriptor	mcf_fec.c	/^    uint32_t rx_descriptor;$/;"	m	struct:__anon36	file:
rx_enabled	mcf_fec.c	/^    int rx_enabled;$/;"	m	struct:__anon36	file:
rx_fcb	fsl_etsec/etsec.h	/^    uint8_t        rx_fcb[10];$/;"	m	struct:eTSEC
rx_fcb_size	fsl_etsec/etsec.h	/^    uint8_t        rx_fcb_size;$/;"	m	struct:eTSEC
rx_fifo	lan9118.c	/^    uint32_t rx_fifo[3360];$/;"	m	struct:__anon123	file:
rx_fifo	smc91c111.c	/^    int rx_fifo[NUM_PACKETS];$/;"	m	struct:__anon96	file:
rx_fifo_head	lan9118.c	/^    int32_t rx_fifo_head;$/;"	m	struct:__anon123	file:
rx_fifo_len	smc91c111.c	/^    int rx_fifo_len;$/;"	m	struct:__anon96	file:
rx_fifo_offset	stellaris_enet.c	/^    uint32_t rx_fifo_offset;$/;"	m	struct:__anon125	file:
rx_fifo_pop	lan9118.c	/^static uint32_t rx_fifo_pop(lan9118_state *s)$/;"	f	file:
rx_fifo_push	lan9118.c	/^static void rx_fifo_push(lan9118_state *s, uint32_t val)$/;"	f	file:
rx_fifo_size	lan9118.c	/^    int32_t rx_fifo_size;$/;"	m	struct:__anon123	file:
rx_fifo_used	lan9118.c	/^    int32_t rx_fifo_used;$/;"	m	struct:__anon123	file:
rx_first_bd	fsl_etsec/etsec.h	/^    eTSEC_rxtx_bd  rx_first_bd;$/;"	m	struct:eTSEC
rx_first_in_frame	fsl_etsec/etsec.h	/^    uint8_t        rx_first_in_frame;$/;"	m	struct:eTSEC
rx_good_frames	eepro100.c	/^    uint32_t rx_good_frames, rx_crc_errors, rx_alignment_errors,$/;"	m	struct:__anon81	file:
rx_init_frame	fsl_etsec/rings.c	/^static void rx_init_frame(eTSEC *etsec, const uint8_t *buf, size_t size)$/;"	f	file:
rx_irq	fsl_etsec/etsec.h	/^    qemu_irq     rx_irq;$/;"	m	struct:eTSEC
rx_irq	milkymist-minimac2.c	/^    qemu_irq rx_irq;$/;"	m	struct:MilkymistMinimac2State	file:
rx_mcast	xgmac.c	/^    uint64_t rx_mcast;$/;"	m	struct:RxTxStats	file:
rx_mcast	xilinx_axienet.c	/^        uint64_t rx_mcast;$/;"	m	struct:XilinxAXIEnet::__anon135	file:
rx_mode	vmxnet3.c	/^        uint32_t rx_mode;$/;"	m	struct:__anon101	file:
rx_mode_bits	rtl8139.c	/^enum rx_mode_bits {$/;"	g	file:
rx_overrun_errors	eepro100.c	/^             rx_resource_errors, rx_overrun_errors, rx_cdt_errors,$/;"	m	struct:__anon81	file:
rx_packet_size	lan9118.c	/^    int32_t rx_packet_size[1024];$/;"	m	struct:__anon123	file:
rx_packet_size_head	lan9118.c	/^    int32_t rx_packet_size_head;$/;"	m	struct:__anon123	file:
rx_packet_size_tail	lan9118.c	/^    int32_t rx_packet_size_tail;$/;"	m	struct:__anon123	file:
rx_packets_compound	vmxnet3.c	/^        bool rx_packets_compound;$/;"	m	struct:__anon101	file:
rx_padding	fsl_etsec/etsec.h	/^    uint32_t       rx_padding;$/;"	m	struct:eTSEC
rx_pkt	e1000e_core.h	/^    struct NetRxPkt *rx_pkt;$/;"	m	struct:E1000Core	typeref:struct:E1000Core::NetRxPkt
rx_pkt	vmxnet3.c	/^        struct NetRxPkt *rx_pkt;$/;"	m	struct:__anon101	typeref:struct:__anon101::NetRxPkt	file:
rx_pkts	rocker/rocker_of_dpa.c	/^        uint64_t rx_pkts;$/;"	m	struct:of_dpa_flow::__anon69	file:
rx_pool	spapr_llan.c	/^    RxBufPool *rx_pool[RX_MAX_POOLS];  \/* Receive buffer descriptor pools *\/$/;"	m	struct:VIOsPAPRVLANDevice	file:
rx_pool_size_compare	spapr_llan.c	/^static int rx_pool_size_compare(const void *p1, const void *p2)$/;"	f	file:
rx_produce	rocker/rocker.c	/^int rx_produce(World *world, uint32_t pport,$/;"	f
rx_read	mipsnet.c	/^    uint32_t rx_read;$/;"	m	struct:MIPSnetState	file:
rx_remaining_data	fsl_etsec/etsec.h	/^    uint32_t       rx_remaining_data;$/;"	m	struct:eTSEC
rx_resource_errors	eepro100.c	/^             rx_resource_errors, rx_overrun_errors, rx_cdt_errors,$/;"	m	struct:__anon81	file:
rx_ring	vmxnet3.c	/^    Vmxnet3Ring rx_ring[VMXNET3_RX_RINGS_PER_QUEUE];$/;"	m	struct:__anon99	file:
rx_ring	xen_nic.c	/^    netif_rx_back_ring_t  rx_ring;$/;"	m	struct:XenNetDev	file:
rx_ring_ref	xen_nic.c	/^    int                   rx_ring_ref;$/;"	m	struct:XenNetDev	file:
rx_short_frame_errors	eepro100.c	/^             rx_short_frame_errors;$/;"	m	struct:__anon81	file:
rx_stats_pa	vmxnet3.c	/^    hwaddr rx_stats_pa;$/;"	m	struct:__anon99	file:
rx_status_fifo	lan9118.c	/^    uint32_t rx_status_fifo[896];$/;"	m	struct:__anon123	file:
rx_status_fifo_head	lan9118.c	/^    int32_t rx_status_fifo_head;$/;"	m	struct:__anon123	file:
rx_status_fifo_pop	lan9118.c	/^static uint32_t rx_status_fifo_pop(lan9118_state *s)$/;"	f	file:
rx_status_fifo_size	lan9118.c	/^    int32_t rx_status_fifo_size;$/;"	m	struct:__anon123	file:
rx_status_fifo_used	lan9118.c	/^    int32_t rx_status_fifo_used;$/;"	m	struct:__anon123	file:
rx_vlan_stripping	vmxnet3.c	/^        bool rx_vlan_stripping;$/;"	m	struct:__anon101	file:
rxapp	xilinx_axienet.c	/^    uint8_t rxapp[CONTROL_PAYLOAD_SIZE];$/;"	m	struct:XilinxAXIEnet	file:
rxappsize	xilinx_axienet.c	/^    uint32_t rxappsize;$/;"	m	struct:XilinxAXIEnet	file:
rxbuf	xilinx_ethlite.c	/^    unsigned int rxbuf;$/;"	m	struct:xlx_ethlite	file:
rxbuf_min_shift	e1000.c	/^    uint32_t rxbuf_min_shift;$/;"	m	struct:E1000State_st	file:
rxbuf_min_shift	e1000e_core.h	/^    uint32_t rxbuf_min_shift;$/;"	m	struct:E1000Core
rxbuf_size	e1000.c	/^    uint32_t rxbuf_size;$/;"	m	struct:E1000State_st	file:
rxbuf_sizes	e1000e_core.h	/^    uint32_t rxbuf_sizes[E1000_PSRCTL_BUFFS_PER_DESC];$/;"	m	struct:E1000Core
rxcr	ne2000.h	/^    uint8_t rxcr;$/;"	m	struct:NE2000State
rxd	vmxnet3.h	/^    struct Vmxnet3_RxDesc        rxd;$/;"	m	union:Vmxnet3_GenericDesc	typeref:struct:Vmxnet3_GenericDesc::Vmxnet3_RxDesc
rxdIdx	vmxnet3.h	/^    u32        rxdIdx:12;    \/* Index of the RxDesc *\/$/;"	m	struct:Vmxnet3_RxCompDesc
rxfilter_notify	virtio-net.c	/^static void rxfilter_notify(NetClientState *nc)$/;"	f	file:
rxmem	xilinx_axienet.c	/^    uint8_t *rxmem;$/;"	m	struct:XilinxAXIEnet	file:
rxp_offset	lan9118.c	/^    int32_t rxp_offset;$/;"	m	struct:__anon123	file:
rxp_pad	lan9118.c	/^    int32_t rxp_pad;$/;"	m	struct:__anon123	file:
rxp_size	lan9118.c	/^    int32_t rxp_size;$/;"	m	struct:__anon123	file:
rxp_timer	spapr_llan.c	/^    QEMUTimer *rxp_timer;$/;"	m	struct:VIOsPAPRVLANDevice	file:
rxpos	xilinx_axienet.c	/^    uint32_t rxpos;$/;"	m	struct:XilinxAXIEnet	file:
rxq_descr	vmxnet3.c	/^        Vmxnet3RxqDescr rxq_descr[VMXNET3_DEVICE_MAX_RX_QUEUES];$/;"	m	struct:__anon101	file:
rxq_descr_info	vmxnet3.c	/^static const VMStateInfo rxq_descr_info = {$/;"	v	file:
rxq_num	vmxnet3.c	/^        uint8_t rxq_num;$/;"	m	struct:__anon101	file:
rxq_ptr	spapr_llan.c	/^    hwaddr rxq_ptr;$/;"	m	struct:VIOsPAPRVLANDevice	file:
rxq_stats	vmxnet3.c	/^    struct UPT1_RxStats rxq_stats;$/;"	m	struct:__anon99	typeref:struct:__anon99::UPT1_RxStats	file:
rxs	xen_nic.c	/^    struct netif_rx_sring *rxs;$/;"	m	struct:XenNetDev	typeref:struct:XenNetDev::netif_rx_sring	file:
rxsize	xilinx_axienet.c	/^    uint32_t rxsize;$/;"	m	struct:XilinxAXIEnet	file:
sbd_irq	xgmac.c	/^    qemu_irq sbd_irq;$/;"	m	struct:XgmacState	file:
scb_command_bit	eepro100.c	/^} scb_command_bit;$/;"	t	typeref:enum:__anon79	file:
scb_stat	eepro100.c	/^    uint8_t scb_stat;           \/* SCB stat\/ack byte *\/$/;"	m	struct:__anon84	file:
scb_stat_ack	eepro100.c	/^enum scb_stat_ack {$/;"	g	file:
scb_status_bit	eepro100.c	/^} scb_status_bit;$/;"	t	typeref:enum:__anon80	file:
sdev	spapr_llan.c	/^    VIOsPAPRDevice sdev;$/;"	m	struct:VIOsPAPRVLANDevice	file:
set_16bit	e1000.c	/^set_16bit(E1000State *s, int index, uint32_t val)$/;"	f	file:
set_ctrl	e1000.c	/^set_ctrl(E1000State *s, int index, uint32_t val)$/;"	f	file:
set_cu_state	eepro100.c	/^static void set_cu_state(EEPRO100State * s, cu_state_t state)$/;"	f	file:
set_dlen	e1000.c	/^set_dlen(E1000State *s, int index, uint32_t val)$/;"	f	file:
set_eecd	e1000.c	/^set_eecd(E1000State *s, int index, uint32_t val)$/;"	f	file:
set_icr	e1000.c	/^set_icr(E1000State *s, int index, uint32_t val)$/;"	f	file:
set_ics	e1000.c	/^set_ics(E1000State *s, int index, uint32_t val)$/;"	f	file:
set_imc	e1000.c	/^set_imc(E1000State *s, int index, uint32_t val)$/;"	f	file:
set_ims	e1000.c	/^set_ims(E1000State *s, int index, uint32_t val)$/;"	f	file:
set_interrupt_cause	e1000.c	/^set_interrupt_cause(E1000State *s, int index, uint32_t val)$/;"	f	file:
set_mdic	e1000.c	/^set_mdic(E1000State *s, int index, uint32_t val)$/;"	f	file:
set_multicast_list	eepro100.c	/^static void set_multicast_list(EEPRO100State *s)$/;"	f	file:
set_phy_ctrl	e1000.c	/^set_phy_ctrl(E1000State *s, int index, uint16_t val)$/;"	f	file:
set_rdt	e1000.c	/^set_rdt(E1000State *s, int index, uint32_t val)$/;"	f	file:
set_ru_state	eepro100.c	/^static void set_ru_state(EEPRO100State * s, ru_state_t state)$/;"	f	file:
set_rx_control	e1000.c	/^set_rx_control(E1000State *s, int index, uint32_t val)$/;"	f	file:
set_tctl	e1000.c	/^set_tctl(E1000State *s, int index, uint32_t val)$/;"	f	file:
sha	rocker/rocker_of_dpa.c	/^                    MACAddr sha;     \/* ARP source hardware address *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon58::__anon60::__anon62	file:
size	e1000.c	/^        uint16_t size;$/;"	m	struct:E1000State_st::e1000_tx	file:
size	eepro100.c	/^    uint16_t size;$/;"	m	struct:__anon78	file:
size	rocker/rocker_desc.c	/^    uint32_t size;$/;"	m	struct:desc_ring	file:
size	vmxnet3.c	/^    size_t size;$/;"	m	struct:__anon97	file:
skip_cp	e1000e_core.h	/^        bool skip_cp;$/;"	m	struct:E1000Core::e1000e_tx
skip_current_tx_pkt	vmxnet3.c	/^        bool skip_current_tx_pkt;$/;"	m	struct:__anon101	file:
sll	rocker/rocker_of_dpa.c	/^                MACAddr sll;         \/* ND source link layer address *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon63::__anon66	file:
smc91c111_allocate_packet	smc91c111.c	/^static int smc91c111_allocate_packet(smc91c111_state *s)$/;"	f	file:
smc91c111_can_receive	smc91c111.c	/^static int smc91c111_can_receive(smc91c111_state *s)$/;"	f	file:
smc91c111_can_receive_nc	smc91c111.c	/^static int smc91c111_can_receive_nc(NetClientState *nc)$/;"	f	file:
smc91c111_class_init	smc91c111.c	/^static void smc91c111_class_init(ObjectClass *klass, void *data)$/;"	f	file:
smc91c111_do_tx	smc91c111.c	/^static void smc91c111_do_tx(smc91c111_state *s)$/;"	f	file:
smc91c111_flush_queued_packets	smc91c111.c	/^static inline void smc91c111_flush_queued_packets(smc91c111_state *s)$/;"	f	file:
smc91c111_info	smc91c111.c	/^static const TypeInfo smc91c111_info = {$/;"	v	file:
smc91c111_init	smc91c111.c	/^void smc91c111_init(NICInfo *nd, uint32_t base, qemu_irq irq)$/;"	f
smc91c111_init1	smc91c111.c	/^static int smc91c111_init1(SysBusDevice *sbd)$/;"	f	file:
smc91c111_mem_ops	smc91c111.c	/^static const MemoryRegionOps smc91c111_mem_ops = {$/;"	v	file:
smc91c111_pop_rx_fifo	smc91c111.c	/^static void smc91c111_pop_rx_fifo(smc91c111_state *s)$/;"	f	file:
smc91c111_pop_tx_fifo_done	smc91c111.c	/^static void smc91c111_pop_tx_fifo_done(smc91c111_state *s)$/;"	f	file:
smc91c111_properties	smc91c111.c	/^static Property smc91c111_properties[] = {$/;"	v	file:
smc91c111_queue_tx	smc91c111.c	/^static void smc91c111_queue_tx(smc91c111_state *s, int packet)$/;"	f	file:
smc91c111_readb	smc91c111.c	/^static uint32_t smc91c111_readb(void *opaque, hwaddr offset)$/;"	f	file:
smc91c111_readl	smc91c111.c	/^static uint32_t smc91c111_readl(void *opaque, hwaddr offset)$/;"	f	file:
smc91c111_readw	smc91c111.c	/^static uint32_t smc91c111_readw(void *opaque, hwaddr offset)$/;"	f	file:
smc91c111_receive	smc91c111.c	/^static ssize_t smc91c111_receive(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
smc91c111_register_types	smc91c111.c	/^static void smc91c111_register_types(void)$/;"	f	file:
smc91c111_release_packet	smc91c111.c	/^static void smc91c111_release_packet(smc91c111_state *s, int packet)$/;"	f	file:
smc91c111_reset	smc91c111.c	/^static void smc91c111_reset(DeviceState *dev)$/;"	f	file:
smc91c111_state	smc91c111.c	/^} smc91c111_state;$/;"	t	typeref:struct:__anon96	file:
smc91c111_tx_alloc	smc91c111.c	/^static void smc91c111_tx_alloc(smc91c111_state *s)$/;"	f	file:
smc91c111_update	smc91c111.c	/^static void smc91c111_update(smc91c111_state *s)$/;"	f	file:
smc91c111_writeb	smc91c111.c	/^static void smc91c111_writeb(void *opaque, hwaddr offset,$/;"	f	file:
smc91c111_writel	smc91c111.c	/^static void smc91c111_writel(void *opaque, hwaddr offset,$/;"	f	file:
smc91c111_writew	smc91c111.c	/^static void smc91c111_writew(void *opaque, hwaddr offset,$/;"	f	file:
sop	vmxnet3.h	/^    u32        sop:1;        \/* Start of Packet *\/$/;"	m	struct:Vmxnet3_RxCompDesc
spapr_vlan_add_rxbuf_to_page	spapr_llan.c	/^static target_long spapr_vlan_add_rxbuf_to_page(VIOsPAPRVLANDevice *dev,$/;"	f	file:
spapr_vlan_add_rxbuf_to_pool	spapr_llan.c	/^static target_long spapr_vlan_add_rxbuf_to_pool(VIOsPAPRVLANDevice *dev,$/;"	f	file:
spapr_vlan_can_receive	spapr_llan.c	/^static int spapr_vlan_can_receive(NetClientState *nc)$/;"	f	file:
spapr_vlan_class_init	spapr_llan.c	/^static void spapr_vlan_class_init(ObjectClass *klass, void *data)$/;"	f	file:
spapr_vlan_create	spapr_llan.c	/^void spapr_vlan_create(VIOsPAPRBus *bus, NICInfo *nd)$/;"	f
spapr_vlan_devnode	spapr_llan.c	/^static int spapr_vlan_devnode(VIOsPAPRDevice *dev, void *fdt, int node_off)$/;"	f	file:
spapr_vlan_flush_rx_queue	spapr_llan.c	/^static void spapr_vlan_flush_rx_queue(void *opaque)$/;"	f	file:
spapr_vlan_get_rx_bd_from_page	spapr_llan.c	/^static vlan_bd_t spapr_vlan_get_rx_bd_from_page(VIOsPAPRVLANDevice *dev,$/;"	f	file:
spapr_vlan_get_rx_bd_from_pool	spapr_llan.c	/^static vlan_bd_t spapr_vlan_get_rx_bd_from_pool(VIOsPAPRVLANDevice *dev,$/;"	f	file:
spapr_vlan_get_rx_pool_id	spapr_llan.c	/^static int spapr_vlan_get_rx_pool_id(VIOsPAPRVLANDevice *dev, int size)$/;"	f	file:
spapr_vlan_info	spapr_llan.c	/^static const TypeInfo spapr_vlan_info = {$/;"	v	file:
spapr_vlan_instance_finalize	spapr_llan.c	/^static void spapr_vlan_instance_finalize(Object *obj)$/;"	f	file:
spapr_vlan_instance_init	spapr_llan.c	/^static void spapr_vlan_instance_init(Object *obj)$/;"	f	file:
spapr_vlan_properties	spapr_llan.c	/^static Property spapr_vlan_properties[] = {$/;"	v	file:
spapr_vlan_realize	spapr_llan.c	/^static void spapr_vlan_realize(VIOsPAPRDevice *sdev, Error **errp)$/;"	f	file:
spapr_vlan_receive	spapr_llan.c	/^static ssize_t spapr_vlan_receive(NetClientState *nc, const uint8_t *buf,$/;"	f	file:
spapr_vlan_record_dropped_rx_frame	spapr_llan.c	/^static void spapr_vlan_record_dropped_rx_frame(VIOsPAPRVLANDevice *dev)$/;"	f	file:
spapr_vlan_register_types	spapr_llan.c	/^static void spapr_vlan_register_types(void)$/;"	f	file:
spapr_vlan_reset	spapr_llan.c	/^static void spapr_vlan_reset(VIOsPAPRDevice *sdev)$/;"	f	file:
spapr_vlan_reset_rx_pool	spapr_llan.c	/^static void spapr_vlan_reset_rx_pool(RxBufPool *rxp)$/;"	f	file:
spapr_vlan_rx_buffer_pools_needed	spapr_llan.c	/^static bool spapr_vlan_rx_buffer_pools_needed(void *opaque)$/;"	f	file:
special	e1000_regs.h	/^            uint16_t special;   \/* *\/$/;"	m	struct:e1000_data_desc::__anon28::__anon29
special	e1000_regs.h	/^            uint16_t special;$/;"	m	struct:e1000_tx_desc::__anon5::__anon6
special	e1000_regs.h	/^    uint16_t special;$/;"	m	struct:e1000_rx_desc
speed	rocker/rocker_fp.c	/^    uint32_t speed;$/;"	m	struct:fp_port	file:
src	rocker/rocker_of_dpa.c	/^                    __be16 src;      \/* TCP\/UDP\/SCTP source port *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon58::__anon60::__anon61	file:
src	rocker/rocker_of_dpa.c	/^                Ipv6Addr src;       \/* IPv6 source address *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon63::__anon64	file:
src	rocker/rocker_of_dpa.c	/^                __be16 src;          \/* TCP\/UDP\/SCTP source port *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon63::__anon65	file:
src	rocker/rocker_of_dpa.c	/^                __be32 src;          \/* IP source address *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon58::__anon59	file:
src	rocker/rocker_of_dpa.c	/^        MACAddr src;                 \/* ethernet source address *\/$/;"	m	struct:of_dpa_flow_key::__anon55	file:
src_mac	rocker/rocker_of_dpa.c	/^            MACAddr src_mac;$/;"	m	struct:of_dpa_group::__anon70::__anon72	file:
src_mac	rocker/rocker_of_dpa.c	/^            MACAddr src_mac;$/;"	m	struct:of_dpa_group::__anon70::__anon74	file:
st_result	eepro100.c	/^    uint32_t st_result;         \/* Self Test Results *\/$/;"	m	struct:__anon87	file:
st_sign	eepro100.c	/^    uint32_t st_sign;           \/* Self Test Signature *\/$/;"	m	struct:__anon87	file:
stack_main	e1000.c	/^stack_main(const uint8_t *pBuffer)$/;"	f	file:
stack_main	ne2000.c	/^stack_main(const uint8_t *pBuffer)$/;"	f	file:
stack_main	pcnet.c	/^stack_main(const uint8_t *pBuffer)$/;"	f	file:
stack_main	rtl8139.c	/^stack_main(const uint8_t *pBuffer)$/;"	f	file:
start	ne2000.h	/^    uint32_t start;$/;"	m	struct:NE2000State
start_xmit	e1000.c	/^start_xmit(E1000State *s)$/;"	f	file:
stat_ack_cu_cmd_done	eepro100.c	/^    stat_ack_cu_cmd_done = 0x80,$/;"	e	enum:scb_stat_ack	file:
stat_ack_cu_idle	eepro100.c	/^    stat_ack_cu_idle = 0x20,$/;"	e	enum:scb_stat_ack	file:
stat_ack_frame_rx	eepro100.c	/^    stat_ack_frame_rx = 0x40,$/;"	e	enum:scb_stat_ack	file:
stat_ack_not_ours	eepro100.c	/^    stat_ack_not_ours = 0x00,$/;"	e	enum:scb_stat_ack	file:
stat_ack_not_present	eepro100.c	/^    stat_ack_not_present = 0xFF,$/;"	e	enum:scb_stat_ack	file:
stat_ack_rnr	eepro100.c	/^    stat_ack_rnr = 0x10,$/;"	e	enum:scb_stat_ack	file:
stat_ack_rx	eepro100.c	/^    stat_ack_rx = (stat_ack_sw_gen | stat_ack_rnr | stat_ack_frame_rx),$/;"	e	enum:scb_stat_ack	file:
stat_ack_sw_gen	eepro100.c	/^    stat_ack_sw_gen = 0x04,$/;"	e	enum:scb_stat_ack	file:
stat_ack_tx	eepro100.c	/^    stat_ack_tx = (stat_ack_cu_idle | stat_ack_cu_cmd_done),$/;"	e	enum:scb_stat_ack	file:
state	etraxfs_eth.c	/^    } state;$/;"	m	struct:qemu_mdio	typeref:enum:qemu_mdio::__anon118	file:
state	lan9118.c	/^    uint32_t state;$/;"	m	struct:__anon122	file:
state	lance.c	/^    PCNetState state;$/;"	m	struct:__anon105	file:
state	milkymist-minimac2.c	/^    int state;$/;"	m	struct:MilkymistMinimac2MdioState	file:
state	pcnet-pci.c	/^    PCNetState state;$/;"	m	struct:__anon121	file:
state	xilinx_axienet.c	/^    } state;$/;"	m	struct:MDIOBus	typeref:enum:MDIOBus::__anon126	file:
statistics	eepro100.c	/^    eepro100_stats_t statistics;$/;"	m	struct:__anon84	file:
stats	rocker/rocker_of_dpa.c	/^    } stats;$/;"	m	struct:of_dpa_flow	typeref:struct:of_dpa_flow::__anon69	file:
stats	vmxnet3.h	/^    struct UPT1_RxStats            stats;$/;"	m	struct:Vmxnet3_RxQueueDesc	typeref:struct:Vmxnet3_RxQueueDesc::UPT1_RxStats
stats	vmxnet3.h	/^    struct UPT1_TxStats            stats;$/;"	m	struct:Vmxnet3_TxQueueDesc	typeref:struct:Vmxnet3_TxQueueDesc::UPT1_TxStats
stats	xgmac.c	/^    struct RxTxStats stats;$/;"	m	struct:XgmacState	typeref:struct:XgmacState::RxTxStats	file:
stats	xilinx_axienet.c	/^    } stats;$/;"	m	struct:XilinxAXIEnet	typeref:struct:XilinxAXIEnet::__anon135	file:
stats_size	eepro100.c	/^    uint16_t stats_size;$/;"	m	struct:__anon84	file:
stats_size	eepro100.c	/^    uint8_t stats_size;$/;"	m	struct:__anon75	file:
statsaddr	eepro100.c	/^    uint32_t statsaddr;         \/* pointer to eepro100_stats_t *\/$/;"	m	struct:__anon84	file:
status	e1000_regs.h	/^            uint8_t status;     \/* Descriptor status *\/$/;"	m	struct:e1000_context_desc::__anon24::__anon25
status	e1000_regs.h	/^            uint8_t status;     \/* Descriptor status *\/$/;"	m	struct:e1000_data_desc::__anon28::__anon29
status	e1000_regs.h	/^            uint8_t status;     \/* Descriptor status *\/$/;"	m	struct:e1000_tx_desc::__anon5::__anon6
status	e1000_regs.h	/^    uint8_t status;      \/* Descriptor status *\/$/;"	m	struct:e1000_rx_desc
status	eepro100.c	/^    int16_t status;$/;"	m	struct:__anon78	file:
status	eepro100.c	/^    uint16_t status;$/;"	m	struct:__anon77	file:
status	pcnet.c	/^    int16_t status;$/;"	m	struct:pcnet_RMD	file:
status	pcnet.c	/^    int16_t status;$/;"	m	struct:pcnet_TMD	file:
status	vmxnet3.h	/^    struct Vmxnet3_QueueStatus        status;$/;"	m	struct:Vmxnet3_RxQueueDesc	typeref:struct:Vmxnet3_RxQueueDesc::Vmxnet3_QueueStatus
status	vmxnet3.h	/^    struct Vmxnet3_QueueStatus        status;$/;"	m	struct:Vmxnet3_TxQueueDesc	typeref:struct:Vmxnet3_TxQueueDesc::Vmxnet3_QueueStatus
status_error	e1000_regs.h	/^            uint32_t status_error;     \/* ext status\/error *\/$/;"	m	struct:e1000_rx_desc_packet_split::__anon14::__anon18
status_error	e1000_regs.h	/^            uint32_t status_error;  \/* ext status\/error *\/$/;"	m	struct:e1000_rx_desc_extended::__anon8::__anon12
stellaris_enet_can_receive	stellaris_enet.c	/^static int stellaris_enet_can_receive(stellaris_enet_state *s)$/;"	f	file:
stellaris_enet_class_init	stellaris_enet.c	/^static void stellaris_enet_class_init(ObjectClass *klass, void *data)$/;"	f	file:
stellaris_enet_info	stellaris_enet.c	/^static const TypeInfo stellaris_enet_info = {$/;"	v	file:
stellaris_enet_init	stellaris_enet.c	/^static int stellaris_enet_init(SysBusDevice *sbd)$/;"	f	file:
stellaris_enet_ops	stellaris_enet.c	/^static const MemoryRegionOps stellaris_enet_ops = {$/;"	v	file:
stellaris_enet_post_load	stellaris_enet.c	/^static int stellaris_enet_post_load(void *opaque, int version_id)$/;"	f	file:
stellaris_enet_properties	stellaris_enet.c	/^static Property stellaris_enet_properties[] = {$/;"	v	file:
stellaris_enet_read	stellaris_enet.c	/^static uint64_t stellaris_enet_read(void *opaque, hwaddr offset,$/;"	f	file:
stellaris_enet_receive	stellaris_enet.c	/^static ssize_t stellaris_enet_receive(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
stellaris_enet_register_types	stellaris_enet.c	/^static void stellaris_enet_register_types(void)$/;"	f	file:
stellaris_enet_reset	stellaris_enet.c	/^static void stellaris_enet_reset(stellaris_enet_state *s)$/;"	f	file:
stellaris_enet_send	stellaris_enet.c	/^static void stellaris_enet_send(stellaris_enet_state *s)$/;"	f	file:
stellaris_enet_state	stellaris_enet.c	/^} stellaris_enet_state;$/;"	t	typeref:struct:__anon125	file:
stellaris_enet_update	stellaris_enet.c	/^static void stellaris_enet_update(stellaris_enet_state *s)$/;"	f	file:
stellaris_enet_write	stellaris_enet.c	/^static void stellaris_enet_write(void *opaque, hwaddr offset,$/;"	f	file:
stellaris_tx_thr_reached	stellaris_enet.c	/^static inline bool stellaris_tx_thr_reached(stellaris_enet_state *s)$/;"	f	file:
stellaris_txpacket_complete	stellaris_enet.c	/^static inline bool stellaris_txpacket_complete(stellaris_enet_state *s)$/;"	f	file:
stellaris_txpacket_datalen	stellaris_enet.c	/^static inline int stellaris_txpacket_datalen(stellaris_enet_state *s)$/;"	f	file:
stop	ne2000.h	/^    uint32_t stop;$/;"	m	struct:NE2000State
stopped	vmxnet3.h	/^    bool        stopped;$/;"	m	struct:Vmxnet3_QueueStatus
subsys	e1000e.c	/^    uint16_t subsys;$/;"	m	struct:E1000EState	file:
subsys_used	e1000e.c	/^    uint16_t subsys_used;$/;"	m	struct:E1000EState	file:
subsys_ven	e1000e.c	/^    uint16_t subsys_ven;$/;"	m	struct:E1000EState	file:
subsys_ven_used	e1000e.c	/^    uint16_t subsys_ven_used;$/;"	m	struct:E1000EState	file:
subsystem_id	eepro100.c	/^    uint16_t subsystem_id;$/;"	m	struct:__anon75	file:
subsystem_vendor_id	eepro100.c	/^    uint16_t subsystem_vendor_id;$/;"	m	struct:__anon75	file:
sum_needed	e1000x_common.h	/^    unsigned char sum_needed;$/;"	m	struct:e1000x_txd_props
switch_id	rocker/rocker.c	/^    uint64_t switch_id;          \/* switch id *\/$/;"	m	struct:rocker	file:
sysbus_open_eth_init	opencores_eth.c	/^static int sysbus_open_eth_init(SysBusDevice *sbd)$/;"	f	file:
sysmem	mcf_fec.c	/^    MemoryRegion *sysmem;$/;"	m	struct:__anon36	file:
tadv	e1000e_core.h	/^    E1000IntrDelayTimer tadv;$/;"	m	struct:E1000Core
tail	rocker/rocker_desc.c	/^    uint32_t tail;$/;"	m	struct:desc_ring	file:
tally_counters	rtl8139.c	/^    RTL8139TallyCounters tally_counters;$/;"	m	struct:RTL8139State	file:
target	rocker/rocker_of_dpa.c	/^                Ipv6Addr target;    \/* ND target address *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon63::__anon66	file:
tbadr	pcnet.c	/^    uint32_t tbadr;$/;"	m	struct:pcnet_TMD	file:
tbd_array_addr	eepro100.c	/^    uint32_t tbd_array_addr;    \/* transmit buffer descriptor array address. *\/$/;"	m	struct:__anon77	file:
tbd_count	eepro100.c	/^    uint8_t tbd_count;          \/* TBD number *\/$/;"	m	struct:__anon77	file:
tbl_id	rocker/rocker_of_dpa.c	/^    uint32_t tbl_id;                 \/* table id *\/$/;"	m	struct:of_dpa_flow_key	file:
tbl_id	rocker/rocker_of_dpa.c	/^    uint32_t tbl_id;$/;"	m	struct:of_dpa_flow_fill_context	file:
tc	xilinx_axienet.c	/^    uint32_t tc;$/;"	m	struct:XilinxAXIEnet	file:
tcb_bytes	eepro100.c	/^    uint16_t tcb_bytes;         \/* transmit command block byte count (in lower 14 bits *\/$/;"	m	struct:__anon77	file:
tcd	vmxnet3.h	/^    struct Vmxnet3_TxCompDesc    tcd;$/;"	m	union:Vmxnet3_GenericDesc	typeref:struct:Vmxnet3_GenericDesc::Vmxnet3_TxCompDesc
tci	net_rx_pkt.c	/^    uint16_t tci;$/;"	m	struct:NetRxPkt	file:
tci	vmxnet3.c	/^        uint16_t tci;$/;"	m	struct:__anon101	file:
tci	vmxnet3.h	/^    u32        tci:16;       \/* Tag stripped *\/$/;"	m	struct:Vmxnet3_RxCompDesc
tci	vmxnet3.h	/^    u32 tci:16;     \/* Tag to Insert *\/$/;"	m	struct:Vmxnet3_TxDesc
tcnt	ne2000.h	/^    uint16_t tcnt;$/;"	m	struct:NE2000State
tcp	e1000x_common.h	/^    int8_t tcp;$/;"	m	struct:e1000x_txd_props
tcp	vmxnet3.h	/^    u32        tcp:1;        \/* TCP packet *\/$/;"	m	struct:Vmxnet3_RxCompDesc
tcp_config	e1000_regs.h	/^        uint32_t tcp_config;$/;"	m	union:e1000_context_desc::__anon22
tcp_fields	e1000_regs.h	/^        } tcp_fields;$/;"	m	union:e1000_context_desc::__anon22	typeref:struct:e1000_context_desc::__anon22::__anon23
tcp_seg_setup	e1000_regs.h	/^    } tcp_seg_setup;$/;"	m	struct:e1000_context_desc	typeref:union:e1000_context_desc::__anon24
tcpiphdr	pcnet.c	/^struct __attribute__((__packed__)) tcpiphdr {$/;"	s	file:
tcr	mcf_fec.c	/^    uint32_t tcr;$/;"	m	struct:__anon36	file:
tcr	smc91c111.c	/^    uint16_t tcr;$/;"	m	struct:__anon96	file:
tctl	stellaris_enet.c	/^    uint32_t tctl;$/;"	m	struct:__anon125	file:
tdk_init	etraxfs_eth.c	/^tdk_init(struct qemu_phy *phy)$/;"	f	file:
tdk_init	xilinx_axienet.c	/^tdk_init(struct PHY *phy)$/;"	f	file:
tdk_read	etraxfs_eth.c	/^static unsigned int tdk_read(struct qemu_phy *phy, unsigned int req)$/;"	f	file:
tdk_read	xilinx_axienet.c	/^static unsigned int tdk_read(struct PHY *phy, unsigned int req)$/;"	f	file:
tdk_write	etraxfs_eth.c	/^tdk_write(struct qemu_phy *phy, unsigned int req, unsigned int data)$/;"	f	file:
tdk_write	xilinx_axienet.c	/^tdk_write(struct PHY *phy, unsigned int req, unsigned int data)$/;"	f	file:
tdra	pcnet.c	/^    uint32_t tdra;$/;"	m	struct:pcnet_initblk16	file:
tdra	pcnet.c	/^    uint32_t tdra;$/;"	m	struct:pcnet_initblk32	file:
tdra	pcnet.h	/^    uint32_t rdra, tdra;$/;"	m	struct:PCNetState_st
temp_mac	vmxnet3.c	/^        uint32_t temp_mac;   \/* To store the low part first *\/$/;"	m	struct:__anon101	file:
temp_shared_guest_driver_memory	vmxnet3.c	/^        hwaddr temp_shared_guest_driver_memory;$/;"	m	struct:__anon101	file:
test_dma_addr	rocker/rocker.c	/^    dma_addr_t test_dma_addr;$/;"	m	struct:rocker	file:
test_dma_size	rocker/rocker.c	/^    uint32_t test_dma_size;$/;"	m	struct:rocker	file:
test_reg	rocker/rocker.c	/^    uint32_t test_reg;$/;"	m	struct:rocker	file:
test_reg64	rocker/rocker.c	/^    uint64_t test_reg64;$/;"	m	struct:rocker	file:
tfwr	mcf_fec.c	/^    uint32_t tfwr;$/;"	m	struct:__anon36	file:
tha	rocker/rocker_of_dpa.c	/^                    MACAddr tha;     \/* ARP target hardware address *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon58::__anon60::__anon62	file:
thr	stellaris_enet.c	/^    uint32_t thr;$/;"	m	struct:__anon125	file:
ti	vmxnet3.h	/^    u32 ti:1;       \/* VLAN Tag Insertion *\/$/;"	m	struct:Vmxnet3_TxDesc
ti_ack	pcnet.c	68;"	d	file:
ti_dport	pcnet.c	66;"	d	file:
ti_dst	pcnet.c	64;"	d	file:
ti_flags	pcnet.c	71;"	d	file:
ti_i	pcnet.c	/^	struct	ipovly ti_i;		\/* overlaid ip structure *\/$/;"	m	struct:tcpiphdr	typeref:struct:tcpiphdr::ipovly	file:
ti_len	pcnet.c	62;"	d	file:
ti_next	pcnet.c	58;"	d	file:
ti_off	pcnet.c	70;"	d	file:
ti_pr	pcnet.c	61;"	d	file:
ti_prev	pcnet.c	59;"	d	file:
ti_seq	pcnet.c	67;"	d	file:
ti_sport	pcnet.c	65;"	d	file:
ti_src	pcnet.c	63;"	d	file:
ti_sum	pcnet.c	73;"	d	file:
ti_t	pcnet.c	/^	struct	tcphdr ti_t;		\/* tcp header *\/$/;"	m	struct:tcpiphdr	typeref:struct:tcpiphdr::tcphdr	file:
ti_urp	pcnet.c	74;"	d	file:
ti_win	pcnet.c	72;"	d	file:
ti_x1	pcnet.c	60;"	d	file:
ti_x2	pcnet.c	69;"	d	file:
tick	rtl8139.c	/^    uint32_t tick;$/;"	m	struct:EEprom9346	file:
tidv	e1000e_core.h	/^    E1000IntrDelayTimer tidv;$/;"	m	struct:E1000Core
timer	e1000e_core.h	/^    QEMUTimer *timer;$/;"	m	struct:E1000IntrDelayTimer_st
timer	lan9118.c	/^    ptimer_state *timer;$/;"	m	struct:__anon123	file:
timer	pcnet.h	/^    uint64_t timer;$/;"	m	struct:PCNetState_st
timer	rtl8139.c	/^    QEMUTimer *timer;$/;"	m	struct:RTL8139State	file:
tlen	pcnet.c	/^    uint8_t tlen;$/;"	m	struct:pcnet_initblk32	file:
tll	rocker/rocker_of_dpa.c	/^                MACAddr tll;         \/* ND target link layer address *\/$/;"	m	struct:of_dpa_flow_key::__anon57::__anon63::__anon66	file:
tlv_size	rocker/rocker_hw.h	/^    __le16 tlv_size;$/;"	m	struct:rocker_desc
to_rocker	rocker/rocker.c	74;"	d	file:
tos	rocker/rocker_of_dpa.c	/^        uint8_t tos;                 \/* IP ToS *\/$/;"	m	struct:of_dpa_flow_key::__anon56	file:
tot_len	net_rx_pkt.c	/^    uint32_t tot_len;$/;"	m	struct:NetRxPkt	file:
tp	rocker/rocker_of_dpa.c	/^                } tp;$/;"	m	union:of_dpa_flow_key::__anon57::__anon58::__anon60	typeref:struct:of_dpa_flow_key::__anon57::__anon58::__anon60::__anon61	file:
tp	rocker/rocker_of_dpa.c	/^            } tp;$/;"	m	struct:of_dpa_flow_key::__anon57::__anon63	typeref:struct:of_dpa_flow_key::__anon57::__anon63::__anon65	file:
tpsr	ne2000.h	/^    uint8_t tpsr;$/;"	m	struct:NE2000State
ts	vmxnet3.h	/^    u32        ts:1;         \/* Tag is stripped *\/$/;"	m	struct:Vmxnet3_RxCompDesc
tse	e1000x_common.h	/^    bool tse;$/;"	m	struct:e1000x_txd_props
tso_frames	e1000.c	/^        uint16_t tso_frames;$/;"	m	struct:E1000State_st::e1000_tx	file:
tsr	ne2000.h	/^    uint8_t tsr;$/;"	m	struct:NE2000State
ttl	rocker/rocker_of_dpa.c	/^        uint8_t ttl;                 \/* IP TTL\/hop limit *\/$/;"	m	struct:of_dpa_flow_key::__anon56	file:
ttl_check	rocker/rocker_of_dpa.c	/^            uint8_t ttl_check;$/;"	m	struct:of_dpa_group::__anon70::__anon74	file:
tuc	vmxnet3.h	/^    u32        tuc:1;        \/* TCP\/UDP Checksum Correct *\/$/;"	m	struct:Vmxnet3_RxCompDesc
tucse	e1000_regs.h	/^            uint16_t tucse;     \/* TCP checksum end *\/$/;"	m	struct:e1000_context_desc::__anon22::__anon23
tucse	e1000x_common.h	/^    uint16_t tucse;$/;"	m	struct:e1000x_txd_props
tucso	e1000_regs.h	/^            uint8_t tucso;      \/* TCP checksum offset *\/$/;"	m	struct:e1000_context_desc::__anon22::__anon23
tucso	e1000x_common.h	/^    uint8_t tucso;$/;"	m	struct:e1000x_txd_props
tucss	e1000_regs.h	/^            uint8_t tucss;      \/* TCP checksum start *\/$/;"	m	struct:e1000_context_desc::__anon22::__anon23
tucss	e1000x_common.h	/^    uint8_t tucss;$/;"	m	struct:e1000x_txd_props
tun_log_lport	rocker/rocker_of_dpa.c	/^        uint32_t tun_log_lport;$/;"	m	struct:of_dpa_flow_action::__anon67	file:
tunnel_id	rocker/rocker_of_dpa.c	/^    uint32_t tunnel_id;              \/* overlay tunnel id *\/$/;"	m	struct:of_dpa_flow_key	file:
tunnel_id	rocker/rocker_of_dpa.c	/^    uint32_t tunnel_id;$/;"	m	struct:of_dpa_flow_context	file:
tunnel_id	rocker/rocker_of_dpa.c	/^    uint32_t tunnel_id;$/;"	m	struct:of_dpa_flow_pkt_fields	file:
tx	e1000.c	/^    } tx;$/;"	m	struct:E1000State_st	typeref:struct:E1000State_st::e1000_tx	file:
tx	e1000e_core.c	/^    struct e1000e_tx *tx;$/;"	m	struct:E1000E_TxRing_st	typeref:struct:E1000E_TxRing_st::e1000e_tx	file:
tx	e1000e_core.h	/^    } tx[E1000E_NUM_QUEUES];$/;"	m	struct:E1000Core	typeref:struct:E1000Core::e1000e_tx
tx	eepro100.c	/^    eepro100_tx_t tx;           \/* transmit buffer descriptor *\/$/;"	m	struct:__anon84	file:
txNumDeferred	vmxnet3.h	/^    __le32        txNumDeferred;$/;"	m	struct:Vmxnet3_TxQueueCtrl
txRingBasePA	vmxnet3.h	/^    __le64        txRingBasePA;$/;"	m	struct:Vmxnet3_TxQueueConf
txRingSize	vmxnet3.h	/^    __le32        txRingSize;   \/* # of tx desc *\/$/;"	m	struct:Vmxnet3_TxQueueConf
txThreshold	vmxnet3.h	/^    __le32        txThreshold;$/;"	m	struct:Vmxnet3_TxQueueCtrl
tx_alloc	smc91c111.c	/^    int tx_alloc;$/;"	m	struct:__anon96	file:
tx_buf	milkymist-minimac2.c	/^    uint8_t *tx_buf;$/;"	m	struct:MilkymistMinimac2State	file:
tx_buffer	dp8393x.c	/^    uint8_t tx_buffer[0x10000];$/;"	m	struct:dp8393xState	file:
tx_buffer	fsl_etsec/etsec.h	/^    uint8_t       *tx_buffer;$/;"	m	struct:eTSEC
tx_buffer	mipsnet.c	/^    uint8_t tx_buffer[MAX_ETH_FRAME_SIZE];$/;"	m	struct:MIPSnetState	file:
tx_buffer_len	fsl_etsec/etsec.h	/^    uint32_t       tx_buffer_len;$/;"	m	struct:eTSEC
tx_busy	pcnet.h	/^    int tx_busy;$/;"	m	struct:PCNetState_st
tx_bytes	xgmac.c	/^    uint64_t tx_bytes;$/;"	m	struct:RxTxStats	file:
tx_bytes	xilinx_axienet.c	/^        uint64_t tx_bytes;$/;"	m	struct:XilinxAXIEnet::__anon135	file:
tx_cfg	lan9118.c	/^    uint32_t tx_cfg;$/;"	m	struct:__anon123	file:
tx_command	eepro100.c	/^static void tx_command(EEPRO100State *s)$/;"	f	file:
tx_config_bits	rtl8139.c	/^enum tx_config_bits {$/;"	g	file:
tx_consume	rocker/rocker.c	/^static int tx_consume(Rocker *r, DescInfo *info)$/;"	f	file:
tx_control_dev	xilinx_axienet.c	/^    StreamSlave *tx_control_dev;$/;"	m	struct:XilinxAXIEnet	file:
tx_count	mipsnet.c	/^    uint32_t tx_count;$/;"	m	struct:MIPSnetState	file:
tx_data_dev	xilinx_axienet.c	/^    StreamSlave *tx_data_dev;$/;"	m	struct:XilinxAXIEnet	file:
tx_deferred	eepro100.c	/^             tx_underruns, tx_lost_crs, tx_deferred, tx_single_collisions,$/;"	m	struct:__anon81	file:
tx_desc	opencores_eth.c	/^    unsigned tx_desc;$/;"	m	struct:OpenEthState	file:
tx_desc	opencores_eth.c	/^static desc *tx_desc(OpenEthState *s)$/;"	f	file:
tx_desc_base	e1000.c	/^static uint64_t tx_desc_base(E1000State *s)$/;"	f	file:
tx_desc_get_buffer	cadence_gem.c	/^static inline unsigned tx_desc_get_buffer(unsigned *desc)$/;"	f	file:
tx_desc_get_last	cadence_gem.c	/^static inline unsigned tx_desc_get_last(unsigned *desc)$/;"	f	file:
tx_desc_get_length	cadence_gem.c	/^static inline unsigned tx_desc_get_length(unsigned *desc)$/;"	f	file:
tx_desc_get_used	cadence_gem.c	/^static inline unsigned tx_desc_get_used(unsigned *desc)$/;"	f	file:
tx_desc_get_wrap	cadence_gem.c	/^static inline unsigned tx_desc_get_wrap(unsigned *desc)$/;"	f	file:
tx_desc_set_last	cadence_gem.c	/^static inline void tx_desc_set_last(unsigned *desc)$/;"	f	file:
tx_desc_set_used	cadence_gem.c	/^static inline void tx_desc_set_used(unsigned *desc)$/;"	f	file:
tx_descriptor	mcf_fec.c	/^    uint32_t tx_descriptor;$/;"	m	struct:__anon36	file:
tx_fifo	smc91c111.c	/^    int tx_fifo[NUM_PACKETS];$/;"	m	struct:__anon96	file:
tx_fifo	stellaris_enet.c	/^    uint8_t tx_fifo[2048];$/;"	m	struct:__anon125	file:
tx_fifo_done	smc91c111.c	/^    int tx_fifo_done[NUM_PACKETS];$/;"	m	struct:__anon96	file:
tx_fifo_done_len	smc91c111.c	/^    int tx_fifo_done_len;$/;"	m	struct:__anon96	file:
tx_fifo_len	smc91c111.c	/^    int tx_fifo_len;$/;"	m	struct:__anon96	file:
tx_fifo_len	stellaris_enet.c	/^    uint32_t tx_fifo_len;$/;"	m	struct:__anon125	file:
tx_fifo_push	lan9118.c	/^static void tx_fifo_push(lan9118_state *s, uint32_t val)$/;"	f	file:
tx_fifo_size	lan9118.c	/^    int32_t tx_fifo_size;$/;"	m	struct:__anon123	file:
tx_good_frames	eepro100.c	/^    uint32_t tx_good_frames, tx_max_collisions, tx_late_collisions,$/;"	m	struct:__anon81	file:
tx_irq	fsl_etsec/etsec.h	/^    qemu_irq     tx_irq;$/;"	m	struct:eTSEC
tx_irq	milkymist-minimac2.c	/^    qemu_irq tx_irq;$/;"	m	struct:MilkymistMinimac2State	file:
tx_late_collisions	eepro100.c	/^    uint32_t tx_good_frames, tx_max_collisions, tx_late_collisions,$/;"	m	struct:__anon81	file:
tx_lost_crs	eepro100.c	/^             tx_underruns, tx_lost_crs, tx_deferred, tx_single_collisions,$/;"	m	struct:__anon81	file:
tx_max_collisions	eepro100.c	/^    uint32_t tx_good_frames, tx_max_collisions, tx_late_collisions,$/;"	m	struct:__anon81	file:
tx_multiple_collisions	eepro100.c	/^             tx_multiple_collisions, tx_total_collisions;$/;"	m	struct:__anon81	file:
tx_packet	lan9118.c	/^    LAN9118Packet tx_packet;$/;"	m	struct:__anon123	file:
tx_padding_and_crc	fsl_etsec/rings.c	/^static void tx_padding_and_crc(eTSEC *etsec, uint32_t min_frame_len)$/;"	f	file:
tx_pkt	e1000e_core.h	/^        struct NetTxPkt *tx_pkt;$/;"	m	struct:E1000Core::e1000e_tx	typeref:struct:E1000Core::e1000e_tx::NetTxPkt
tx_pkt	vmxnet3.c	/^        struct NetTxPkt *tx_pkt;$/;"	m	struct:__anon101	typeref:struct:__anon101::NetTxPkt	file:
tx_pkts	rocker/rocker_of_dpa.c	/^        uint64_t tx_pkts;$/;"	m	struct:of_dpa_flow::__anon69	file:
tx_ring	vmxnet3.c	/^    Vmxnet3Ring tx_ring;$/;"	m	struct:__anon98	file:
tx_ring	xen_nic.c	/^    netif_tx_back_ring_t  tx_ring;$/;"	m	struct:XenNetDev	file:
tx_ring_ref	xen_nic.c	/^    int                   tx_ring_ref;$/;"	m	struct:XenNetDev	file:
tx_single_collisions	eepro100.c	/^             tx_underruns, tx_lost_crs, tx_deferred, tx_single_collisions,$/;"	m	struct:__anon81	file:
tx_sop	vmxnet3.c	/^        bool tx_sop;$/;"	m	struct:__anon101	file:
tx_state	lan9118.c	/^enum tx_state {$/;"	g	file:
tx_stats_pa	vmxnet3.c	/^    hwaddr tx_stats_pa;$/;"	m	struct:__anon98	file:
tx_status_fifo	lan9118.c	/^    uint32_t tx_status_fifo[512];$/;"	m	struct:__anon123	file:
tx_status_fifo_head	lan9118.c	/^    int32_t tx_status_fifo_head;$/;"	m	struct:__anon123	file:
tx_status_fifo_pop	lan9118.c	/^static uint32_t tx_status_fifo_pop(lan9118_state *s)$/;"	f	file:
tx_status_fifo_used	lan9118.c	/^    int32_t tx_status_fifo_used;$/;"	m	struct:__anon123	file:
tx_threshold	eepro100.c	/^    uint8_t tx_threshold;       \/* transmit threshold *\/$/;"	m	struct:__anon77	file:
tx_total_collisions	eepro100.c	/^             tx_multiple_collisions, tx_total_collisions;$/;"	m	struct:__anon81	file:
tx_underruns	eepro100.c	/^             tx_underruns, tx_lost_crs, tx_deferred, tx_single_collisions,$/;"	m	struct:__anon81	file:
tx_work	xen_nic.c	/^    int                   tx_work;$/;"	m	struct:XenNetDev	file:
tx_written	mipsnet.c	/^    uint32_t tx_written;$/;"	m	struct:MIPSnetState	file:
txbuf	xilinx_ethlite.c	/^    unsigned int txbuf;$/;"	m	struct:xlx_ethlite	file:
txd	vmxnet3.h	/^    struct Vmxnet3_TxDesc        txd;$/;"	m	union:Vmxnet3_GenericDesc	typeref:struct:Vmxnet3_GenericDesc::Vmxnet3_TxDesc
txdIdx	vmxnet3.h	/^    u32        txdIdx:12;    \/* Index of the EOP TxDesc *\/$/;"	m	struct:Vmxnet3_TxCompDesc
txdesc_writeback	e1000.c	/^txdesc_writeback(E1000State *s, dma_addr_t base, struct e1000_tx_desc *dp)$/;"	f	file:
txp	lan9118.c	/^    LAN9118Packet *txp;$/;"	m	struct:__anon123	file:
txq_descr	vmxnet3.c	/^        Vmxnet3TxqDescr txq_descr[VMXNET3_DEVICE_MAX_TX_QUEUES];$/;"	m	struct:__anon101	file:
txq_descr_info	vmxnet3.c	/^static const VMStateInfo txq_descr_info = {$/;"	v	file:
txq_num	vmxnet3.c	/^        uint8_t txq_num;$/;"	m	struct:__anon101	file:
txq_stats	vmxnet3.c	/^    struct UPT1_TxStats txq_stats;$/;"	m	struct:__anon98	typeref:struct:__anon98::UPT1_TxStats	file:
txs	xen_nic.c	/^    struct netif_tx_sring *txs;$/;"	m	struct:XenNetDev	typeref:struct:XenNetDev::netif_tx_sring	file:
typ_len_ext	e1000_regs.h	/^            uint8_t typ_len_ext;        \/* *\/$/;"	m	struct:e1000_data_desc::__anon26::__anon27
type	e1000e_core.c	/^    uint32_t type;$/;"	m	struct:E1000E_RSSInfo_st	file:
type	rocker/rocker_hw.h	/^    __le32 type;$/;"	m	struct:rocker_tlv
type	rocker/rocker_of_dpa.c	/^        __be16 type;                 \/* ethernet frame type *\/$/;"	m	struct:of_dpa_flow_key::__anon55	file:
type	rocker/rocker_of_dpa.c	/^    uint8_t type;$/;"	m	struct:of_dpa_group_fill_context	file:
type	rocker/rocker_world.c	/^    enum rocker_world_type type;$/;"	m	struct:world	typeref:enum:world::rocker_world_type	file:
type	vmxnet3.h	/^    u32        type:7;       \/* completion type *\/$/;"	m	struct:Vmxnet3_RxCompDesc
type	vmxnet3.h	/^    u32        type:7;       \/* completion type *\/$/;"	m	struct:Vmxnet3_TxCompDesc
type_init	fsl_etsec/etsec.c	/^type_init(etsec_register_types)$/;"	f
u16	vmxnet3.h	32;"	d
u16	vmxnet3.h	750;"	d
u32	vmxnet3.h	31;"	d
u32	vmxnet3.h	749;"	d
u64	vmxnet3.h	30;"	d
u64	vmxnet3.h	748;"	d
u8	vmxnet3.h	33;"	d
u8	vmxnet3.h	751;"	d
u_char	e1000.c	/^typedef	unsigned char	u_char;$/;"	t	file:
u_char	ne2000.c	/^typedef	unsigned char	u_char;$/;"	t	file:
u_char	pcnet.c	/^typedef	unsigned char	u_char;$/;"	t	file:
u_char	rtl8139.c	/^typedef	unsigned char	u_char;$/;"	t	file:
u_int	e1000.c	/^typedef	unsigned int	u_int;$/;"	t	file:
u_int	ne2000.c	/^typedef	unsigned int	u_int;$/;"	t	file:
u_int	pcnet.c	/^typedef	unsigned int	u_int;$/;"	t	file:
u_int	rtl8139.c	/^typedef	unsigned int	u_int;$/;"	t	file:
u_long	e1000.c	/^typedef	unsigned long	u_long;$/;"	t	file:
u_long	ne2000.c	/^typedef	unsigned long	u_long;$/;"	t	file:
u_long	pcnet.c	/^typedef	unsigned long	u_long;$/;"	t	file:
u_long	rtl8139.c	/^typedef	unsigned long	u_long;$/;"	t	file:
u_short	e1000.c	/^typedef	unsigned short	u_short;$/;"	t	file:
u_short	ne2000.c	/^typedef	unsigned short	u_short;$/;"	t	file:
u_short	pcnet.c	/^typedef	unsigned short	u_short;$/;"	t	file:
u_short	rtl8139.c	/^typedef	unsigned short	u_short;$/;"	t	file:
uaw	xilinx_axienet.c	/^    uint32_t uaw[2];$/;"	m	struct:XilinxAXIEnet	file:
ucastBytesRxOK	vmxnet3.h	/^    u64            ucastBytesRxOK;$/;"	m	struct:UPT1_RxStats
ucastBytesTxOK	vmxnet3.h	/^    u64            ucastBytesTxOK;$/;"	m	struct:UPT1_TxStats
ucastPktsRxOK	vmxnet3.h	/^    u64            ucastPktsRxOK;$/;"	m	struct:UPT1_RxStats
ucastPktsTxOK	vmxnet3.h	/^    u64            ucastPktsTxOK;$/;"	m	struct:UPT1_TxStats
udp	vmxnet3.h	/^    u32        udp:1;        \/* UDP packet *\/$/;"	m	struct:Vmxnet3_RxCompDesc
udphdr	pcnet.c	/^struct __attribute__((__packed__)) udphdr {$/;"	s	file:
uh_dport	pcnet.c	/^	u_short	uh_dport;		\/* destination port *\/$/;"	m	struct:udphdr	file:
uh_sport	pcnet.c	/^	u_short	uh_sport;		\/* source port *\/$/;"	m	struct:udphdr	file:
uh_sum	pcnet.c	/^	u_short	uh_sum;			\/* udp checksum *\/$/;"	m	struct:udphdr	file:
uh_ulen	pcnet.c	/^	u_short	uh_ulen;		\/* udp length *\/$/;"	m	struct:udphdr	file:
uninit	rocker/rocker_world.h	/^    world_uninit *uninit;$/;"	m	struct:world_ops
updateRxProd	vmxnet3.h	/^    bool        updateRxProd;$/;"	m	struct:Vmxnet3_RxQueueCtrl
update_rx_interrupt	milkymist-minimac2.c	/^static void update_rx_interrupt(MilkymistMinimac2State *s)$/;"	f	file:
upper	e1000_regs.h	/^        } upper;$/;"	m	struct:e1000_rx_desc_extended::__anon8	typeref:struct:e1000_rx_desc_extended::__anon8::__anon12
upper	e1000_regs.h	/^        } upper;$/;"	m	struct:e1000_rx_desc_packet_split::__anon14	typeref:struct:e1000_rx_desc_packet_split::__anon14::__anon19
upper	e1000_regs.h	/^    } upper;$/;"	m	struct:e1000_data_desc	typeref:union:e1000_data_desc::__anon28
upper	e1000_regs.h	/^    } upper;$/;"	m	struct:e1000_tx_desc	typeref:union:e1000_tx_desc::__anon5
upper_setup	e1000_regs.h	/^    } upper_setup;$/;"	m	struct:e1000_context_desc	typeref:union:e1000_context_desc::__anon22
uptFeatures	vmxnet3.h	/^    __le64        uptFeatures;$/;"	m	struct:Vmxnet3_MiscConf
uptVerSpt	vmxnet3.h	/^    __le32                uptVerSpt;$/;"	m	struct:Vmxnet3_DriverInfo
use_buf_ptr	spapr_llan.c	/^    uint32_t add_buf_ptr, use_buf_ptr, rx_bufs;$/;"	m	struct:VIOsPAPRVLANDevice	file:
user_feature_bits	vhost_net.c	/^static const int user_feature_bits[] = {$/;"	v	file:
v4	vmxnet3.h	/^    u32        v4:1;         \/* IPv4 *\/$/;"	m	struct:Vmxnet3_RxCompDesc
v6	vmxnet3.h	/^    u32        v6:1;         \/* IPv6 *\/$/;"	m	struct:Vmxnet3_RxCompDesc
val_in	e1000.c	/^        uint32_t val_in;    \/* shifted in from guest driver *\/$/;"	m	struct:E1000State_st::__anon89	file:
value	fsl_etsec/etsec.h	/^    uint32_t    value;$/;"	m	struct:eTSEC_Register
value	rocker/rocker_of_dpa.c	/^    OfDpaFlowKey value;$/;"	m	struct:of_dpa_flow_match	file:
vdma_in	etraxfs_eth.c	/^        void *vdma_in;$/;"	m	union:ETRAXFSEthState::__anon120	file:
vdma_out	etraxfs_eth.c	/^        void *vdma_out;$/;"	m	union:ETRAXFSEthState::__anon119	file:
vec	net_rx_pkt.c	/^    struct iovec *vec;$/;"	m	struct:NetRxPkt	typeref:struct:NetRxPkt::iovec	file:
vec	net_tx_pkt.c	/^    struct iovec *vec;$/;"	m	struct:NetTxPkt	typeref:struct:NetTxPkt::iovec	file:
vec_len	net_rx_pkt.c	/^    uint16_t vec_len;$/;"	m	struct:NetRxPkt	file:
vec_len_total	net_rx_pkt.c	/^    uint16_t vec_len_total;$/;"	m	struct:NetRxPkt	file:
version	vmxnet3.h	/^    __le32                version;$/;"	m	struct:Vmxnet3_DriverInfo
vet	e1000e_core.h	/^    uint16_t vet;$/;"	m	struct:E1000Core
vfTable	vmxnet3.h	/^    __le32        vfTable[VMXNET3_VFT_SIZE]; \/* vlan filter *\/$/;"	m	struct:Vmxnet3_RxFilterConf
vhost_net	vhost_net.c	/^struct vhost_net {$/;"	s	file:
vhost_net_ack_features	vhost_net.c	/^void vhost_net_ack_features(struct vhost_net *net, uint64_t features)$/;"	f
vhost_net_cleanup	vhost_net.c	/^void vhost_net_cleanup(struct vhost_net *net)$/;"	f
vhost_net_get_acked_features	vhost_net.c	/^uint64_t vhost_net_get_acked_features(VHostNetState *net)$/;"	f
vhost_net_get_fd	vhost_net.c	/^static int vhost_net_get_fd(NetClientState *backend)$/;"	f	file:
vhost_net_get_feature_bits	vhost_net.c	/^static const int *vhost_net_get_feature_bits(struct vhost_net *net)$/;"	f	file:
vhost_net_get_features	vhost_net.c	/^uint64_t vhost_net_get_features(struct vhost_net *net, uint64_t features)$/;"	f
vhost_net_get_max_queues	vhost_net.c	/^uint64_t vhost_net_get_max_queues(VHostNetState *net)$/;"	f
vhost_net_init	vhost_net.c	/^struct vhost_net *vhost_net_init(VhostNetOptions *options)$/;"	f
vhost_net_notify_migration_done	vhost_net.c	/^int vhost_net_notify_migration_done(struct vhost_net *net, char* mac_addr)$/;"	f
vhost_net_set_vq_index	vhost_net.c	/^static void vhost_net_set_vq_index(struct vhost_net *net, int vq_index)$/;"	f	file:
vhost_net_start	vhost_net.c	/^int vhost_net_start(VirtIODevice *dev, NetClientState *ncs,$/;"	f
vhost_net_start	vhost_net.c	/^int vhost_net_start(VirtIODevice *dev,$/;"	f
vhost_net_start_one	vhost_net.c	/^static int vhost_net_start_one(struct vhost_net *net,$/;"	f	file:
vhost_net_stop	vhost_net.c	/^void vhost_net_stop(VirtIODevice *dev, NetClientState *ncs,$/;"	f
vhost_net_stop	vhost_net.c	/^void vhost_net_stop(VirtIODevice *dev,$/;"	f
vhost_net_stop_one	vhost_net.c	/^static void vhost_net_stop_one(struct vhost_net *net,$/;"	f	file:
vhost_net_virtqueue_mask	vhost_net.c	/^void vhost_net_virtqueue_mask(VHostNetState *net, VirtIODevice *dev,$/;"	f
vhost_net_virtqueue_pending	vhost_net.c	/^bool vhost_net_virtqueue_pending(VHostNetState *net, int idx)$/;"	f
vhost_set_vring_enable	vhost_net.c	/^int vhost_set_vring_enable(NetClientState *nc, int enable)$/;"	f
virt_hdr	net_rx_pkt.c	/^    struct virtio_net_hdr virt_hdr;$/;"	m	struct:NetRxPkt	typeref:struct:NetRxPkt::virtio_net_hdr	file:
virt_hdr	net_tx_pkt.c	/^    struct virtio_net_hdr virt_hdr;$/;"	m	struct:NetTxPkt	typeref:struct:NetTxPkt::virtio_net_hdr	file:
virtio_net_add_queue	virtio-net.c	/^static void virtio_net_add_queue(VirtIONet *n, int index)$/;"	f	file:
virtio_net_announce_timer	virtio-net.c	/^static void virtio_net_announce_timer(void *opaque)$/;"	f	file:
virtio_net_apply_guest_offloads	virtio-net.c	/^static void virtio_net_apply_guest_offloads(VirtIONet *n)$/;"	f	file:
virtio_net_bad_features	virtio-net.c	/^static uint64_t virtio_net_bad_features(VirtIODevice *vdev)$/;"	f	file:
virtio_net_can_receive	virtio-net.c	/^static int virtio_net_can_receive(NetClientState *nc)$/;"	f	file:
virtio_net_change_num_queues	virtio-net.c	/^static void virtio_net_change_num_queues(VirtIONet *n, int new_max_queues)$/;"	f	file:
virtio_net_class_init	virtio-net.c	/^static void virtio_net_class_init(ObjectClass *klass, void *data)$/;"	f	file:
virtio_net_del_queue	virtio-net.c	/^static void virtio_net_del_queue(VirtIONet *n, int index)$/;"	f	file:
virtio_net_device_realize	virtio-net.c	/^static void virtio_net_device_realize(DeviceState *dev, Error **errp)$/;"	f	file:
virtio_net_device_unrealize	virtio-net.c	/^static void virtio_net_device_unrealize(DeviceState *dev, Error **errp)$/;"	f	file:
virtio_net_flush_tx	virtio-net.c	/^static int32_t virtio_net_flush_tx(VirtIONetQueue *q)$/;"	f	file:
virtio_net_get_config	virtio-net.c	/^static void virtio_net_get_config(VirtIODevice *vdev, uint8_t *config)$/;"	f	file:
virtio_net_get_features	virtio-net.c	/^static uint64_t virtio_net_get_features(VirtIODevice *vdev, uint64_t features,$/;"	f	file:
virtio_net_get_subqueue	virtio-net.c	/^static VirtIONetQueue *virtio_net_get_subqueue(NetClientState *nc)$/;"	f	file:
virtio_net_guest_notifier_mask	virtio-net.c	/^static void virtio_net_guest_notifier_mask(VirtIODevice *vdev, int idx,$/;"	f	file:
virtio_net_guest_notifier_pending	virtio-net.c	/^static bool virtio_net_guest_notifier_pending(VirtIODevice *vdev, int idx)$/;"	f	file:
virtio_net_guest_offloads_by_features	virtio-net.c	/^static uint64_t virtio_net_guest_offloads_by_features(uint32_t features)$/;"	f	file:
virtio_net_handle_announce	virtio-net.c	/^static int virtio_net_handle_announce(VirtIONet *n, uint8_t cmd,$/;"	f	file:
virtio_net_handle_ctrl	virtio-net.c	/^static void virtio_net_handle_ctrl(VirtIODevice *vdev, VirtQueue *vq)$/;"	f	file:
virtio_net_handle_mac	virtio-net.c	/^static int virtio_net_handle_mac(VirtIONet *n, uint8_t cmd,$/;"	f	file:
virtio_net_handle_mq	virtio-net.c	/^static int virtio_net_handle_mq(VirtIONet *n, uint8_t cmd,$/;"	f	file:
virtio_net_handle_offloads	virtio-net.c	/^static int virtio_net_handle_offloads(VirtIONet *n, uint8_t cmd,$/;"	f	file:
virtio_net_handle_rx	virtio-net.c	/^static void virtio_net_handle_rx(VirtIODevice *vdev, VirtQueue *vq)$/;"	f	file:
virtio_net_handle_rx_mode	virtio-net.c	/^static int virtio_net_handle_rx_mode(VirtIONet *n, uint8_t cmd,$/;"	f	file:
virtio_net_handle_tx_bh	virtio-net.c	/^static void virtio_net_handle_tx_bh(VirtIODevice *vdev, VirtQueue *vq)$/;"	f	file:
virtio_net_handle_tx_timer	virtio-net.c	/^static void virtio_net_handle_tx_timer(VirtIODevice *vdev, VirtQueue *vq)$/;"	f	file:
virtio_net_handle_vlan_table	virtio-net.c	/^static int virtio_net_handle_vlan_table(VirtIONet *n, uint8_t cmd,$/;"	f	file:
virtio_net_has_buffers	virtio-net.c	/^static int virtio_net_has_buffers(VirtIONetQueue *q, int bufsize)$/;"	f	file:
virtio_net_hdr_swap	virtio-net.c	/^static void virtio_net_hdr_swap(VirtIODevice *vdev, struct virtio_net_hdr *hdr)$/;"	f	file:
virtio_net_info	virtio-net.c	/^static const TypeInfo virtio_net_info = {$/;"	v	file:
virtio_net_instance_init	virtio-net.c	/^static void virtio_net_instance_init(Object *obj)$/;"	f	file:
virtio_net_load_device	virtio-net.c	/^static int virtio_net_load_device(VirtIODevice *vdev, QEMUFile *f,$/;"	f	file:
virtio_net_pre_save	virtio-net.c	/^static void virtio_net_pre_save(void *opaque)$/;"	f	file:
virtio_net_properties	virtio-net.c	/^static Property virtio_net_properties[] = {$/;"	v	file:
virtio_net_query_rxfilter	virtio-net.c	/^static RxFilterInfo *virtio_net_query_rxfilter(NetClientState *nc)$/;"	f	file:
virtio_net_receive	virtio-net.c	/^static ssize_t virtio_net_receive(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
virtio_net_reset	virtio-net.c	/^static void virtio_net_reset(VirtIODevice *vdev)$/;"	f	file:
virtio_net_save_device	virtio-net.c	/^static void virtio_net_save_device(VirtIODevice *vdev, QEMUFile *f)$/;"	f	file:
virtio_net_set_config	virtio-net.c	/^static void virtio_net_set_config(VirtIODevice *vdev, const uint8_t *config)$/;"	f	file:
virtio_net_set_config_size	virtio-net.c	/^static void virtio_net_set_config_size(VirtIONet *n, uint64_t host_features)$/;"	f	file:
virtio_net_set_features	virtio-net.c	/^static void virtio_net_set_features(VirtIODevice *vdev, uint64_t features)$/;"	f	file:
virtio_net_set_link_status	virtio-net.c	/^static void virtio_net_set_link_status(NetClientState *nc)$/;"	f	file:
virtio_net_set_mrg_rx_bufs	virtio-net.c	/^static void virtio_net_set_mrg_rx_bufs(VirtIONet *n, int mergeable_rx_bufs,$/;"	f	file:
virtio_net_set_multiqueue	virtio-net.c	/^static void virtio_net_set_multiqueue(VirtIONet *n, int multiqueue)$/;"	f	file:
virtio_net_set_netclient_name	virtio-net.c	/^void virtio_net_set_netclient_name(VirtIONet *n, const char *name,$/;"	f
virtio_net_set_queues	virtio-net.c	/^static void virtio_net_set_queues(VirtIONet *n)$/;"	f	file:
virtio_net_set_status	virtio-net.c	/^static void virtio_net_set_status(struct VirtIODevice *vdev, uint8_t status)$/;"	f	file:
virtio_net_set_vnet_endian	virtio-net.c	/^static bool virtio_net_set_vnet_endian(VirtIODevice *vdev, NetClientState *ncs,$/;"	f	file:
virtio_net_set_vnet_endian_one	virtio-net.c	/^static int virtio_net_set_vnet_endian_one(VirtIODevice *vdev,$/;"	f	file:
virtio_net_started	virtio-net.c	/^static bool virtio_net_started(VirtIONet *n, uint8_t status)$/;"	f	file:
virtio_net_supported_guest_offloads	virtio-net.c	/^static inline uint64_t virtio_net_supported_guest_offloads(VirtIONet *n)$/;"	f	file:
virtio_net_tx_bh	virtio-net.c	/^static void virtio_net_tx_bh(void *opaque)$/;"	f	file:
virtio_net_tx_complete	virtio-net.c	/^static void virtio_net_tx_complete(NetClientState *nc, ssize_t len)$/;"	f	file:
virtio_net_tx_timer	virtio-net.c	/^static void virtio_net_tx_timer(void *opaque)$/;"	f	file:
virtio_net_vhost_status	virtio-net.c	/^static void virtio_net_vhost_status(VirtIONet *n, uint8_t status)$/;"	f	file:
virtio_net_vnet_endian_status	virtio-net.c	/^static void virtio_net_vnet_endian_status(VirtIONet *n, uint8_t status)$/;"	f	file:
virtio_register_types	virtio-net.c	/^static void virtio_register_types(void)$/;"	f	file:
vlan	e1000.c	/^        unsigned char vlan[4];$/;"	m	struct:E1000State_st::e1000_tx	file:
vlan	e1000_regs.h	/^            uint16_t vlan;          \/* VLAN tag *\/$/;"	m	struct:e1000_rx_desc_extended::__anon8::__anon12
vlan	e1000_regs.h	/^            uint16_t vlan;         \/* VLAN tag *\/$/;"	m	struct:e1000_rx_desc_packet_split::__anon14::__anon18
vlan_bd_t	spapr_llan.c	/^typedef uint64_t vlan_bd_t;$/;"	t	file:
vlan_header	e1000.c	/^        unsigned char vlan_header[4];$/;"	m	struct:E1000State_st::e1000_tx	file:
vlan_id	rocker/rocker_of_dpa.c	/^            __be16 vlan_id;$/;"	m	struct:of_dpa_group::__anon70::__anon72	file:
vlan_id	rocker/rocker_of_dpa.c	/^            __be16 vlan_id;$/;"	m	struct:of_dpa_group::__anon70::__anon74	file:
vlan_id	rocker/rocker_of_dpa.c	/^        __be16 vlan_id;              \/* 0 if no VLAN *\/$/;"	m	struct:of_dpa_flow_key::__anon55	file:
vlan_id	rocker/rocker_of_dpa.c	/^        __be16 vlan_id;$/;"	m	struct:of_dpa_flow_action::__anon67	file:
vlan_id	rocker/rocker_of_dpa.c	/^        __be16 vlan_id;$/;"	m	struct:of_dpa_flow_action::__anon68	file:
vlan_needed	e1000.c	/^        unsigned char vlan_needed;$/;"	m	struct:E1000State_st::e1000_tx	file:
vlan_stripped	net_rx_pkt.c	/^    bool vlan_stripped;$/;"	m	struct:NetRxPkt	file:
vlan_table	vmxnet3.c	/^        uint32_t vlan_table[VMXNET3_VFT_SIZE];$/;"	m	struct:__anon101	file:
vlanhdr	rocker/rocker_of_dpa.c	/^    struct vlan_header *vlanhdr;$/;"	m	struct:of_dpa_flow_pkt_fields	typeref:struct:of_dpa_flow_pkt_fields::vlan_header	file:
vlanhdr	rocker/rocker_of_dpa.c	/^    struct vlan_header vlanhdr;$/;"	m	struct:of_dpa_flow_context	typeref:struct:of_dpa_flow_context::vlan_header	file:
vlanhdr_rewrite	rocker/rocker_of_dpa.c	/^    struct vlan_header vlanhdr_rewrite;$/;"	m	struct:of_dpa_flow_context	typeref:struct:of_dpa_flow_context::vlan_header	file:
vmstate	e1000e_core.h	/^    VMChangeStateEntry *vmstate;$/;"	m	struct:E1000Core
vmstate	eepro100.c	/^    VMStateDescription *vmstate;$/;"	m	struct:__anon84	file:
vmstate_aw_emac	allwinner_emac.c	/^static const VMStateDescription vmstate_aw_emac = {$/;"	v	file:
vmstate_cadence_gem	cadence_gem.c	/^static const VMStateDescription vmstate_cadence_gem = {$/;"	v	file:
vmstate_dp8393x	dp8393x.c	/^static const VMStateDescription vmstate_dp8393x = {$/;"	v	file:
vmstate_e1000	e1000.c	/^static const VMStateDescription vmstate_e1000 = {$/;"	v	file:
vmstate_e1000_full_mac_state	e1000.c	/^static const VMStateDescription vmstate_e1000_full_mac_state = {$/;"	v	file:
vmstate_e1000_mit_state	e1000.c	/^static const VMStateDescription vmstate_e1000_mit_state = {$/;"	v	file:
vmstate_eepro100	eepro100.c	/^static const VMStateDescription vmstate_eepro100 = {$/;"	v	file:
vmstate_imx_eth	imx_fec.c	/^static const VMStateDescription vmstate_imx_eth = {$/;"	v	file:
vmstate_isa_ne2000	ne2000-isa.c	/^static const VMStateDescription vmstate_isa_ne2000 = {$/;"	v	file:
vmstate_lan9118	lan9118.c	/^static const VMStateDescription vmstate_lan9118 = {$/;"	v	file:
vmstate_lan9118_packet	lan9118.c	/^static const VMStateDescription vmstate_lan9118_packet = {$/;"	v	file:
vmstate_lance	lance.c	/^static const VMStateDescription vmstate_lance = {$/;"	v	file:
vmstate_mii	allwinner_emac.c	/^static const VMStateDescription vmstate_mii = {$/;"	v	file:
vmstate_milkymist_minimac2	milkymist-minimac2.c	/^static const VMStateDescription vmstate_milkymist_minimac2 = {$/;"	v	file:
vmstate_milkymist_minimac2_mdio	milkymist-minimac2.c	/^static const VMStateDescription vmstate_milkymist_minimac2_mdio = {$/;"	v	file:
vmstate_mipsnet	mipsnet.c	/^static const VMStateDescription vmstate_mipsnet = {$/;"	v	file:
vmstate_ne2000	ne2000.c	/^const VMStateDescription vmstate_ne2000 = {$/;"	v
vmstate_pci_ne2000	ne2000.c	/^static const VMStateDescription vmstate_pci_ne2000 = {$/;"	v	file:
vmstate_pci_pcnet	pcnet-pci.c	/^static const VMStateDescription vmstate_pci_pcnet = {$/;"	v	file:
vmstate_pcnet	pcnet.c	/^const VMStateDescription vmstate_pcnet = {$/;"	v
vmstate_rtl8139	rtl8139.c	/^static const VMStateDescription vmstate_rtl8139 = {$/;"	v	file:
vmstate_rtl8139_hotplug_ready	rtl8139.c	/^static const VMStateDescription vmstate_rtl8139_hotplug_ready ={$/;"	v	file:
vmstate_rx_buffer_pool	spapr_llan.c	/^static const VMStateDescription vmstate_rx_buffer_pool = {$/;"	v	file:
vmstate_rx_frame	stellaris_enet.c	/^static const VMStateDescription vmstate_rx_frame = {$/;"	v	file:
vmstate_rx_pools	spapr_llan.c	/^static const VMStateDescription vmstate_rx_pools = {$/;"	v	file:
vmstate_rxtx_stats	xgmac.c	/^static const VMStateDescription vmstate_rxtx_stats = {$/;"	v	file:
vmstate_smc91c111	smc91c111.c	/^static const VMStateDescription vmstate_smc91c111 = {$/;"	v	file:
vmstate_spapr_llan	spapr_llan.c	/^static const VMStateDescription vmstate_spapr_llan = {$/;"	v	file:
vmstate_stellaris_enet	stellaris_enet.c	/^static const VMStateDescription vmstate_stellaris_enet = {$/;"	v	file:
vmstate_virtio_net	virtio-net.c	/^static const VMStateDescription vmstate_virtio_net = {$/;"	v	file:
vmstate_vmxnet3	vmxnet3.c	/^static const VMStateDescription vmstate_vmxnet3 = {$/;"	v	file:
vmstate_vmxnet3_pcie_device	vmxnet3.c	/^static const VMStateDescription vmstate_vmxnet3_pcie_device = {$/;"	v	file:
vmstate_xgmac	xgmac.c	/^static const VMStateDescription vmstate_xgmac = {$/;"	v	file:
vmw_shmem_ld16	vmware_utils.h	/^vmw_shmem_ld16(PCIDevice *d, hwaddr addr)$/;"	f
vmw_shmem_ld32	vmware_utils.h	/^vmw_shmem_ld32(PCIDevice *d, hwaddr addr)$/;"	f
vmw_shmem_ld64	vmware_utils.h	/^vmw_shmem_ld64(PCIDevice *d, hwaddr addr)$/;"	f
vmw_shmem_ld8	vmware_utils.h	/^vmw_shmem_ld8(PCIDevice *d, hwaddr addr)$/;"	f
vmw_shmem_read	vmware_utils.h	/^vmw_shmem_read(PCIDevice *d, hwaddr addr, void *buf, int len)$/;"	f
vmw_shmem_rw	vmware_utils.h	/^vmw_shmem_rw(PCIDevice *d, hwaddr addr, void *buf, int len, int is_write)$/;"	f
vmw_shmem_set	vmware_utils.h	/^vmw_shmem_set(PCIDevice *d, hwaddr addr, uint8_t val, int len)$/;"	f
vmw_shmem_st16	vmware_utils.h	/^vmw_shmem_st16(PCIDevice *d, hwaddr addr, uint16_t value)$/;"	f
vmw_shmem_st32	vmware_utils.h	/^vmw_shmem_st32(PCIDevice *d, hwaddr addr, uint32_t value)$/;"	f
vmw_shmem_st64	vmware_utils.h	/^vmw_shmem_st64(PCIDevice *d, hwaddr addr, uint64_t value)$/;"	f
vmw_shmem_st8	vmware_utils.h	/^vmw_shmem_st8(PCIDevice *d, hwaddr addr, uint8_t value)$/;"	f
vmw_shmem_write	vmware_utils.h	/^vmw_shmem_write(PCIDevice *d, hwaddr addr, void *buf, int len)$/;"	f
vmxnet3RevSpt	vmxnet3.h	/^    __le32                vmxnet3RevSpt;$/;"	m	struct:Vmxnet3_DriverInfo
vmxnet3_ack_events	vmxnet3.c	/^static void vmxnet3_ack_events(VMXNET3State *s, uint32_t val)$/;"	f	file:
vmxnet3_activate_device	vmxnet3.c	/^static void vmxnet3_activate_device(VMXNET3State *s)$/;"	f	file:
vmxnet3_adjust_by_guest_type	vmxnet3.c	/^static void vmxnet3_adjust_by_guest_type(VMXNET3State *s)$/;"	f	file:
vmxnet3_can_receive	vmxnet3.c	/^vmxnet3_can_receive(NetClientState *nc)$/;"	f	file:
vmxnet3_class_init	vmxnet3.c	/^static void vmxnet3_class_init(ObjectClass *class, void *data)$/;"	f	file:
vmxnet3_cleanup_msi	vmxnet3.c	/^vmxnet3_cleanup_msi(VMXNET3State *s)$/;"	f	file:
vmxnet3_cleanup_msix	vmxnet3.c	/^vmxnet3_cleanup_msix(VMXNET3State *s)$/;"	f	file:
vmxnet3_clear_interrupt	vmxnet3.c	/^static void vmxnet3_clear_interrupt(VMXNET3State *s, int int_idx)$/;"	f	file:
vmxnet3_complete_packet	vmxnet3.c	/^static void vmxnet3_complete_packet(VMXNET3State *s, int qidx, uint32_t tx_ridx)$/;"	f	file:
vmxnet3_deactivate_device	vmxnet3.c	/^static void vmxnet3_deactivate_device(VMXNET3State *s)$/;"	f	file:
vmxnet3_dec_rx_completion_counter	vmxnet3.c	/^vmxnet3_dec_rx_completion_counter(VMXNET3State *s, int qidx)$/;"	f	file:
vmxnet3_device_serial_num	vmxnet3.c	/^static uint64_t vmxnet3_device_serial_num(VMXNET3State *s)$/;"	f	file:
vmxnet3_dump_conf_descr	vmxnet3.c	/^vmxnet3_dump_conf_descr(const char *name,$/;"	f	file:
vmxnet3_dump_rx_descr	vmxnet3.c	/^vmxnet3_dump_rx_descr(struct Vmxnet3_RxDesc *descr)$/;"	f	file:
vmxnet3_dump_tx_descr	vmxnet3.c	/^vmxnet3_dump_tx_descr(struct Vmxnet3_TxDesc *descr)$/;"	f	file:
vmxnet3_dump_virt_hdr	vmxnet3.c	/^vmxnet3_dump_virt_hdr(struct virtio_net_hdr *vhdr)$/;"	f	file:
vmxnet3_fill_stats	vmxnet3.c	/^static void vmxnet3_fill_stats(VMXNET3State *s)$/;"	f	file:
vmxnet3_get_command_status	vmxnet3.c	/^static uint64_t vmxnet3_get_command_status(VMXNET3State *s)$/;"	f	file:
vmxnet3_get_int_state	vmxnet3.c	/^static int vmxnet3_get_int_state(QEMUFile *f, void *pv, size_t size)$/;"	f	file:
vmxnet3_get_interrupt_config	vmxnet3.c	/^static uint32_t vmxnet3_get_interrupt_config(VMXNET3State *s)$/;"	f	file:
vmxnet3_get_mac_high	vmxnet3.c	/^static uint64_t vmxnet3_get_mac_high(MACAddr *addr)$/;"	f	file:
vmxnet3_get_mac_low	vmxnet3.c	/^static uint64_t vmxnet3_get_mac_low(MACAddr *addr)$/;"	f	file:
vmxnet3_get_next_body_rx_descr	vmxnet3.c	/^vmxnet3_get_next_body_rx_descr(VMXNET3State *s,$/;"	f	file:
vmxnet3_get_next_head_rx_descr	vmxnet3.c	/^vmxnet3_get_next_head_rx_descr(VMXNET3State *s,$/;"	f	file:
vmxnet3_get_next_rx_descr	vmxnet3.c	/^vmxnet3_get_next_rx_descr(VMXNET3State *s, bool is_head,$/;"	f	file:
vmxnet3_get_ring_from_file	vmxnet3.c	/^static void vmxnet3_get_ring_from_file(QEMUFile *f, Vmxnet3Ring *r)$/;"	f	file:
vmxnet3_get_rx_ring_gen	vmxnet3.c	/^vmxnet3_get_rx_ring_gen(VMXNET3State *s, int qidx, int ridx)$/;"	f	file:
vmxnet3_get_rx_stats_from_file	vmxnet3.c	/^static void vmxnet3_get_rx_stats_from_file(QEMUFile *f,$/;"	f	file:
vmxnet3_get_rxq_descr	vmxnet3.c	/^static int vmxnet3_get_rxq_descr(QEMUFile *f, void *pv, size_t size)$/;"	f	file:
vmxnet3_get_tx_stats_from_file	vmxnet3.c	/^static void vmxnet3_get_tx_stats_from_file(QEMUFile *f,$/;"	f	file:
vmxnet3_get_txq_descr	vmxnet3.c	/^static int vmxnet3_get_txq_descr(QEMUFile *f, void *pv, size_t size)$/;"	f	file:
vmxnet3_handle_command	vmxnet3.c	/^static void vmxnet3_handle_command(VMXNET3State *s, uint64_t cmd)$/;"	f	file:
vmxnet3_inc_rx_completion_counter	vmxnet3.c	/^vmxnet3_inc_rx_completion_counter(VMXNET3State *s, int qidx)$/;"	f	file:
vmxnet3_inc_rx_consumption_counter	vmxnet3.c	/^vmxnet3_inc_rx_consumption_counter(VMXNET3State *s, int qidx, int ridx)$/;"	f	file:
vmxnet3_inc_tx_completion_counter	vmxnet3.c	/^vmxnet3_inc_tx_completion_counter(VMXNET3State *s, int qidx)$/;"	f	file:
vmxnet3_inc_tx_consumption_counter	vmxnet3.c	/^vmxnet3_inc_tx_consumption_counter(VMXNET3State *s, int qidx)$/;"	f	file:
vmxnet3_indicate_packet	vmxnet3.c	/^vmxnet3_indicate_packet(VMXNET3State *s)$/;"	f	file:
vmxnet3_info	vmxnet3.c	/^static const TypeInfo vmxnet3_info = {$/;"	v	file:
vmxnet3_init_msix	vmxnet3.c	/^vmxnet3_init_msix(VMXNET3State *s)$/;"	f	file:
vmxnet3_instance_init	vmxnet3.c	/^static void vmxnet3_instance_init(Object *obj)$/;"	f	file:
vmxnet3_interrupt_asserted	vmxnet3.c	/^static bool vmxnet3_interrupt_asserted(VMXNET3State *s, int lidx)$/;"	f	file:
vmxnet3_intr_mask_mode	vmxnet3.h	/^enum vmxnet3_intr_mask_mode {$/;"	g
vmxnet3_intr_type	vmxnet3.h	/^enum vmxnet3_intr_type {$/;"	g
vmxnet3_io_bar0_read	vmxnet3.c	/^vmxnet3_io_bar0_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
vmxnet3_io_bar0_write	vmxnet3.c	/^vmxnet3_io_bar0_write(void *opaque, hwaddr addr,$/;"	f	file:
vmxnet3_io_bar1_read	vmxnet3.c	/^vmxnet3_io_bar1_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
vmxnet3_io_bar1_write	vmxnet3.c	/^vmxnet3_io_bar1_write(void *opaque,$/;"	f	file:
vmxnet3_is_allowed_mcast_group	vmxnet3.c	/^vmxnet3_is_allowed_mcast_group(VMXNET3State *s, const uint8_t *group_mac)$/;"	f	file:
vmxnet3_is_registered_vlan	vmxnet3.c	/^vmxnet3_is_registered_vlan(VMXNET3State *s, const void *data)$/;"	f	file:
vmxnet3_mc_list_needed	vmxnet3.c	/^static bool vmxnet3_mc_list_needed(void *opaque)$/;"	f	file:
vmxnet3_mcast_list_pre_load	vmxnet3.c	/^static int vmxnet3_mcast_list_pre_load(void *opaque)$/;"	f	file:
vmxnet3_msix_load	vmxnet3.c	/^vmxnet3_msix_load(QEMUFile *f, void *opaque, int version_id)$/;"	f	file:
vmxnet3_msix_save	vmxnet3.c	/^vmxnet3_msix_save(QEMUFile *f, void *opaque)$/;"	f	file:
vmxnet3_net_init	vmxnet3.c	/^static void vmxnet3_net_init(VMXNET3State *s)$/;"	f	file:
vmxnet3_net_uninit	vmxnet3.c	/^static void vmxnet3_net_uninit(VMXNET3State *s)$/;"	f	file:
vmxnet3_on_interrupt_mask_changed	vmxnet3.c	/^vmxnet3_on_interrupt_mask_changed(VMXNET3State *s, int lidx, bool is_masked)$/;"	f	file:
vmxnet3_on_rx_done_update_stats	vmxnet3.c	/^vmxnet3_on_rx_done_update_stats(VMXNET3State *s,$/;"	f	file:
vmxnet3_on_tx_done_update_stats	vmxnet3.c	/^vmxnet3_on_tx_done_update_stats(VMXNET3State *s, int qidx,$/;"	f	file:
vmxnet3_pci_dma_writev	vmxnet3.c	/^vmxnet3_pci_dma_writev(PCIDevice *pci_dev,$/;"	f	file:
vmxnet3_pci_realize	vmxnet3.c	/^static void vmxnet3_pci_realize(PCIDevice *pci_dev, Error **errp)$/;"	f	file:
vmxnet3_pci_uninit	vmxnet3.c	/^static void vmxnet3_pci_uninit(PCIDevice *pci_dev)$/;"	f	file:
vmxnet3_peer_has_vnet_hdr	vmxnet3.c	/^static bool vmxnet3_peer_has_vnet_hdr(VMXNET3State *s)$/;"	f	file:
vmxnet3_pop_next_tx_descr	vmxnet3.c	/^vmxnet3_pop_next_tx_descr(VMXNET3State *s,$/;"	f	file:
vmxnet3_pop_rxc_descr	vmxnet3.c	/^vmxnet3_pop_rxc_descr(VMXNET3State *s, int qidx, uint32_t *descr_gen)$/;"	f	file:
vmxnet3_post_load	vmxnet3.c	/^static int vmxnet3_post_load(void *opaque, int version_id)$/;"	f	file:
vmxnet3_pre_save	vmxnet3.c	/^static void vmxnet3_pre_save(void *opaque)$/;"	f	file:
vmxnet3_process_tx_queue	vmxnet3.c	/^static void vmxnet3_process_tx_queue(VMXNET3State *s, int qidx)$/;"	f	file:
vmxnet3_properties	vmxnet3.c	/^static Property vmxnet3_properties[] = {$/;"	v	file:
vmxnet3_put_int_state	vmxnet3.c	/^static void vmxnet3_put_int_state(QEMUFile *f, void *pv, size_t size)$/;"	f	file:
vmxnet3_put_ring_to_file	vmxnet3.c	/^static void vmxnet3_put_ring_to_file(QEMUFile *f, Vmxnet3Ring *r)$/;"	f	file:
vmxnet3_put_rx_stats_to_file	vmxnet3.c	/^static void vmxnet3_put_rx_stats_to_file(QEMUFile *f,$/;"	f	file:
vmxnet3_put_rxq_descr	vmxnet3.c	/^static void vmxnet3_put_rxq_descr(QEMUFile *f, void *pv, size_t size)$/;"	f	file:
vmxnet3_put_tx_stats_to_file	vmxnet3.c	/^static void vmxnet3_put_tx_stats_to_file(QEMUFile *f,$/;"	f	file:
vmxnet3_put_txq_descr	vmxnet3.c	/^static void vmxnet3_put_txq_descr(QEMUFile *f, void *pv, size_t size)$/;"	f	file:
vmxnet3_qdev_reset	vmxnet3.c	/^static void vmxnet3_qdev_reset(DeviceState *dev)$/;"	f	file:
vmxnet3_read_next_rx_descr	vmxnet3.c	/^vmxnet3_read_next_rx_descr(VMXNET3State *s, int qidx, int ridx,$/;"	f	file:
vmxnet3_realize	vmxnet3.c	/^static void vmxnet3_realize(DeviceState *qdev, Error **errp)$/;"	f	file:
vmxnet3_receive	vmxnet3.c	/^vmxnet3_receive(NetClientState *nc, const uint8_t *buf, size_t size)$/;"	f	file:
vmxnet3_register_types	vmxnet3.c	/^static void vmxnet3_register_types(void)$/;"	f	file:
vmxnet3_reset	vmxnet3.c	/^static void vmxnet3_reset(VMXNET3State *s)$/;"	f	file:
vmxnet3_reset_interrupt_states	vmxnet3.c	/^static void vmxnet3_reset_interrupt_states(VMXNET3State *s)$/;"	f	file:
vmxnet3_reset_mac	vmxnet3.c	/^static void vmxnet3_reset_mac(VMXNET3State *s)$/;"	f	file:
vmxnet3_revert_rxc_descr	vmxnet3.c	/^vmxnet3_revert_rxc_descr(VMXNET3State *s, int qidx)$/;"	f	file:
vmxnet3_ring_curr_cell_idx	vmxnet3.c	/^static inline size_t vmxnet3_ring_curr_cell_idx(Vmxnet3Ring *ring)$/;"	f	file:
vmxnet3_ring_curr_cell_pa	vmxnet3.c	/^static inline hwaddr vmxnet3_ring_curr_cell_pa(Vmxnet3Ring *ring)$/;"	f	file:
vmxnet3_ring_curr_gen	vmxnet3.c	/^static inline uint8_t vmxnet3_ring_curr_gen(Vmxnet3Ring *ring)$/;"	f	file:
vmxnet3_ring_dec	vmxnet3.c	/^static inline void vmxnet3_ring_dec(Vmxnet3Ring *ring)$/;"	f	file:
vmxnet3_ring_inc	vmxnet3.c	/^static inline void vmxnet3_ring_inc(Vmxnet3Ring *ring)$/;"	f	file:
vmxnet3_ring_init	vmxnet3.c	/^static inline void vmxnet3_ring_init(PCIDevice *d,$/;"	f	file:
vmxnet3_ring_read_curr_cell	vmxnet3.c	/^static inline void vmxnet3_ring_read_curr_cell(PCIDevice *d, Vmxnet3Ring *ring,$/;"	f	file:
vmxnet3_ring_write_curr_cell	vmxnet3.c	/^static inline void vmxnet3_ring_write_curr_cell(PCIDevice *d, Vmxnet3Ring *ring,$/;"	f	file:
vmxnet3_rx_filter_may_indicate	vmxnet3.c	/^vmxnet3_rx_filter_may_indicate(VMXNET3State *s, const void *data,$/;"	f	file:
vmxnet3_rx_need_csum_calculate	vmxnet3.c	/^static void vmxnet3_rx_need_csum_calculate(struct NetRxPkt *pkt,$/;"	f	file:
vmxnet3_rx_update_descr	vmxnet3.c	/^static void vmxnet3_rx_update_descr(struct NetRxPkt *pkt,$/;"	f	file:
vmxnet3_send_packet	vmxnet3.c	/^vmxnet3_send_packet(VMXNET3State *s, uint32_t qidx)$/;"	f	file:
vmxnet3_set_events	vmxnet3.c	/^static void vmxnet3_set_events(VMXNET3State *s, uint32_t val)$/;"	f	file:
vmxnet3_set_link_status	vmxnet3.c	/^static void vmxnet3_set_link_status(NetClientState *nc)$/;"	f	file:
vmxnet3_set_variable_mac	vmxnet3.c	/^static void vmxnet3_set_variable_mac(VMXNET3State *s, uint32_t h, uint32_t l)$/;"	f	file:
vmxnet3_setup_rx_filtering	vmxnet3.c	/^static void vmxnet3_setup_rx_filtering(VMXNET3State *s)$/;"	f	file:
vmxnet3_setup_tx_offloads	vmxnet3.c	/^vmxnet3_setup_tx_offloads(VMXNET3State *s)$/;"	f	file:
vmxnet3_trigger_interrupt	vmxnet3.c	/^static void vmxnet3_trigger_interrupt(VMXNET3State *s, int lidx)$/;"	f	file:
vmxnet3_tx_retrieve_metadata	vmxnet3.c	/^vmxnet3_tx_retrieve_metadata(VMXNET3State *s,$/;"	f	file:
vmxnet3_unuse_msix_vectors	vmxnet3.c	/^vmxnet3_unuse_msix_vectors(VMXNET3State *s, int num_vectors)$/;"	f	file:
vmxnet3_update_features	vmxnet3.c	/^static void vmxnet3_update_features(VMXNET3State *s)$/;"	f	file:
vmxnet3_update_interrupt_line_state	vmxnet3.c	/^static void vmxnet3_update_interrupt_line_state(VMXNET3State *s, int lidx)$/;"	f	file:
vmxnet3_update_mcast_filters	vmxnet3.c	/^static void vmxnet3_update_mcast_filters(VMXNET3State *s)$/;"	f	file:
vmxnet3_update_pm_state	vmxnet3.c	/^static void vmxnet3_update_pm_state(VMXNET3State *s)$/;"	f	file:
vmxnet3_update_rx_mode	vmxnet3.c	/^static void vmxnet3_update_rx_mode(VMXNET3State *s)$/;"	f	file:
vmxnet3_update_vlan_filters	vmxnet3.c	/^static void vmxnet3_update_vlan_filters(VMXNET3State *s)$/;"	f	file:
vmxnet3_use_msix_vectors	vmxnet3.c	/^vmxnet3_use_msix_vectors(VMXNET3State *s, int num_vectors)$/;"	f	file:
vmxnet3_validate_interrupt_idx	vmxnet3.c	/^static void vmxnet3_validate_interrupt_idx(bool is_msix, int idx)$/;"	f	file:
vmxnet3_validate_interrupts	vmxnet3.c	/^static void vmxnet3_validate_interrupts(VMXNET3State *s)$/;"	f	file:
vmxnet3_validate_queues	vmxnet3.c	/^static void vmxnet3_validate_queues(VMXNET3State *s)$/;"	f	file:
vmxnet3_verify_driver_magic	vmxnet3.c	/^static bool vmxnet3_verify_driver_magic(PCIDevice *d, hwaddr dshmem)$/;"	f	file:
vmxnet3_verify_intx	vmxnet3.c	/^static bool vmxnet3_verify_intx(VMXNET3State *s, int intx)$/;"	f	file:
vmxnet3_vmstate_need_pcie_device	vmxnet3.c	/^static bool vmxnet3_vmstate_need_pcie_device(void *opaque)$/;"	f	file:
vmxnet3_vmstate_test_pci_device	vmxnet3.c	/^static bool vmxnet3_vmstate_test_pci_device(void *opaque, int version_id)$/;"	f	file:
vmxstate_vmxnet3_mcast_list	vmxnet3.c	/^static const VMStateDescription vmxstate_vmxnet3_mcast_list = {$/;"	v	file:
vq2q	virtio-net.c	/^static int vq2q(int queue_index)$/;"	f	file:
vqs	vhost_net.c	/^    struct vhost_virtqueue vqs[2];$/;"	m	struct:vhost_net	typeref:struct:vhost_net::vhost_virtqueue	file:
wakeUpEvents	vmxnet3.h	/^    __le16        wakeUpEvents;  \/* VMXNET3_PM_WAKEUP_xxx *\/$/;"	m	struct:Vmxnet3_PMConf
watchdog	dp8393x.c	/^    QEMUTimer *watchdog;$/;"	m	struct:dp8393xState	file:
wb	e1000_regs.h	/^    } wb;                           \/* writeback *\/$/;"	m	union:e1000_rx_desc_extended	typeref:struct:e1000_rx_desc_extended::__anon8
wb	e1000_regs.h	/^    } wb; \/* writeback *\/$/;"	m	union:e1000_rx_desc_packet_split	typeref:struct:e1000_rx_desc_packet_split::__anon14
width	rocker/rocker_of_dpa.c	/^    int width;                       \/* how many uint64_t's in key? *\/$/;"	m	struct:of_dpa_flow_key	file:
word	vmxnet3.h	/^    __le16                word[8];$/;"	m	union:Vmxnet3_GenericDesc
word_swap	lan9118.c	/^    uint32_t word_swap;$/;"	m	struct:__anon123	file:
work_around_broken_dhclient	virtio-net.c	/^static void work_around_broken_dhclient(struct virtio_net_hdr *hdr,$/;"	f	file:
world	rocker/rocker_fp.c	/^    World *world;$/;"	m	struct:fp_port	file:
world	rocker/rocker_of_dpa.c	/^    World *world;$/;"	m	struct:of_dpa	file:
world	rocker/rocker_world.c	/^struct world {$/;"	s	file:
world_alloc	rocker/rocker_world.c	/^World *world_alloc(Rocker *r, size_t sizeof_private,$/;"	f
world_cmd	rocker/rocker_world.h	/^typedef int (world_cmd)(World *world, DescInfo *info,$/;"	t
world_dflt	rocker/rocker.c	/^    World *world_dflt;$/;"	m	struct:rocker	file:
world_do_cmd	rocker/rocker_world.c	/^int world_do_cmd(World *world, DescInfo *info,$/;"	f
world_free	rocker/rocker_world.c	/^void world_free(World *world)$/;"	f
world_ig	rocker/rocker_world.h	/^typedef ssize_t (world_ig)(World *world, uint32_t pport,$/;"	t
world_ingress	rocker/rocker_world.c	/^ssize_t world_ingress(World *world, uint32_t pport,$/;"	f
world_init	rocker/rocker_world.h	/^typedef int (world_init)(World *world);$/;"	t
world_name	rocker/rocker.c	/^    char *world_name;            \/* world name *\/$/;"	m	struct:rocker	file:
world_name	rocker/rocker_world.c	/^const char *world_name(World *world)$/;"	f
world_ops	rocker/rocker_world.h	/^typedef struct world_ops {$/;"	s
world_private	rocker/rocker_world.c	/^void *world_private(World *world)$/;"	f
world_reset	rocker/rocker_world.c	/^void world_reset(World *world)$/;"	f
world_rocker	rocker/rocker_world.c	/^Rocker *world_rocker(World *world)$/;"	f
world_type	rocker/rocker_world.c	/^enum rocker_world_type world_type(World *world)$/;"	f
world_uninit	rocker/rocker_world.h	/^typedef void (world_uninit)(World *world);$/;"	t
worlds	rocker/rocker.c	/^    World *worlds[ROCKER_WORLD_TYPE_MAX];$/;"	m	struct:rocker	file:
write	etraxfs_eth.c	/^    void (*write)(struct qemu_phy *phy, unsigned int req, unsigned int data);$/;"	m	struct:qemu_phy	file:
write	rocker/rocker_of_dpa.c	/^    } write;$/;"	m	struct:of_dpa_flow_action	typeref:struct:of_dpa_flow_action::__anon67	file:
write	xilinx_axienet.c	/^    void (*write)(struct PHY *phy, unsigned int req,$/;"	m	struct:PHY	file:
write_buffer_descriptor	fsl_etsec/rings.c	/^static void write_buffer_descriptor(eTSEC         *etsec,$/;"	f	file:
write_dmactrl	fsl_etsec/etsec.c	/^static void write_dmactrl(eTSEC          *etsec,$/;"	f	file:
write_ievent	fsl_etsec/etsec.c	/^static void write_ievent(eTSEC          *etsec,$/;"	f	file:
write_rbasex	fsl_etsec/etsec.c	/^static void write_rbasex(eTSEC          *etsec,$/;"	f	file:
write_rstat	fsl_etsec/etsec.c	/^static void write_rstat(eTSEC          *etsec,$/;"	f	file:
write_tbasex	fsl_etsec/etsec.c	/^static void write_tbasex(eTSEC          *etsec,$/;"	f	file:
write_tstat	fsl_etsec/etsec.c	/^static void write_tstat(eTSEC          *etsec,$/;"	f	file:
write_word_h	lan9118.c	/^    uint16_t write_word_h;$/;"	m	struct:__anon123	file:
write_word_l	lan9118.c	/^    uint16_t write_word_l;$/;"	m	struct:__anon123	file:
write_word_n	lan9118.c	/^    uint32_t write_word_n;$/;"	m	struct:__anon123	file:
write_word_prev_offset	lan9118.c	/^    uint32_t write_word_prev_offset;$/;"	m	struct:__anon123	file:
written	e1000e_core.c	/^    uint16_t written[MAX_PS_BUFFERS];$/;"	m	struct:e1000e_ba_state_st	file:
wt_last_update	dp8393x.c	/^    int64_t wt_last_update;$/;"	m	struct:dp8393xState	file:
xen_netdev_ops	xen_nic.c	/^struct XenDevOps xen_netdev_ops = {$/;"	v	typeref:struct:XenDevOps
xendev	xen_nic.c	/^    struct XenDevice      xendev;  \/* must be first *\/$/;"	m	struct:XenNetDev	typeref:struct:XenNetDev::XenDevice	file:
xgmac_enet_class_init	xgmac.c	/^static void xgmac_enet_class_init(ObjectClass *klass, void *data)$/;"	f	file:
xgmac_enet_info	xgmac.c	/^static const TypeInfo xgmac_enet_info = {$/;"	v	file:
xgmac_enet_init	xgmac.c	/^static int xgmac_enet_init(SysBusDevice *sbd)$/;"	f	file:
xgmac_enet_register_types	xgmac.c	/^static void xgmac_enet_register_types(void)$/;"	f	file:
xgmac_enet_send	xgmac.c	/^static void xgmac_enet_send(XgmacState *s)$/;"	f	file:
xgmac_properties	xgmac.c	/^static Property xgmac_properties[] = {$/;"	v	file:
xgmac_read_desc	xgmac.c	/^static void xgmac_read_desc(XgmacState *s, struct desc *d, int rx)$/;"	f	file:
xgmac_write_desc	xgmac.c	/^static void xgmac_write_desc(XgmacState *s, struct desc *d, int rx)$/;"	f	file:
xilinx_axienet_control_stream_push	xilinx_axienet.c	/^xilinx_axienet_control_stream_push(StreamSlave *obj, uint8_t *buf, size_t len)$/;"	f	file:
xilinx_axienet_data_stream_push	xilinx_axienet.c	/^xilinx_axienet_data_stream_push(StreamSlave *obj, uint8_t *buf, size_t size)$/;"	f	file:
xilinx_axienet_reset	xilinx_axienet.c	/^static void xilinx_axienet_reset(DeviceState *d)$/;"	f	file:
xilinx_enet_class_init	xilinx_axienet.c	/^static void xilinx_enet_class_init(ObjectClass *klass, void *data)$/;"	f	file:
xilinx_enet_control_stream_info	xilinx_axienet.c	/^static const TypeInfo xilinx_enet_control_stream_info = {$/;"	v	file:
xilinx_enet_data_stream_info	xilinx_axienet.c	/^static const TypeInfo xilinx_enet_data_stream_info = {$/;"	v	file:
xilinx_enet_info	xilinx_axienet.c	/^static const TypeInfo xilinx_enet_info = {$/;"	v	file:
xilinx_enet_init	xilinx_axienet.c	/^static void xilinx_enet_init(Object *obj)$/;"	f	file:
xilinx_enet_properties	xilinx_axienet.c	/^static Property xilinx_enet_properties[] = {$/;"	v	file:
xilinx_enet_realize	xilinx_axienet.c	/^static void xilinx_enet_realize(DeviceState *dev, Error **errp)$/;"	f	file:
xilinx_enet_register_types	xilinx_axienet.c	/^static void xilinx_enet_register_types(void)$/;"	f	file:
xilinx_enet_stream_class_init	xilinx_axienet.c	/^static void xilinx_enet_stream_class_init(ObjectClass *klass, void *data)$/;"	f	file:
xilinx_ethlite_class_init	xilinx_ethlite.c	/^static void xilinx_ethlite_class_init(ObjectClass *klass, void *data)$/;"	f	file:
xilinx_ethlite_info	xilinx_ethlite.c	/^static const TypeInfo xilinx_ethlite_info = {$/;"	v	file:
xilinx_ethlite_init	xilinx_ethlite.c	/^static void xilinx_ethlite_init(Object *obj)$/;"	f	file:
xilinx_ethlite_properties	xilinx_ethlite.c	/^static Property xilinx_ethlite_properties[] = {$/;"	v	file:
xilinx_ethlite_realize	xilinx_ethlite.c	/^static void xilinx_ethlite_realize(DeviceState *dev, Error **errp)$/;"	f	file:
xilinx_ethlite_register_types	xilinx_ethlite.c	/^static void xilinx_ethlite_register_types(void)$/;"	f	file:
xilinx_ethlite_reset	xilinx_ethlite.c	/^static void xilinx_ethlite_reset(DeviceState *dev)$/;"	f	file:
xlx_ethlite	xilinx_ethlite.c	/^struct xlx_ethlite$/;"	s	file:
xmit_pos	pcnet.h	/^    int xmit_pos;$/;"	m	struct:PCNetState_st
xmit_seg	e1000.c	/^xmit_seg(E1000State *s)$/;"	f	file:
xmt_tco_frames	eepro100.c	/^    uint16_t xmt_tco_frames, rcv_tco_frames;$/;"	m	struct:__anon81	file:
zero_mac	rocker/rocker_of_dpa.c	/^static const MACAddr zero_mac = { .a = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } };$/;"	v	file:
